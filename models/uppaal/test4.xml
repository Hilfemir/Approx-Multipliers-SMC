<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>/* Feel free to cite and/or read details to the model using:
  STRNADEL Josef. Statistical Model Checking of Approximate Circuits: Challenges and Opportunities. In: Proceedings of the 2020 Design, Automation &amp; Test in Europe Conference &amp; Exhibition (DATE). Grenoble: IEEE Computer Society, 2020, pp. 1574-1577. ISBN 978-3-9819263-4-7. Available from: https://ieeexplore.ieee.org/document/9116207 and https://www.fit.vut.cz/research/publication/12055/
 */

int dif_count = 0;
int res_count = 0;

int out_sum_all_acc;
int out_sum_all_approx;
int out_sum_all_diff;
double out_sum_all_diff_squared;

double out_sum_relative;

int hamming_distance = 0;
double error_prob = 0.0;
double mean_abs_error = 0.0;
double mean_squared_error = 0.0;
double mean_relative_error = 0.0;
double worst_case_error = 0.0;
double worst_case_relative_error = 0.0;

double rnd;

broadcast chan change[100];
int outcnt=0;

const int NOPS = 9;
typedef int[0,NOPS-1] tOp;

const tOp OP_NOT = 0;
const tOp OP_DLY = 1;
const tOp OP_AND = 2;
const tOp OP_NAND = 3;
const tOp OP_OR = 4;
const tOp OP_NOR = 5;
const tOp OP_XOR = 6;
const tOp OP_XNOR = 7;
const tOp OP_SET = 8;

const int NCOM = 7;
tOp tbl_op[NCOM] = {
    2,                
    2,                
    4,                
    2,                
    2,                
    0,                
    1};               

int duration(tOp op){  
    int duration=0;
    if(op==OP_NOT) duration=3;
    if(op==OP_DLY) duration=10;
    if(op==OP_AND) duration=10;
    if(op==OP_NAND) duration=13;
    if(op==OP_OR) duration=10;
    if(op==OP_NOR) duration=13;
    if(op==OP_XOR) duration=20;
    if(op==OP_XNOR) duration=23;
    if(op==OP_SET) duration=0;
    return duration;
}

broadcast chan go, pwrUp;

const double COVERAGE_RATIO = 100.0;
const int DLY_ZERO = 0;

const int TBL_PWR2[31] = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824};

broadcast chan update;
broadcast chan cmpDone;

const int MAX_BITS = 1024;
bool bits[MAX_BITS];
bool difference=false;
bool dif2=false;
int diffctrl=0;
int err_magn_v;    
double err_magn_r;  

int bitsCovered;
double inCoverage;

bool allCovered=false;

const int NIB_MUL2 = 4;                  
const int NOB_MUL2 = 4;                  
const int NTV_MUL2 = TBL_PWR2[NIB_MUL2]; 
const int DLY_MUL2 = 20;                 

/* ===------------------------  ------------------------==== */
int getMasked(int w, int offset, int data){ 
    int mask = (TBL_PWR2[w]-1);    
   return (data &amp; (mask &lt;&lt; offset)) &gt;&gt; offset;     
}    
bool getBit(int pos, int data){ return getMasked(1, pos, data); }

const int NIB_ANY = 4;                  
const int NOB_ANY = 4;                  
const int NTV_ANY = TBL_PWR2[NIB_ANY]; 
const int DLY_ANY = 20;                 
bool tbl_acc_any[TBL_PWR2[NIB_ANY]][NIB_ANY+NOB_ANY];
//
const int NFUN = 1;
typedef int[0,NFUN-1] tFun;
//-------
const tFun F_MUL = 0;
//
void fill_tbl_acc_any(int win, int wout, tFun f, int fdly){ 
    int i, j, k, op0, op1, result;
    for(i=0; i&lt;TBL_PWR2[win]; i++){    
        for(j=0; j&lt;win; j++){
            tbl_acc_any[i][j] = getBit(j,i);
        }
        if(f==F_MUL){
            op0 = getMasked(win/2, 0, i);
            op1 = getMasked(win/2, win/2, i);
            result = op0*op1;
        }
        else { result = 0; }
        for(k=0; k&lt;wout; k++){
            tbl_acc_any[i][win+(wout-k-1)] = getBit(k,result);
        }
    }
}

/* ===------------------------  ------------------------==== */
const int NPI = NIB_MUL2;    
const int NPO = NOB_MUL2;   
//
const int NTV = NTV_MUL2; 
const int DLY = DLY_MUL2;
//
const int PIxy[NPI] = {0,1,2,3};    
const int POx[NPO] = {4,5,6,7};     
//
const int POy[NPO] = {8,9,10,-1};

int PWR2_NPI = TBL_PWR2[NPI];

/* ===------------------------  ------------------------==== */

const int MAX_INNER_NODES = 100;
typedef struct {
    int dly;
    bool flag;
} sNode;
sNode nodes[MAX_INNER_NODES];

const int MAX_INNER_GATES = 100;
typedef struct {
    bool active;
    int in0;
    int in1;
    int inAvail;
    int out0;
    int dly;
    int depth;
    bool flag;
} sGate;
sGate gates[MAX_INNER_GATES];

int approxCircNodes = 0;
int approxCircGates = 0;
int approxCircDly=0;
int approxCircDepth=0;


bool outEq(){
    bool same=true;
    int i;
    for(i=0; i&lt;NPO; i++){
        if((POx[i]&gt;=0) &amp;&amp; (POy[i]&gt;=0)){
            if(bits[POx[i]] != bits[POy[i]]){
                hamming_distance++;
                same = false;
            }
        }
    }
    
    if (same == false) {
        dif_count++;
    }

    res_count++;

    return same;
}

double EP() {
    //error probability
    //number of different outputs divided by 2^NPI
    double ret = dif_count / (1.0*PWR2_NPI);

    return ret;
}

double MAE() {
    //mean absolute error
    //sum of differences (approx. vs acc.) divided by 2^NPI
    double ret = out_sum_all_diff / (1.0*PWR2_NPI);

    return ret;
}

double MSE() {
    //mean squared error
    //sum of squared differences divided by 2^NPI
    double ret = out_sum_all_diff_squared / (1.0*PWR2_NPI);

    return ret;
}

double MRE() {
    //mean relative error
    //mean error in relation to size of accurate output
    double ret = out_sum_relative / (1.0*PWR2_NPI);

    return ret;
}

void calc_metrics() {
    error_prob = EP();
    mean_abs_error = MAE();
    mean_squared_error = MSE();
    mean_relative_error = MRE();
}

int res_acc, res_approx;
void diff(){
    int i;
    double res_dif;
    double relative_res_dif;
    res_acc = 0;
    res_approx = 0;

    difference = !outEq();

     for(i=0; i&lt;=NPO-1; i++){                                       
        res_acc += bits[i+NPI]*TBL_PWR2[i];
        if(POy[i]&gt;=0) res_approx += bits[i+NPI+NPO]*TBL_PWR2[i];    
    }
    out_sum_all_acc += res_acc;
    out_sum_all_approx += res_approx;

    out_sum_all_diff = abs(out_sum_all_acc - out_sum_all_approx);
    out_sum_all_diff_squared = out_sum_all_diff_squared + pow(abs(res_approx-res_acc),2);
    out_sum_relative = out_sum_relative + (abs(res_approx-res_acc) / fmax(1.0, 1.0*res_acc));

    res_dif = 1.0 * abs(res_approx - res_acc);
    if (res_dif &gt; worst_case_error) {
        worst_case_error = res_dif;
    }

    relative_res_dif = abs(res_approx - res_acc) / fmax(1.0, 1.0*res_acc);
    if (relative_res_dif &gt; worst_case_relative_error) {
        worst_case_relative_error = relative_res_dif;
    }

    err_magn_v = res_acc - res_approx;
    if(res_acc!=0) err_magn_r = 1-((1.0*res_approx)/(1.0*res_acc));

    calc_metrics();
}

</declaration>
	<template>
		<name>tmul2any</name>
		<parameter>int a0, int a1, int b0, int b1, int y0, int y1, int y2, int y3, bool &amp;ttbl[TBL_PWR2[NIB_ANY]][NIB_ANY+NOB_ANY], const int  dly</parameter>
		<declaration>clock x;

int getIdx(int i){
    int idx=-1;
    
    if(i==0){ idx = a0; } 
    else if (i==1) { idx = a1; }
    else if (i==2) { idx = b0; }
    else if (i==3) { idx = b1; }
    else if (i==4) { idx = y0; }
    else if (i==5) { idx = y1; }
    else if (i==6) { idx = y2; }
    else if (i==7) { idx = y3; }
    else {}

    return idx;
}



int bin2dec()
{
    int result=0, i;
    for(i=0; i&lt;NIB_MUL2; i++){
        result += bits[getIdx(i)]*TBL_PWR2[i];
    }

    return result;
}


int getOut(){
    int res, i;
    for(i=NIB_MUL2; i&lt;NIB_MUL2+NOB_MUL2; i++){
        res += bits[getIdx(i)]*TBL_PWR2[i-NIB_MUL2];
    }
    return res;    
}

void f(){
    if(y3&gt;=0) bits[y3]=ttbl[bin2dec()][4];
    if(y2&gt;=0) bits[y2]=ttbl[bin2dec()][5];
    if(y1&gt;=0) bits[y1]=ttbl[bin2dec()][6];
    if(y0&gt;=0) bits[y0]=ttbl[bin2dec()][7];

    diffctrl++;
}

void inits(){
    fill_tbl_acc_any(NIB_ANY, NOB_ANY, F_MUL, dly);
}
</declaration>
		<location id="id0" x="-170" y="0">
		</location>
		<location id="id1" x="0" y="0">
			<label kind="invariant" x="-25" y="17">x&lt;=dly</label>
		</location>
		<location id="id2" x="-374" y="0">
			<committed/>
		</location>
		<init ref="id2"/>
		<transition id="id3">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="assignment" x="-297" y="0">inits()</label>
		</transition>
		<transition id="id4">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-152" y="-136">x==dly</label>
			<label kind="assignment" x="17" y="-59">f()</label>
			<nail x="0" y="-102"/>
			<nail x="-170" y="-102"/>
		</transition>
		<transition id="id5">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-110" y="-25">update?</label>
			<label kind="assignment" x="-93" y="0">x=0</label>
		</transition>
	</template>
	<template>
		<name>tmul2_tb_exhaust</name>
		<parameter>const int a0, const int a1, const int b0, const int b1, const int dly, const double covratio</parameter>
		<declaration>clock x;
clock tcover;
int input=0;
int nsame=0, inSame=0;
double rCover;

bool inCoverSet[NTV];

int covered()
{
    int cnt=0;

    for(i: int[0,NTV-1])
    {
        if(inCoverSet[i]) {
            cnt++;
        }
    }

    bitsCovered=cnt;

    return cnt;
}

int bin2dec()
{
    int result=0, i;
    for(i=0; i&lt;NPI; i++){
        result += bits[i]*TBL_PWR2[i];
    }

    return result;
}


bool inCovered()
{
  return forall (i : int[0,NTV-1]) inCoverSet[i];    
}



void f(){
    bits[a0] = getBit(0, input);
    bits[a1] = getBit(1, input);
    bits[b0] = getBit(2, input);
    bits[b1] = getBit(3, input);

    if(inCoverSet[input]) { inSame = -1*input; nsame++; }
    else inSame = input;
    inCoverSet[input] = true;
    input = (input+1) % NTV;
    covered();

    rCover = 100.0*bitsCovered / NTV; 
}

void inits(){
    int i;
    for(i:int[0,MAX_INNER_NODES-1]){ nodes[i].flag=false; }
    for(i:int[0,NPI-1]){
        if(exists(j:int[0,NPI-1]) PIxy[j]==i){ 
            nodes[i].flag=true;    
            nodes[i].dly=0;        
        }
        approxCircNodes++;
    }
    for(i=0; i&lt;approxCircGates; i++) gates[i].flag=false;    
    while(exists(i:int[0,MAX_INNER_GATES-1]) (gates[i].flag==false &amp;&amp; i&lt;approxCircGates)){
        approxCircDepth++;
        for(i=0; i&lt;approxCircGates; i++) {
            if(!gates[i].flag &amp;&amp; nodes[gates[i].in0].flag &amp;&amp; nodes[gates[i].in1].flag){  
                nodes[gates[i].out0].dly = (nodes[gates[i].in0].dly&gt;nodes[gates[i].in1].dly?nodes[gates[i].in0].dly:nodes[gates[i].in1].dly) + duration(tbl_op[i]);
                nodes[gates[i].out0].flag=true;
                approxCircNodes++;
                if(nodes[gates[i].out0].dly&gt;approxCircDly){ approxCircDly=nodes[gates[i].out0].dly; }

                gates[i].flag=true;   
            }  
        }
    }
}</declaration>
		<location id="id6" x="-136" y="0">
			<name x="-153" y="8">apply</name>
			<committed/>
		</location>
		<location id="id7" x="-374" y="0">
			<name x="-382" y="8">get</name>
			<committed/>
		</location>
		<location id="id8" x="34" y="0">
			<name x="17" y="8">done</name>
			<label kind="invariant" x="0" y="-34">tcover'==0</label>
		</location>
		<location id="id9" x="-246" y="-102">
			<name x="-255" y="-136">wait</name>
		</location>
		<location id="id10" x="-510" y="0">
			<urgent/>
		</location>
		<init ref="id10"/>
		<transition id="id11">
			<source ref="id10"/>
			<target ref="id7"/>
			<label kind="assignment" x="-459" y="0">inits()</label>
		</transition>
		<transition id="id12">
			<source ref="id6"/>
			<target ref="id9"/>
			<label kind="guard" x="-221" y="-93">!inCovered()</label>
			<nail x="-136" y="-102"/>
		</transition>
		<transition id="id13">
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="-93" y="-25">inCovered()</label>
			<label kind="assignment" x="-110" y="0">allCovered=true,
x=0</label>
		</transition>
		<transition id="id14">
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-289" y="-25">update!</label>
			<label kind="assignment" x="-280" y="0">f(), x=0</label>
		</transition>
		<transition id="id15">
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-365" y="-93">cmpDone?</label>
			<nail x="-374" y="-102"/>
		</transition>
	</template>
	<template>
		<name>tmul2_tb_nondet</name>
		<parameter>const int a0, const int a1, const int b0, const int b1, const int dly, const double covratio</parameter>
		<declaration>clock x;
clock tcover;
int input=0;
int nsame=0, inSame=0;
double rCover;
int idx=0;

bool inCoverSet[NTV];

int covered()
{
    int cnt=0;

    for(i: int[0,NTV-1])
    {
        if(inCoverSet[i]) {
            cnt++;
        }
    }

    bitsCovered=cnt;

    return cnt;
}

int bin2dec()
{
    int result=0, i;
    for(i=0; i&lt;NPI; i++){
        result += bits[i]*TBL_PWR2[i];
    }

    return result;
}


bool inCovered()
{
  return forall (i : int[0,NTV-1]) inCoverSet[i];    
}

void f(int i){
    input = bin2dec();
   if(inCoverSet[input]) { inSame = -1*input; nsame++; }
  else inSame = input;
   inCoverSet[bin2dec()] = true;
    covered();

    rCover = 100.0*bitsCovered / NTV; 

    inCoverage = 0.0;
}

void inits(){
    int i;
    for(i:int[0,MAX_INNER_NODES-1]){ nodes[i].flag=false; }
    for(i:int[0,NPI-1]){
        if(exists(j:int[0,NPI-1]) PIxy[j]==i){ 
            nodes[i].flag=true;
            nodes[i].dly=0;      
        }
        approxCircNodes++;
    }
    for(i=0; i&lt;approxCircGates; i++) gates[i].flag=false;    
    while(exists(i:int[0,MAX_INNER_GATES-1]) (gates[i].flag==false &amp;&amp; i&lt;approxCircGates)){
        approxCircDepth++;
        for(i=0; i&lt;approxCircGates; i++) {
            if(!gates[i].flag &amp;&amp; nodes[gates[i].in0].flag &amp;&amp; nodes[gates[i].in1].flag){  
                nodes[gates[i].out0].dly = (nodes[gates[i].in0].dly&gt;nodes[gates[i].in1].dly?nodes[gates[i].in0].dly:nodes[gates[i].in1].dly) + duration(tbl_op[i]);
                nodes[gates[i].out0].flag=true;
                approxCircNodes++;
                if(nodes[gates[i].out0].dly&gt;approxCircDly){ approxCircDly=nodes[gates[i].out0].dly; }

                gates[i].flag=true;
            }  
        }
    }
}</declaration>
		<location id="id16" x="-119" y="-102">
			<name x="-129" y="-136">wait</name>
		</location>
		<location id="id17" x="-246" y="0">
			<name x="-255" y="8">get</name>
			<committed/>
		</location>
		<location id="id18" x="170" y="0">
			<name x="153" y="8">done</name>
			<label kind="invariant" x="136" y="-34">tcover'==0</label>
		</location>
		<location id="id19" x="0" y="0">
			<name x="-17" y="8">apply</name>
			<committed/>
		</location>
		<location id="id20" x="-246" y="-102">
			<committed/>
		</location>
		<location id="id21" x="-374" y="0">
			<urgent/>
		</location>
		<init ref="id21"/>
		<transition id="id22">
			<source ref="id21"/>
			<target ref="id17"/>
			<label kind="assignment" x="-331" y="0">inits()</label>
		</transition>
		<transition id="id23">
			<source ref="id20"/>
			<target ref="id17"/>
			<label kind="select" x="-238" y="-68">i: int[a0, b1]</label>
			<label kind="assignment" x="-238" y="-51">bits[i] ^= 1, idx=i</label>
		</transition>
		<transition id="id24">
			<source ref="id16"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-212" y="-102">cmpDone?</label>
		</transition>
		<transition id="id25">
			<source ref="id19"/>
			<target ref="id16"/>
			<label kind="guard" x="-93" y="-93">!inCovered()</label>
			<nail x="0" y="-102"/>
		</transition>
		<transition id="id26">
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-153" y="-25">update!</label>
			<label kind="assignment" x="-144" y="0">f(idx)</label>
		</transition>
		<transition id="id27">
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="guard" x="42" y="-25">inCovered()</label>
			<label kind="assignment" x="34" y="0">allCovered=true</label>
		</transition>
	</template>
	<template>
		<name>tmul2_tb_random</name>
		<parameter>const int dly, const double covratio</parameter>
		<declaration>clock x;
clock tcover;
int input=0;
int nsame=0, inSame=0;
double rCover;
int idx=0;

bool inCoverSet[NTV];

int covered()
{
    int cnt=0;

    for(i: int[0,NTV-1])
    {
        if(inCoverSet[i]) {
            cnt++;
        }
    }

    bitsCovered=cnt;

    return cnt;
}

int bin2dec()
{
    int result=0, i;
    for(i=0; i&lt;NPI; i++){
        result += bits[i]*TBL_PWR2[i];
    }

    return result;
}


bool inCovered()
{
  return forall (i : int[0,NTV-1]) inCoverSet[i];    
}

/*
void f(int i){
    int j, k;
    int min = 0;
    int max = (NPI/2) - 1;

    //flipping bits in the first number (bits &lt;0,NPI/2-1&gt;)
    //eg. &lt;0,7&gt; for an 8x8bit mult.

    //generate which bit should change
    j=fint(random(NPI/2));

    //overflow and underflow corrections
    if(j &lt; min) j=min;
    if(j &gt; max) j=max;

    bits[j] ^= 1; //flip the selected bit, so 0 -&gt; 1, 1 -&gt; 0

    //flipping bits in the second number (bits &lt;NPI/2,NPI-1&gt;)
    //eg. &lt;8,15&gt; for an 8x8bit mult.
    
    //generate which bit should change
    k = fint(random(NPI/2));

    //overflow and underflow corrections
    if(k &lt; min) k=min;
    if(k &gt; max) k=max;
    k += NPI/2; //shift to the correct bit range

    bits[k] ^= 1; //flip the selected bit, so 0 -&gt; 1, 1 -&gt; 0

    //check if this bit combination has already been used
    if(inCoverSet[input]) { inSame = -1*input; nsame++; }
    else inSame = input;
    inCoverSet[bin2dec()] = true;
    covered();

    rCover = 100.0*bitsCovered / NTV; 

    inCoverage = 0.0;
}
*/

void dec_to_bin(int number, bool &amp;number_binary[NPI/2]) {
    //init all bits to 0
    int j;
    int index;
    for(i:int[0,(NPI/2 - 1)]) {
        number_binary[i] = 0;
    }

    if(number == 0) { 
        return; 
    }

    while(number &gt; 0) {
        index = NPI/2 - 1 - j;
        if(index &lt; 0) index = 0;
        number_binary[index] = number % 2;
        number /= 2;
        j++;
    }
}

void f(int i){
    int j, k;
    bool j_binary[NPI/2];
    bool k_binary[NPI/2];

    int imax = fint(exp2(NPI));

    j = fint(random(imax));
    k = fint(random(imax));

    dec_to_bin(j, j_binary);
    dec_to_bin(k, k_binary);

    for(i:int[0,NPI/2 - 1]) {
        bits[i] = j_binary[i];
        bits[i+NPI/2] = k_binary[i];
    }

    //check if this bit combination has already been used
    if(inCoverSet[input]) { inSame = -1*input; nsame++; }
    else inSame = input;
    inCoverSet[bin2dec()] = true;
    covered();

    rCover = 100.0*bitsCovered / NTV; 

    inCoverage = 0.0;
}

void inits(){
    int i;
    for(i:int[0,MAX_INNER_NODES-1]){ nodes[i].flag=false; }
    for(i:int[0,NPI-1]){
        if(exists(j:int[0,NPI-1]) PIxy[j]==i){ 
            nodes[i].flag=true;    
            nodes[i].dly=0;        
        }
        approxCircNodes++;
    }
    for(i=0; i&lt;approxCircGates; i++) gates[i].flag=false;
    while(exists(i:int[0,MAX_INNER_GATES-1]) (gates[i].flag==false &amp;&amp; i&lt;approxCircGates)){
        approxCircDepth++;
        for(i=0; i&lt;approxCircGates; i++) {
            if(!gates[i].flag &amp;&amp; nodes[gates[i].in0].flag &amp;&amp; nodes[gates[i].in1].flag){  
                nodes[gates[i].out0].dly = (nodes[gates[i].in0].dly&gt;nodes[gates[i].in1].dly?nodes[gates[i].in0].dly:nodes[gates[i].in1].dly) + duration(tbl_op[i]);
                nodes[gates[i].out0].flag=true;
                approxCircNodes++;
                if(nodes[gates[i].out0].dly&gt;approxCircDly){ approxCircDly=nodes[gates[i].out0].dly; }

                gates[i].flag=true; 
            }  
        }
    }
}</declaration>
		<location id="id28" x="-119" y="-102">
			<name x="-129" y="-136">wait</name>
		</location>
		<location id="id29" x="-246" y="0">
			<name x="-255" y="8">get</name>
			<committed/>
		</location>
		<location id="id30" x="170" y="0">
			<name x="153" y="8">done</name>
			<label kind="invariant" x="136" y="-34">tcover'==0</label>
		</location>
		<location id="id31" x="0" y="0">
			<name x="-17" y="8">apply</name>
			<committed/>
		</location>
		<location id="id32" x="-246" y="-102">
			<committed/>
		</location>
		<location id="id33" x="-374" y="0">
			<urgent/>
		</location>
		<init ref="id33"/>
		<transition id="id34">
			<source ref="id33"/>
			<target ref="id29"/>
			<label kind="assignment" x="-331" y="0">inits()</label>
		</transition>
		<transition id="id35">
			<source ref="id32"/>
			<target ref="id29"/>
		</transition>
		<transition id="id36">
			<source ref="id28"/>
			<target ref="id32"/>
			<label kind="synchronisation" x="-212" y="-102">cmpDone?</label>
		</transition>
		<transition id="id37">
			<source ref="id31"/>
			<target ref="id28"/>
			<label kind="guard" x="-93" y="-93">!inCovered()</label>
			<nail x="0" y="-102"/>
		</transition>
		<transition id="id38">
			<source ref="id29"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-153" y="-25">update!</label>
			<label kind="assignment" x="-144" y="0">f(idx)</label>
		</transition>
		<transition id="id39">
			<source ref="id31"/>
			<target ref="id30"/>
			<label kind="guard" x="42" y="-25">inCovered()</label>
			<label kind="assignment" x="34" y="0">allCovered=true</label>
		</transition>
	</template>
	<template>
		<name>syncPrimary</name>
		<declaration>int idx;</declaration>
		<location id="id40" x="-748" y="-306">
		</location>
		<location id="id41" x="-646" y="-306">
			<committed/>
		</location>
		<location id="id42" x="-510" y="-306">
			<committed/>
		</location>
		<init ref="id40"/>
		<transition id="id43">
			<source ref="id42"/>
			<target ref="id40"/>
			<label kind="guard" x="-646" y="-399">idx&gt;=NPI</label>
			<nail x="-510" y="-374"/>
			<nail x="-748" y="-374"/>
		</transition>
		<transition id="id44">
			<source ref="id42"/>
			<target ref="id41"/>
			<label kind="guard" x="-595" y="-323">idx&lt;NPI</label>
			<nail x="-578" y="-272"/>
		</transition>
		<transition id="id45">
			<source ref="id41"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-612" y="-340">change[idx]!</label>
			<label kind="assignment" x="-629" y="-280">idx++</label>
		</transition>
		<transition id="id46">
			<source ref="id40"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="-730" y="-323">update?</label>
			<label kind="assignment" x="-714" y="-306">idx=0</label>
		</transition>
	</template>
	<template>
		<name>eval_diff</name>
		<parameter>const int dly</parameter>
		<declaration>clock x;</declaration>
		<location id="id47" x="-238" y="0">
			<label kind="invariant" x="-297" y="-8">x&lt;=dly</label>
		</location>
		<location id="id48" x="-102" y="0">
			<committed/>
		</location>
		<init ref="id47"/>
		<transition id="id49">
			<source ref="id48"/>
			<target ref="id47"/>
			<label kind="synchronisation" x="-178" y="51">cmpDone!</label>
			<label kind="assignment" x="-246" y="110">outcnt=0, diffctrl=0, x=0</label>
			<nail x="-102" y="110"/>
			<nail x="-238" y="110"/>
		</transition>
		<transition id="id50">
			<source ref="id47"/>
			<target ref="id47"/>
			<label kind="guard" x="-331" y="-93">diffctrl&lt;2
&amp;&amp; x==dly</label>
			<label kind="assignment" x="-289" y="-42">x=0</label>
			<nail x="-263" y="-76"/>
			<nail x="-229" y="-76"/>
		</transition>
		<transition id="id51">
			<source ref="id47"/>
			<target ref="id48"/>
			<label kind="guard" x="-204" y="0">diffctrl==2</label>
			<label kind="assignment" x="-212" y="-68">err_magn_v=0,
err_magn_r=0.0,
diff()</label>
		</transition>
	</template>
	<template>
		<name>gate2</name>
		<parameter>const int id, const int a0, const int a1, const int y0, broadcast chan &amp;cin0, broadcast chan &amp;cin1, broadcast chan &amp;cout0</parameter>
		<declaration>clock x;

void inits(){
    int i;

    // collect info about the approx.circuit topology 
    gates[id].active = true;
    gates[id].in0 = a0; 
    gates[id].in1 = a1; 
    gates[id].inAvail = 0; 
    gates[id].out0 = y0; 
    gates[id].dly = duration(tbl_op[id]);
    gates[id].depth = -1;
    gates[id].flag = false;

    approxCircGates++;    
}

void outGen(tOp op){
 //   outSync(y0);

    if(op == OP_AND){
        bits[y0] = bits[a0] &amp; bits[a1];        
    }
    else if(op == OP_NAND){
        bits[y0] = not (bits[a0] &amp; bits[a1]);        
    }
    else if(op == OP_OR){
        bits[y0] = bits[a0] | bits[a1];        
    }
    else if(op == OP_NOR){
        bits[y0] = not (bits[a0] | bits[a1]);        
    }
    else if(op == OP_XOR){
        bits[y0] = (bits[a0] != bits[a1]);        
    }
    else if(op == OP_XNOR){
        bits[y0] = (bits[a0] == bits[a1]);
    }
    else if(op == OP_SET){
        //not really a gate but idk how else to do it
        bits[y0] = bits[a0];
    }
    else {    // unsupported operation
    }

    if(id==2){ 
        if(diffctrl&lt;2) diffctrl++;
    }  
}</declaration>
		<location id="id52" x="-170" y="0">
		</location>
		<location id="id53" x="0" y="0">
			<label kind="invariant" x="-17" y="17">x&lt;=duration(tbl_op[id])</label>
		</location>
		<location id="id54" x="-272" y="0">
			<committed/>
		</location>
		<init ref="id54"/>
		<transition id="id55">
			<source ref="id54"/>
			<target ref="id52"/>
			<label kind="assignment" x="-238" y="0">inits()</label>
		</transition>
		<transition id="id56">
			<source ref="id52"/>
			<target ref="id53"/>
			<label kind="synchronisation" x="-144" y="0">cin1?</label>
			<label kind="assignment" x="-76" y="0">x=0</label>
			<nail x="-85" y="0"/>
		</transition>
		<transition id="id57">
			<source ref="id53"/>
			<target ref="id52"/>
			<label kind="guard" x="-110" y="-127">x==duration(tbl_op[id])</label>
			<label kind="synchronisation" x="8" y="-68">cout0!</label>
			<label kind="assignment" x="-144" y="-102">outGen(tbl_op[id])</label>
			<nail x="0" y="-102"/>
			<nail x="-170" y="-102"/>
		</transition>
		<transition id="id58">
			<source ref="id52"/>
			<target ref="id53"/>
			<label kind="synchronisation" x="-136" y="-42">cin0?</label>
			<label kind="assignment" x="-59" y="-42">x=0</label>
			<nail x="-85" y="-34"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

synPri = syncPrimary();
mul2A = tmul2any(PIxy[0],PIxy[1],PIxy[2],PIxy[3],    POx[0],POx[1],POx[2],POx[3],    tbl_acc_any,     DLY_MUL2);

//mul2Atb = tmul2_tb_exhaust(PIxy[0],PIxy[1],PIxy[2],PIxy[3],    DLY_MUL2, COVERAGE_RATIO);
mul2Atb = tmul2_tb_random(DLY_MUL2, COVERAGE_RATIO);

ediff = eval_diff(5);

g24 = gate2(4,    PIxy[0],PIxy[2],    POy[0],    change[0],change[2],change[13]);
g23 = gate2(3,    PIxy[0],PIxy[3],    12,        change[0],change[3],change[12]);
g22 = gate2(2,    11,12,              POy[1],    change[11],change[12],change[14]);
g21 = gate2(1,    PIxy[1],PIxy[2],    11,        change[1],change[2],change[11]);
g20 = gate2(0,    PIxy[1],PIxy[3],    POy[2],    change[1],change[3],change[15]);

// List one or more processes to be composed into a system.
system 
synPri,
mul2A, 
mul2Atb,
ediff
,g20
,g21
,g22
,g23
,g24;    
</system>
	<queries>
		<query>
			<formula>E[&lt;=25000; 10] (max:mul2Atb.tcover)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=350; 100] (max:bitsCovered)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>Pr[&lt;=25000] (&lt;&gt;bitsCovered&gt;14)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=350;1] {bits[0], 2+bits[1], 4+bits[2], 6+bits[3], 8+bits[4], 10+bits[5], 12+bits[6], 14+bits[7], bitsCovered, 16+allCovered}
			</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-13 01:08:17 +0100">
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="bits[0]" type="l" color="0xff0000" encoding="csv">0.0,0.0
0.0,1.0
20.0,1.0
20.0,0.0
40.0,0.0
40.0,1.0
275.20009028492495,1.0
275.20009028492495,0.0
295.20009028492495,0.0
295.20009028492495,1.0
350.0,1.0
					</series>
					<series title="2 + bits[1]" type="l" color="0xff9900" encoding="csv">0.0,2.0
0.0,3.0
40.0,3.0
40.0,2.0
62.251853402704,2.0
62.251853402704,3.0
82.8025624982547,3.0
82.8025624982547,2.0
102.8025624982547,2.0
102.8025624982547,3.0
125.62816499150358,3.0
125.62816499150358,2.0
149.86952240695246,2.0
149.86952240695246,3.0
169.86952240695246,3.0
169.86952240695246,2.0
189.86952240695246,2.0
189.86952240695246,3.0
232.25538062513806,3.0
232.25538062513806,2.0
275.20009028492495,2.0
275.20009028492495,3.0
350.0,3.0
					</series>
					<series title="4 + bits[2]" type="l" color="0xccff00" encoding="csv">0.0,4.0
0.0,5.0
125.62816499150358,5.0
125.62816499150358,4.0
149.86952240695246,4.0
149.86952240695246,5.0
232.25538062513806,5.0
232.25538062513806,4.0
254.1115558682941,4.0
254.1115558682941,5.0
350.0,5.0
					</series>
					<series title="6 + bits[3]" type="l" color="0x33ff00" encoding="csv">0.0,6.0
20.0,6.0
20.0,7.0
40.0,7.0
40.0,6.0
62.251853402704,6.0
62.251853402704,7.0
82.8025624982547,7.0
82.8025624982547,6.0
102.8025624982547,6.0
102.8025624982547,7.0
169.86952240695246,7.0
169.86952240695246,6.0
189.86952240695246,6.0
189.86952240695246,7.0
275.20009028492495,7.0
275.20009028492495,6.0
350.0,6.0
					</series>
					<series title="8 + bits[4]" type="l" color="0x00ff66" encoding="csv">0.0,8.0
20.0,8.0
20.0,9.0
40.0,9.0
40.0,8.0
60.0,8.0
60.0,9.0
145.62816499150358,9.0
145.62816499150358,8.0
169.86952240695246,8.0
169.86952240695246,9.0
252.25538062513806,9.0
252.25538062513806,8.0
274.1115558682941,8.0
274.1115558682941,9.0
295.20009028492495,9.0
295.20009028492495,8.0
315.20009028492495,8.0
315.20009028492495,9.0
350.0,9.0
					</series>
					<series title="10 + bits[5]" type="l" color="0x00ffff" encoding="csv">0.0,10.0
20.0,10.0
20.0,11.0
60.0,11.0
60.0,10.0
145.62816499150358,10.0
145.62816499150358,11.0
169.86952240695246,11.0
169.86952240695246,10.0
252.25538062513806,10.0
252.25538062513806,11.0
350.0,11.0
					</series>
					<series title="12 + bits[6]" type="l" color="0x0066ff" encoding="csv">0.0,12.0
40.0,12.0
40.0,13.0
60.0,13.0
60.0,12.0
350.0,12.0
					</series>
					<series title="14 + bits[7]" type="l" color="0x3300ff" encoding="csv">0.0,14.0
82.251853402704,14.0
82.251853402704,15.0
102.8025624982547,15.0
102.8025624982547,14.0
122.8025624982547,14.0
122.8025624982547,15.0
145.62816499150358,15.0
145.62816499150358,14.0
169.86952240695246,14.0
169.86952240695246,15.0
189.86952240695246,15.0
189.86952240695246,14.0
209.86952240695246,14.0
209.86952240695246,15.0
252.25538062513806,15.0
252.25538062513806,14.0
350.0,14.0
					</series>
					<series title="bitsCovered" type="l" color="0xcc00ff" encoding="csv">0.0,0.0
0.0,1.0
20.0,1.0
20.0,2.0
40.0,2.0
40.0,3.0
62.251853402704,3.0
62.251853402704,4.0
125.62816499150358,4.0
125.62816499150358,5.0
254.1115558682941,5.0
254.1115558682941,6.0
275.20009028492495,6.0
275.20009028492495,7.0
350.0,7.0
					</series>
					<series title="16 + allCovered" type="l" color="0xff0099" encoding="csv">0.0,16.0
350.0,16.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
		<query>
			<formula>simulate [&lt;=1250;1] {bits[0], 2+bits[1], 4+bits[2], 6+bits[3], 10+bits[4], 12+bits[5], 14+bits[6], 16+bits[7], 20+bits[8], 22+bits[9], 24+bits[10], 26+bits[11], 28+bits[12], 32+difference, out_sum_all_acc, out_sum_all_approx}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=1500;1] {bits[0], 2+bits[1], 4+bits[2], 6+bits[3], 8+bits[4], 10+bits[5], 12+bits[6], 14+bits[7], 20+bits[8], 22+bits[9], 24+bits[10], 26+bits[11], bitsCovered, 20+allCovered, 30+mul2Atb.inSame, 40+mul2Atb.input, 30+mul2Atb.nsame, mul2Atb.rCover, 60+difference*10}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=2500;5] {100*((((100.0*(out_sum_all_acc-out_sum_all_approx))/(100.0*(out_sum_all_acc+1))))), out_sum_all_acc, out_sum_all_approx}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=2000;5] {40+difference, 50+10*err_magn_v, 100*err_magn_r, out_sum_all_acc, out_sum_all_approx, 80+out_sum_all_diff, mul2Atb.rCover, 100*((1+1.0*out_sum_all_acc)/(1+1.0*out_sum_all_approx))}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=4000;20] {out_sum_all_diff}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=400;5] {bits[0], 2+bits[1], 4+bits[2], 6+bits[3], 10+bits[4], 12+bits[5], 14+bits[6], 16+bits[7], 20+bits[8], 22+bits[9], 24+bits[10], 26+bits[11], 30+bits[14], 32+bits[15], 34+bits[16], 36+bits[13], 38+bits[12], 40+difference, 45+diffctrl, 50+outcnt}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>sup: err_magn_v
			</formula>
			<comment>Maximalni rozdil mezi vysledkem presne a priblizne nasobicky (pro stejny vstup)</comment>
		</query>
		<query>
			<formula>E[&lt;=2500; 10] (max:err_magn_v)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=2500; 10] (max:err_magn_r)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=25000; 10] (max:out_sum_all_diff)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=5000;200] {bitsCovered, 100*allCovered, mul2Atb.rCover}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>Pr[&lt;=50000] (&lt;&gt;allCovered)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=2500; 10] (max:dif_count)</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate[&lt;=5000;1] {res_acc, res_approx}</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-12 17:46:05 +0100">
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="res_acc" type="l" color="0xff0000" encoding="csv">0.0,0.0
24.955735889961943,0.0
24.955735889961943,2.0
49.804746258305386,2.0
49.804746258305386,0.0
69.80474625830539,0.0
69.80474625830539,4.0
90.83607498789206,4.0
90.83607498789206,0.0
113.40576982242055,0.0
113.40576982242055,4.0
133.93709291354753,4.0
133.93709291354753,0.0
153.93709291354753,0.0
153.93709291354753,1.0
178.53568757884204,1.0
178.53568757884204,0.0
202.36517768818885,0.0
202.36517768818885,4.0
222.36517768818885,4.0
222.36517768818885,9.0
246.4653361577075,9.0
246.4653361577075,1.0
267.6896437606774,1.0
267.6896437606774,0.0
287.6896437606774,0.0
287.6896437606774,2.0
308.5201019246597,2.0
308.5201019246597,0.0
329.0143022185657,0.0
329.0143022185657,2.0
349.0143022185657,2.0
349.0143022185657,0.0
369.32870545308106,0.0
369.32870545308106,1.0
393.59368845354766,1.0
393.59368845354766,9.0
413.59368845354766,9.0
413.59368845354766,2.0
433.59368845354766,2.0
433.59368845354766,0.0
456.81181599386036,0.0
456.81181599386036,2.0
476.81181599386036,2.0
476.81181599386036,0.0
498.89125441084616,0.0
498.89125441084616,2.0
523.5265498457011,2.0
523.5265498457011,9.0
545.3864186198916,9.0
545.3864186198916,1.0
569.3172864464577,1.0
569.3172864464577,9.0
593.7268575269263,9.0
593.7268575269263,2.0
614.4897464883979,2.0
614.4897464883979,0.0
635.7589877280407,0.0
635.7589877280407,2.0
655.7589877280407,2.0
655.7589877280407,0.0
678.8671431853436,0.0
678.8671431853436,1.0
700.2502730092965,1.0
700.2502730092965,0.0
722.8605317662004,0.0
722.8605317662004,2.0
745.7937190309167,2.0
745.7937190309167,0.0
765.7937190309167,0.0
765.7937190309167,4.0
785.7937190309167,4.0
785.7937190309167,0.0
805.7937190309167,0.0
805.7937190309167,4.0
827.8593275393359,4.0
827.8593275393359,9.0
847.8593275393359,9.0
847.8593275393359,1.0
867.8593275393359,1.0
867.8593275393359,0.0
889.6318829571828,0.0
889.6318829571828,1.0
910.7924384542275,1.0
910.7924384542275,0.0
931.6179749567527,0.0
931.6179749567527,2.0
954.3905840464868,2.0
954.3905840464868,0.0
974.3905840464868,0.0
974.3905840464868,2.0
994.3905840464868,2.0
994.3905840464868,0.0
1018.4702397161163,0.0
1018.4702397161163,4.0
1038.4702397161163,4.0
1038.4702397161163,0.0
1062.1043684869073,0.0
1062.1043684869073,1.0
1082.1043684869073,1.0
1082.1043684869073,0.0
1102.343970471993,0.0
1102.343970471993,1.0
1123.267409518594,1.0
1123.267409518594,0.0
1146.1947918508667,0.0
1146.1947918508667,2.0
1170.836175470613,2.0
1170.836175470613,9.0
1192.9215821542311,9.0
1192.9215821542311,4.0
1215.2167944272514,4.0
1215.2167944272514,0.0
1235.2167944272514,0.0
1235.2167944272514,1.0
1255.8316060923971,1.0
1255.8316060923971,0.0
1280.4214480961673,0.0
1280.4214480961673,2.0
1305.332319951849,2.0
1305.332319951849,0.0
1327.439783491427,0.0
1327.439783491427,2.0
1349.9833354214206,2.0
1349.9833354214206,0.0
1372.83259745338,0.0
1372.83259745338,1.0
1392.83259745338,1.0
1392.83259745338,0.0
1417.565944606904,0.0
1417.565944606904,4.0
1441.314779695822,4.0
1441.314779695822,0.0
1464.5290189911611,0.0
1464.5290189911611,4.0
1484.5290189911611,4.0
1484.5290189911611,9.0
1508.5186649195384,9.0
1508.5186649195384,2.0
1528.5186649195384,2.0
1528.5186649195384,0.0
1548.5186649195384,0.0
1548.5186649195384,2.0
1570.1241721236147,2.0
1570.1241721236147,0.0
1590.1241721236147,0.0
1590.1241721236147,2.0
1610.5820006981958,2.0
1610.5820006981958,0.0
1630.5820006981958,0.0
1630.5820006981958,2.0
1655.499308386352,2.0
1655.499308386352,0.0
1675.499308386352,0.0
1675.499308386352,4.0
1696.8381543946452,4.0
1696.8381543946452,9.0
1716.8381543946452,9.0
1716.8381543946452,2.0
1737.0009432686493,2.0
1737.0009432686493,0.0
1758.8970916927792,0.0
1758.8970916927792,1.0
1779.5829575345851,1.0
1779.5829575345851,0.0
1803.3194643759634,0.0
1803.3194643759634,1.0
1827.2555075807031,1.0
1827.2555075807031,0.0
1847.2555075807031,0.0
1847.2555075807031,4.0
1871.774728121236,4.0
1871.774728121236,0.0
1892.3203180369455,0.0
1892.3203180369455,1.0
1913.7227999151219,1.0
1913.7227999151219,9.0
1933.7227999151219,9.0
1933.7227999151219,4.0
1956.6048619290814,4.0
1956.6048619290814,0.0
1977.708357006777,0.0
1977.708357006777,1.0
1999.2181988281664,1.0
1999.2181988281664,0.0
2019.2181988281664,0.0
2019.2181988281664,2.0
2039.2181988281664,2.0
2039.2181988281664,0.0
2063.17580123432,0.0
2063.17580123432,2.0
2083.17580123432,2.0
2083.17580123432,0.0
2105.0849711708724,0.0
2105.0849711708724,1.0
2126.7616888531484,1.0
2126.7616888531484,0.0
2148.4064437949564,0.0
2148.4064437949564,4.0
2168.4064437949564,4.0
2168.4064437949564,9.0
2189.652302181348,9.0
2189.652302181348,2.0
2210.7713649305515,2.0
2210.7713649305515,9.0
2233.634933513822,9.0
2233.634933513822,1.0
2253.634933513822,1.0
2253.634933513822,0.0
2275.2537546586245,0.0
2275.2537546586245,1.0
2295.2845456136856,1.0
2295.2845456136856,0.0
2315.2845456136856,0.0
2315.2845456136856,4.0
2335.2845456136856,4.0
2335.2845456136856,0.0
2355.2845456136856,0.0
2355.2845456136856,1.0
2375.2845456136856,1.0
2375.2845456136856,0.0
2395.2845456136856,0.0
2395.2845456136856,1.0
2415.8129467826802,1.0
2415.8129467826802,0.0
2437.0728054607753,0.0
2437.0728054607753,2.0
2459.421209662687,2.0
2459.421209662687,0.0
2480.717509938404,0.0
2480.717509938404,4.0
2503.9937444520183,4.0
2503.9937444520183,9.0
2527.0036721252836,9.0
2527.0036721252836,1.0
2547.0036721252836,1.0
2547.0036721252836,0.0
2567.4363834015094,0.0
2567.4363834015094,2.0
2589.9295626604,2.0
2589.9295626604,0.0
2609.9295626604,0.0
2609.9295626604,2.0
2629.9295626604,2.0
2629.9295626604,0.0
2652.5561152398586,0.0
2652.5561152398586,4.0
2676.2329242622945,4.0
2676.2329242622945,0.0
2696.2329242622945,0.0
2696.2329242622945,4.0
2720.127362057101,4.0
2720.127362057101,0.0
2742.5460442865733,0.0
2742.5460442865733,1.0
2766.7745379486587,1.0
2766.7745379486587,9.0
2789.9979551963042,9.0
2789.9979551963042,1.0
2813.9331412583124,1.0
2813.9331412583124,9.0
2837.085238400614,9.0
2837.085238400614,2.0
2857.329788218485,2.0
2857.329788218485,0.0
2877.329788218485,0.0
2877.329788218485,4.0
2902.206432726234,4.0
2902.206432726234,0.0
2924.4805593101773,0.0
2924.4805593101773,1.0
2944.4805593101773,1.0
2944.4805593101773,0.0
2964.4805593101773,0.0
2964.4805593101773,1.0
2984.4805593101773,1.0
2984.4805593101773,0.0
3005.323713616235,0.0
3005.323713616235,2.0
3025.323713616235,2.0
3025.323713616235,0.0
3045.323713616235,0.0
3045.323713616235,2.0
3065.323713616235,2.0
3065.323713616235,0.0
3085.323713616235,0.0
3085.323713616235,2.0
3105.323713616235,2.0
3105.323713616235,0.0
3125.323713616235,0.0
3125.323713616235,2.0
3145.323713616235,2.0
3145.323713616235,0.0
3167.3324270150624,0.0
3167.3324270150624,2.0
3187.9129089519847,2.0
3187.9129089519847,0.0
3207.9129089519847,0.0
3207.9129089519847,1.0
3230.2847195393406,1.0
3230.2847195393406,0.0
3250.2847195393406,0.0
3250.2847195393406,4.0
3270.502414460061,4.0
3270.502414460061,0.0
3293.5211843030993,0.0
3293.5211843030993,2.0
3315.4741697537247,2.0
3315.4741697537247,0.0
3340.3058768296614,0.0
3340.3058768296614,1.0
3360.3058768296614,1.0
3360.3058768296614,9.0
3380.3058768296614,9.0
3380.3058768296614,2.0
3402.0654604467563,2.0
3402.0654604467563,0.0
3426.032612901181,0.0
3426.032612901181,2.0
3448.4392559563275,2.0
3448.4392559563275,9.0
3468.4392559563275,9.0
3468.4392559563275,4.0
3489.1510682890657,4.0
3489.1510682890657,0.0
3511.804488772759,0.0
3511.804488772759,2.0
3531.804488772759,2.0
3531.804488772759,0.0
3551.804488772759,0.0
3551.804488772759,2.0
3576.091329365736,2.0
3576.091329365736,0.0
3597.703576082131,0.0
3597.703576082131,2.0
3621.3266040268354,2.0
3621.3266040268354,0.0
3642.426705401158,0.0
3642.426705401158,1.0
3662.58602818707,1.0
3662.58602818707,9.0
3682.58602818707,9.0
3682.58602818707,2.0
3703.6768177710474,2.0
3703.6768177710474,0.0
3724.585333939176,0.0
3724.585333939176,2.0
3748.887239348842,2.0
3748.887239348842,0.0
3773.7941923795734,0.0
3773.7941923795734,4.0
3794.6067469695117,4.0
3794.6067469695117,0.0
3814.6067469695117,0.0
3814.6067469695117,4.0
3835.9258170297835,4.0
3835.9258170297835,0.0
3858.3565313357394,0.0
3858.3565313357394,2.0
3882.95339475153,2.0
3882.95339475153,0.0
3907.358251445694,0.0
3907.358251445694,2.0
3927.358251445694,2.0
3927.358251445694,0.0
3950.8996738656424,0.0
3950.8996738656424,2.0
3975.873808559263,2.0
3975.873808559263,0.0
3995.873808559263,0.0
3995.873808559263,2.0
4015.873808559263,2.0
4015.873808559263,9.0
4040.0872221949976,9.0
4040.0872221949976,2.0
4061.560561324004,2.0
4061.560561324004,0.0
4085.1782081415877,0.0
4085.1782081415877,2.0
4109.818093521753,2.0
4109.818093521753,0.0
4133.1672764220275,0.0
4133.1672764220275,2.0
4154.568411784712,2.0
4154.568411784712,0.0
4174.568411784712,0.0
4174.568411784712,4.0
4195.692247431725,4.0
4195.692247431725,0.0
4219.088602184784,0.0
4219.088602184784,1.0
4243.443925309693,1.0
4243.443925309693,0.0
4264.837578483857,0.0
4264.837578483857,2.0
4284.837578483857,2.0
4284.837578483857,0.0
4308.744586355751,0.0
4308.744586355751,4.0
4328.744586355751,4.0
4328.744586355751,9.0
4348.744586355751,9.0
4348.744586355751,2.0
4371.196211199276,2.0
4371.196211199276,0.0
4391.196211199276,0.0
4391.196211199276,1.0
4412.742776226951,1.0
4412.742776226951,9.0
4434.023094252916,9.0
4434.023094252916,4.0
4456.888055856107,4.0
4456.888055856107,0.0
4478.418125911849,0.0
4478.418125911849,2.0
4501.424215364968,2.0
4501.424215364968,0.0
4521.819241610356,0.0
4521.819241610356,4.0
4541.819241610356,4.0
4541.819241610356,0.0
4562.568944278173,0.0
4562.568944278173,2.0
4583.48151757149,2.0
4583.48151757149,0.0
4607.587298786966,0.0
4607.587298786966,1.0
4627.587298786966,1.0
4627.587298786966,0.0
4647.587298786966,0.0
4647.587298786966,2.0
4672.074429386994,2.0
4672.074429386994,0.0
4692.074429386994,0.0
4692.074429386994,2.0
4715.721883598017,2.0
4715.721883598017,0.0
4739.081568408292,0.0
4739.081568408292,4.0
4759.081568408292,4.0
4759.081568408292,0.0
4779.081568408292,0.0
4779.081568408292,2.0
4800.640486407792,2.0
4800.640486407792,9.0
4822.164943852695,9.0
4822.164943852695,2.0
4844.603923452087,2.0
4844.603923452087,9.0
4868.662895919988,9.0
4868.662895919988,4.0
4888.662895919988,4.0
4888.662895919988,9.0
4908.662895919988,9.0
4908.662895919988,2.0
4931.082083039219,2.0
4931.082083039219,0.0
4954.502504917327,0.0
4954.502504917327,1.0
4977.864140772726,1.0
4977.864140772726,9.0
4997.864140772726,9.0
4997.864140772726,2.0
5000.0,2.0
					</series>
					<series title="res_approx" type="l" color="0x00ffff" encoding="csv">0.0,0.0
24.955735889961943,0.0
24.955735889961943,2.0
49.804746258305386,2.0
49.804746258305386,0.0
69.80474625830539,0.0
69.80474625830539,4.0
90.83607498789206,4.0
90.83607498789206,0.0
113.40576982242055,0.0
113.40576982242055,4.0
133.93709291354753,4.0
133.93709291354753,0.0
153.93709291354753,0.0
153.93709291354753,1.0
178.53568757884204,1.0
178.53568757884204,0.0
202.36517768818885,0.0
202.36517768818885,4.0
222.36517768818885,4.0
222.36517768818885,7.0
246.4653361577075,7.0
246.4653361577075,1.0
267.6896437606774,1.0
267.6896437606774,0.0
287.6896437606774,0.0
287.6896437606774,2.0
308.5201019246597,2.0
308.5201019246597,0.0
329.0143022185657,0.0
329.0143022185657,2.0
349.0143022185657,2.0
349.0143022185657,0.0
369.32870545308106,0.0
369.32870545308106,1.0
393.59368845354766,1.0
393.59368845354766,7.0
413.59368845354766,7.0
413.59368845354766,2.0
433.59368845354766,2.0
433.59368845354766,0.0
456.81181599386036,0.0
456.81181599386036,2.0
476.81181599386036,2.0
476.81181599386036,0.0
498.89125441084616,0.0
498.89125441084616,2.0
523.5265498457011,2.0
523.5265498457011,7.0
545.3864186198916,7.0
545.3864186198916,1.0
569.3172864464577,1.0
569.3172864464577,7.0
593.7268575269263,7.0
593.7268575269263,2.0
614.4897464883979,2.0
614.4897464883979,0.0
635.7589877280407,0.0
635.7589877280407,2.0
655.7589877280407,2.0
655.7589877280407,0.0
678.8671431853436,0.0
678.8671431853436,1.0
700.2502730092965,1.0
700.2502730092965,0.0
722.8605317662004,0.0
722.8605317662004,2.0
745.7937190309167,2.0
745.7937190309167,0.0
765.7937190309167,0.0
765.7937190309167,4.0
785.7937190309167,4.0
785.7937190309167,0.0
805.7937190309167,0.0
805.7937190309167,4.0
827.8593275393359,4.0
827.8593275393359,7.0
847.8593275393359,7.0
847.8593275393359,1.0
867.8593275393359,1.0
867.8593275393359,0.0
889.6318829571828,0.0
889.6318829571828,1.0
910.7924384542275,1.0
910.7924384542275,0.0
931.6179749567527,0.0
931.6179749567527,2.0
954.3905840464868,2.0
954.3905840464868,0.0
974.3905840464868,0.0
974.3905840464868,2.0
994.3905840464868,2.0
994.3905840464868,0.0
1018.4702397161163,0.0
1018.4702397161163,4.0
1038.4702397161163,4.0
1038.4702397161163,0.0
1062.1043684869073,0.0
1062.1043684869073,1.0
1082.1043684869073,1.0
1082.1043684869073,0.0
1102.343970471993,0.0
1102.343970471993,1.0
1123.267409518594,1.0
1123.267409518594,0.0
1146.1947918508667,0.0
1146.1947918508667,2.0
1170.836175470613,2.0
1170.836175470613,7.0
1192.9215821542311,7.0
1192.9215821542311,4.0
1215.2167944272514,4.0
1215.2167944272514,0.0
1235.2167944272514,0.0
1235.2167944272514,1.0
1255.8316060923971,1.0
1255.8316060923971,0.0
1280.4214480961673,0.0
1280.4214480961673,2.0
1305.332319951849,2.0
1305.332319951849,0.0
1327.439783491427,0.0
1327.439783491427,2.0
1349.9833354214206,2.0
1349.9833354214206,0.0
1372.83259745338,0.0
1372.83259745338,1.0
1392.83259745338,1.0
1392.83259745338,0.0
1417.565944606904,0.0
1417.565944606904,4.0
1441.314779695822,4.0
1441.314779695822,0.0
1464.5290189911611,0.0
1464.5290189911611,4.0
1484.5290189911611,4.0
1484.5290189911611,7.0
1508.5186649195384,7.0
1508.5186649195384,2.0
1528.5186649195384,2.0
1528.5186649195384,0.0
1548.5186649195384,0.0
1548.5186649195384,2.0
1570.1241721236147,2.0
1570.1241721236147,0.0
1590.1241721236147,0.0
1590.1241721236147,2.0
1610.5820006981958,2.0
1610.5820006981958,0.0
1630.5820006981958,0.0
1630.5820006981958,2.0
1655.499308386352,2.0
1655.499308386352,0.0
1675.499308386352,0.0
1675.499308386352,4.0
1696.8381543946452,4.0
1696.8381543946452,7.0
1716.8381543946452,7.0
1716.8381543946452,2.0
1737.0009432686493,2.0
1737.0009432686493,0.0
1758.8970916927792,0.0
1758.8970916927792,1.0
1779.5829575345851,1.0
1779.5829575345851,0.0
1803.3194643759634,0.0
1803.3194643759634,1.0
1827.2555075807031,1.0
1827.2555075807031,0.0
1847.2555075807031,0.0
1847.2555075807031,4.0
1871.774728121236,4.0
1871.774728121236,0.0
1892.3203180369455,0.0
1892.3203180369455,1.0
1913.7227999151219,1.0
1913.7227999151219,7.0
1933.7227999151219,7.0
1933.7227999151219,4.0
1956.6048619290814,4.0
1956.6048619290814,0.0
1977.708357006777,0.0
1977.708357006777,1.0
1999.2181988281664,1.0
1999.2181988281664,0.0
2019.2181988281664,0.0
2019.2181988281664,2.0
2039.2181988281664,2.0
2039.2181988281664,0.0
2063.17580123432,0.0
2063.17580123432,2.0
2083.17580123432,2.0
2083.17580123432,0.0
2105.0849711708724,0.0
2105.0849711708724,1.0
2126.7616888531484,1.0
2126.7616888531484,0.0
2148.4064437949564,0.0
2148.4064437949564,4.0
2168.4064437949564,4.0
2168.4064437949564,7.0
2189.652302181348,7.0
2189.652302181348,2.0
2210.7713649305515,2.0
2210.7713649305515,7.0
2233.634933513822,7.0
2233.634933513822,1.0
2253.634933513822,1.0
2253.634933513822,0.0
2275.2537546586245,0.0
2275.2537546586245,1.0
2295.2845456136856,1.0
2295.2845456136856,0.0
2315.2845456136856,0.0
2315.2845456136856,4.0
2335.2845456136856,4.0
2335.2845456136856,0.0
2355.2845456136856,0.0
2355.2845456136856,1.0
2375.2845456136856,1.0
2375.2845456136856,0.0
2395.2845456136856,0.0
2395.2845456136856,1.0
2415.8129467826802,1.0
2415.8129467826802,0.0
2437.0728054607753,0.0
2437.0728054607753,2.0
2459.421209662687,2.0
2459.421209662687,0.0
2480.717509938404,0.0
2480.717509938404,4.0
2503.9937444520183,4.0
2503.9937444520183,7.0
2527.0036721252836,7.0
2527.0036721252836,1.0
2547.0036721252836,1.0
2547.0036721252836,0.0
2567.4363834015094,0.0
2567.4363834015094,2.0
2589.9295626604,2.0
2589.9295626604,0.0
2609.9295626604,0.0
2609.9295626604,2.0
2629.9295626604,2.0
2629.9295626604,0.0
2652.5561152398586,0.0
2652.5561152398586,4.0
2676.2329242622945,4.0
2676.2329242622945,0.0
2696.2329242622945,0.0
2696.2329242622945,4.0
2720.127362057101,4.0
2720.127362057101,0.0
2742.5460442865733,0.0
2742.5460442865733,1.0
2766.7745379486587,1.0
2766.7745379486587,7.0
2789.9979551963042,7.0
2789.9979551963042,1.0
2813.9331412583124,1.0
2813.9331412583124,7.0
2837.085238400614,7.0
2837.085238400614,2.0
2857.329788218485,2.0
2857.329788218485,0.0
2877.329788218485,0.0
2877.329788218485,4.0
2902.206432726234,4.0
2902.206432726234,0.0
2924.4805593101773,0.0
2924.4805593101773,1.0
2944.4805593101773,1.0
2944.4805593101773,0.0
2964.4805593101773,0.0
2964.4805593101773,1.0
2984.4805593101773,1.0
2984.4805593101773,0.0
3005.323713616235,0.0
3005.323713616235,2.0
3025.323713616235,2.0
3025.323713616235,0.0
3045.323713616235,0.0
3045.323713616235,2.0
3065.323713616235,2.0
3065.323713616235,0.0
3085.323713616235,0.0
3085.323713616235,2.0
3105.323713616235,2.0
3105.323713616235,0.0
3125.323713616235,0.0
3125.323713616235,2.0
3145.323713616235,2.0
3145.323713616235,0.0
3167.3324270150624,0.0
3167.3324270150624,2.0
3187.9129089519847,2.0
3187.9129089519847,0.0
3207.9129089519847,0.0
3207.9129089519847,1.0
3230.2847195393406,1.0
3230.2847195393406,0.0
3250.2847195393406,0.0
3250.2847195393406,4.0
3270.502414460061,4.0
3270.502414460061,0.0
3293.5211843030993,0.0
3293.5211843030993,2.0
3315.4741697537247,2.0
3315.4741697537247,0.0
3340.3058768296614,0.0
3340.3058768296614,1.0
3360.3058768296614,1.0
3360.3058768296614,7.0
3380.3058768296614,7.0
3380.3058768296614,2.0
3402.0654604467563,2.0
3402.0654604467563,0.0
3426.032612901181,0.0
3426.032612901181,2.0
3448.4392559563275,2.0
3448.4392559563275,7.0
3468.4392559563275,7.0
3468.4392559563275,4.0
3489.1510682890657,4.0
3489.1510682890657,0.0
3511.804488772759,0.0
3511.804488772759,2.0
3531.804488772759,2.0
3531.804488772759,0.0
3551.804488772759,0.0
3551.804488772759,2.0
3576.091329365736,2.0
3576.091329365736,0.0
3597.703576082131,0.0
3597.703576082131,2.0
3621.3266040268354,2.0
3621.3266040268354,0.0
3642.426705401158,0.0
3642.426705401158,1.0
3662.58602818707,1.0
3662.58602818707,7.0
3682.58602818707,7.0
3682.58602818707,2.0
3703.6768177710474,2.0
3703.6768177710474,0.0
3724.585333939176,0.0
3724.585333939176,2.0
3748.887239348842,2.0
3748.887239348842,0.0
3773.7941923795734,0.0
3773.7941923795734,4.0
3794.6067469695117,4.0
3794.6067469695117,0.0
3814.6067469695117,0.0
3814.6067469695117,4.0
3835.9258170297835,4.0
3835.9258170297835,0.0
3858.3565313357394,0.0
3858.3565313357394,2.0
3882.95339475153,2.0
3882.95339475153,0.0
3907.358251445694,0.0
3907.358251445694,2.0
3927.358251445694,2.0
3927.358251445694,0.0
3950.8996738656424,0.0
3950.8996738656424,2.0
3975.873808559263,2.0
3975.873808559263,0.0
3995.873808559263,0.0
3995.873808559263,2.0
4015.873808559263,2.0
4015.873808559263,7.0
4040.0872221949976,7.0
4040.0872221949976,2.0
4061.560561324004,2.0
4061.560561324004,0.0
4085.1782081415877,0.0
4085.1782081415877,2.0
4109.818093521753,2.0
4109.818093521753,0.0
4133.1672764220275,0.0
4133.1672764220275,2.0
4154.568411784712,2.0
4154.568411784712,0.0
4174.568411784712,0.0
4174.568411784712,4.0
4195.692247431725,4.0
4195.692247431725,0.0
4219.088602184784,0.0
4219.088602184784,1.0
4243.443925309693,1.0
4243.443925309693,0.0
4264.837578483857,0.0
4264.837578483857,2.0
4284.837578483857,2.0
4284.837578483857,0.0
4308.744586355751,0.0
4308.744586355751,4.0
4328.744586355751,4.0
4328.744586355751,7.0
4348.744586355751,7.0
4348.744586355751,2.0
4371.196211199276,2.0
4371.196211199276,0.0
4391.196211199276,0.0
4391.196211199276,1.0
4412.742776226951,1.0
4412.742776226951,7.0
4434.023094252916,7.0
4434.023094252916,4.0
4456.888055856107,4.0
4456.888055856107,0.0
4478.418125911849,0.0
4478.418125911849,2.0
4501.424215364968,2.0
4501.424215364968,0.0
4521.819241610356,0.0
4521.819241610356,4.0
4541.819241610356,4.0
4541.819241610356,0.0
4562.568944278173,0.0
4562.568944278173,2.0
4583.48151757149,2.0
4583.48151757149,0.0
4607.587298786966,0.0
4607.587298786966,1.0
4627.587298786966,1.0
4627.587298786966,0.0
4647.587298786966,0.0
4647.587298786966,2.0
4672.074429386994,2.0
4672.074429386994,0.0
4692.074429386994,0.0
4692.074429386994,2.0
4715.721883598017,2.0
4715.721883598017,0.0
4739.081568408292,0.0
4739.081568408292,4.0
4759.081568408292,4.0
4759.081568408292,0.0
4779.081568408292,0.0
4779.081568408292,2.0
4800.640486407792,2.0
4800.640486407792,7.0
4822.164943852695,7.0
4822.164943852695,2.0
4844.603923452087,2.0
4844.603923452087,7.0
4868.662895919988,7.0
4868.662895919988,4.0
4888.662895919988,4.0
4888.662895919988,7.0
4908.662895919988,7.0
4908.662895919988,2.0
4931.082083039219,2.0
4931.082083039219,0.0
4954.502504917327,0.0
4954.502504917327,1.0
4977.864140772726,1.0
4977.864140772726,7.0
4997.864140772726,7.0
4997.864140772726,2.0
5000.0,2.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
		<query>
			<formula>simulate[&lt;=5000;1] {dif_count, res_count}</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-12 17:44:59 +0100">
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="dif_count" type="l" color="0xff0000" encoding="csv">0.0,0.0
40.0,0.0
40.0,1.0
171.96463375352323,1.0
171.96463375352323,2.0
571.9476451841183,2.0
571.9476451841183,3.0
616.9468984263949,3.0
616.9468984263949,4.0
749.0627041424159,4.0
749.0627041424159,5.0
876.6572075488511,5.0
876.6572075488511,6.0
1006.0147177707404,6.0
1006.0147177707404,7.0
1047.0259281946346,7.0
1047.0259281946346,8.0
1092.5003366789315,8.0
1092.5003366789315,9.0
1185.1271495723631,9.0
1185.1271495723631,10.0
1225.1271495723631,10.0
1225.1271495723631,11.0
1359.1165792918764,11.0
1359.1165792918764,12.0
1449.0372083394323,12.0
1449.0372083394323,13.0
1578.6440067458898,13.0
1578.6440067458898,14.0
1889.9355727259535,14.0
1889.9355727259535,15.0
1934.1262730699964,15.0
1934.1262730699964,16.0
2152.597341411747,16.0
2152.597341411747,17.0
2673.199102024082,17.0
2673.199102024082,18.0
2930.756585713243,18.0
2930.756585713243,19.0
2972.8587979322765,19.0
2972.8587979322765,20.0
3640.6583644635975,20.0
3640.6583644635975,21.0
4065.6882702710573,21.0
4065.6882702710573,22.0
4194.320175679168,22.0
4194.320175679168,23.0
4414.989244444296,23.0
4414.989244444296,24.0
4768.5124885931145,24.0
4768.5124885931145,25.0
4854.8324819945265,25.0
4854.8324819945265,26.0
5000.0,26.0
					</series>
					<series title="res_count" type="l" color="0x00ffff" encoding="csv">0.0,0.0
20.0,0.0
20.0,1.0
40.0,1.0
40.0,2.0
61.413620301755145,2.0
61.413620301755145,3.0
83.64825429511257,3.0
83.64825429511257,4.0
107.82577873091213,4.0
107.82577873091213,5.0
128.24182431329973,5.0
128.24182431329973,6.0
148.24182431329973,6.0
148.24182431329973,7.0
171.96463375352323,7.0
171.96463375352323,8.0
191.96463375352323,8.0
191.96463375352323,9.0
216.74469928140752,9.0
216.74469928140752,10.0
241.3090750540141,10.0
241.3090750540141,11.0
261.36129078106023,11.0
261.36129078106023,12.0
281.36129078106023,12.0
281.36129078106023,13.0
303.36978000588715,13.0
303.36978000588715,14.0
326.8456877581775,14.0
326.8456877581775,15.0
346.8456877581775,15.0
346.8456877581775,16.0
368.26938830898143,16.0
368.26938830898143,17.0
393.09952096431516,17.0
393.09952096431516,18.0
416.13164016394876,18.0
416.13164016394876,19.0
436.6198113723658,19.0
436.6198113723658,20.0
458.21697511011735,20.0
458.21697511011735,21.0
480.8817882835865,21.0
480.8817882835865,22.0
500.8817882835865,22.0
500.8817882835865,23.0
525.2991936448961,23.0
525.2991936448961,24.0
548.9870724349748,24.0
548.9870724349748,25.0
571.9476451841183,25.0
571.9476451841183,26.0
594.7904011770152,26.0
594.7904011770152,27.0
616.9468984263949,27.0
616.9468984263949,28.0
638.5404551343527,28.0
638.5404551343527,29.0
659.8190020420589,29.0
659.8190020420589,30.0
684.6127154876012,30.0
684.6127154876012,31.0
706.3980241096579,31.0
706.3980241096579,32.0
726.4316008845344,32.0
726.4316008845344,33.0
749.0627041424159,33.0
749.0627041424159,34.0
769.0627041424159,34.0
769.0627041424159,35.0
790.5495661706664,35.0
790.5495661706664,36.0
814.7397765901405,36.0
814.7397765901405,37.0
836.6572075488511,37.0
836.6572075488511,38.0
856.6572075488511,38.0
856.6572075488511,39.0
876.6572075488511,39.0
876.6572075488511,40.0
896.6572075488511,40.0
896.6572075488511,41.0
920.2636804792564,41.0
920.2636804792564,42.0
941.1091712245252,42.0
941.1091712245252,43.0
961.1091712245252,43.0
961.1091712245252,44.0
982.3983647511341,44.0
982.3983647511341,45.0
1006.0147177707404,45.0
1006.0147177707404,46.0
1027.0259281946346,46.0
1027.0259281946346,47.0
1047.0259281946346,47.0
1047.0259281946346,48.0
1068.3253554964904,48.0
1068.3253554964904,49.0
1092.5003366789315,49.0
1092.5003366789315,50.0
1117.1345199237112,50.0
1117.1345199237112,51.0
1141.5422407584265,51.0
1141.5422407584265,52.0
1165.1271495723631,52.0
1165.1271495723631,53.0
1185.1271495723631,53.0
1185.1271495723631,54.0
1205.1271495723631,54.0
1205.1271495723631,55.0
1225.1271495723631,55.0
1225.1271495723631,56.0
1245.1271495723631,56.0
1245.1271495723631,57.0
1268.201790440362,57.0
1268.201790440362,58.0
1290.8583587012254,58.0
1290.8583587012254,59.0
1313.9686510618776,59.0
1313.9686510618776,60.0
1335.3667121194303,60.0
1335.3667121194303,61.0
1359.1165792918764,61.0
1359.1165792918764,62.0
1380.8506492502056,62.0
1380.8506492502056,63.0
1404.0416734328028,63.0
1404.0416734328028,64.0
1426.7378743144218,64.0
1426.7378743144218,65.0
1449.0372083394323,65.0
1449.0372083394323,66.0
1469.4445143593475,66.0
1469.4445143593475,67.0
1494.320373821538,67.0
1494.320373821538,68.0
1516.0882165667135,68.0
1516.0882165667135,69.0
1536.0882165667135,69.0
1536.0882165667135,70.0
1557.6816072827205,70.0
1557.6816072827205,71.0
1578.6440067458898,71.0
1578.6440067458898,72.0
1603.1216012162622,72.0
1603.1216012162622,73.0
1623.1216012162622,73.0
1623.1216012162622,74.0
1643.1216012162622,74.0
1643.1216012162622,75.0
1667.4664037441835,75.0
1667.4664037441835,76.0
1687.4664037441835,76.0
1687.4664037441835,77.0
1708.203516745707,77.0
1708.203516745707,78.0
1731.0102294350509,78.0
1731.0102294350509,79.0
1755.009412810905,79.0
1755.009412810905,80.0
1779.69961021794,80.0
1779.69961021794,81.0
1803.0590013682377,81.0
1803.0590013682377,82.0
1825.9695627447218,82.0
1825.9695627447218,83.0
1845.9695627447218,83.0
1845.9695627447218,84.0
1867.1015935973264,84.0
1867.1015935973264,85.0
1889.9355727259535,85.0
1889.9355727259535,86.0
1910.125328603899,86.0
1910.125328603899,87.0
1934.1262730699964,87.0
1934.1262730699964,88.0
1956.9738173566293,88.0
1956.9738173566293,89.0
1979.5238330191933,89.0
1979.5238330191933,90.0
2002.332831271924,90.0
2002.332831271924,91.0
2026.9091711367946,91.0
2026.9091711367946,92.0
2048.2935416698456,92.0
2048.2935416698456,93.0
2068.2935416698456,93.0
2068.2935416698456,94.0
2091.221260506427,94.0
2091.221260506427,95.0
2111.351529478561,95.0
2111.351529478561,96.0
2132.1898357977625,96.0
2132.1898357977625,97.0
2152.597341411747,97.0
2152.597341411747,98.0
2172.597341411747,98.0
2172.597341411747,99.0
2192.597341411747,99.0
2192.597341411747,100.0
2215.12573126005,100.0
2215.12573126005,101.0
2238.680083854124,101.0
2238.680083854124,102.0
2263.261312695686,102.0
2263.261312695686,103.0
2285.633812075248,103.0
2285.633812075248,104.0
2305.633812075248,104.0
2305.633812075248,105.0
2327.8280390729196,105.0
2327.8280390729196,106.0
2349.4689751253463,106.0
2349.4689751253463,107.0
2370.6365882768296,107.0
2370.6365882768296,108.0
2390.6365882768296,108.0
2390.6365882768296,109.0
2410.6365882768296,109.0
2410.6365882768296,110.0
2430.6365882768296,110.0
2430.6365882768296,111.0
2454.6580716012977,111.0
2454.6580716012977,112.0
2475.109460183885,112.0
2475.109460183885,113.0
2498.9401733886916,113.0
2498.9401733886916,114.0
2518.9401733886916,114.0
2518.9401733886916,115.0
2538.9401733886916,115.0
2538.9401733886916,116.0
2558.9401733886916,116.0
2558.9401733886916,117.0
2583.5039203066844,117.0
2583.5039203066844,118.0
2603.5039203066844,118.0
2603.5039203066844,119.0
2625.619742529234,119.0
2625.619742529234,120.0
2649.625543570146,120.0
2649.625543570146,121.0
2673.199102024082,121.0
2673.199102024082,122.0
2693.199102024082,122.0
2693.199102024082,123.0
2717.748303633416,123.0
2717.748303633416,124.0
2738.314166391501,124.0
2738.314166391501,125.0
2763.0328942276537,125.0
2763.0328942276537,126.0
2785.251917160349,126.0
2785.251917160349,127.0
2805.4508950200398,127.0
2805.4508950200398,128.0
2825.481315945508,128.0
2825.481315945508,129.0
2845.481315945508,129.0
2845.481315945508,130.0
2865.481315945508,130.0
2865.481315945508,131.0
2887.7767915208824,131.0
2887.7767915208824,132.0
2907.8486396861263,132.0
2907.8486396861263,133.0
2930.756585713243,133.0
2930.756585713243,134.0
2952.8587979322765,134.0
2952.8587979322765,135.0
2972.8587979322765,135.0
2972.8587979322765,136.0
2996.2115368212108,136.0
2996.2115368212108,137.0
3018.538808042649,137.0
3018.538808042649,138.0
3043.453627936542,138.0
3043.453627936542,139.0
3067.9142591147684,139.0
3067.9142591147684,140.0
3092.780964670237,140.0
3092.780964670237,141.0
3112.780964670237,141.0
3112.780964670237,142.0
3135.2527358639054,142.0
3135.2527358639054,143.0
3158.4585415082984,143.0
3158.4585415082984,144.0
3178.4585415082984,144.0
3178.4585415082984,145.0
3198.4585415082984,145.0
3198.4585415082984,146.0
3220.1034214359242,146.0
3220.1034214359242,147.0
3242.0924338547047,147.0
3242.0924338547047,148.0
3263.90046072891,148.0
3263.90046072891,149.0
3286.880761262728,149.0
3286.880761262728,150.0
3308.917247641366,150.0
3308.917247641366,151.0
3331.9666050723754,151.0
3331.9666050723754,152.0
3355.652079147985,152.0
3355.652079147985,153.0
3376.9009371171705,153.0
3376.9009371171705,154.0
3400.5361979431473,154.0
3400.5361979431473,155.0
3423.27448709053,155.0
3423.27448709053,156.0
3443.27448709053,156.0
3443.27448709053,157.0
3463.27448709053,157.0
3463.27448709053,158.0
3483.4812962368596,158.0
3483.4812962368596,159.0
3508.4657128271647,159.0
3508.4657128271647,160.0
3531.029037091648,160.0
3531.029037091648,161.0
3553.393751316471,161.0
3553.393751316471,162.0
3576.4334121812135,162.0
3576.4334121812135,163.0
3596.4529743639287,163.0
3596.4529743639287,164.0
3620.6583644635975,164.0
3620.6583644635975,165.0
3640.6583644635975,165.0
3640.6583644635975,166.0
3660.6583644635975,166.0
3660.6583644635975,167.0
3682.448443529429,167.0
3682.448443529429,168.0
3702.448443529429,168.0
3702.448443529429,169.0
3723.019119076198,169.0
3723.019119076198,170.0
3746.7630035150796,170.0
3746.7630035150796,171.0
3766.7630035150796,171.0
3766.7630035150796,172.0
3787.924378674943,172.0
3787.924378674943,173.0
3811.260836260626,173.0
3811.260836260626,174.0
3833.202329543419,174.0
3833.202329543419,175.0
3853.202329543419,175.0
3853.202329543419,176.0
3876.3811845623422,176.0
3876.3811845623422,177.0
3897.642372272676,177.0
3897.642372272676,178.0
3918.8978012104053,178.0
3918.8978012104053,179.0
3938.8978012104053,179.0
3938.8978012104053,180.0
3959.7799754608423,180.0
3959.7799754608423,181.0
3979.7799754608423,181.0
3979.7799754608423,182.0
3999.7799754608423,182.0
3999.7799754608423,183.0
4022.5954369909596,183.0
4022.5954369909596,184.0
4045.6882702710573,184.0
4045.6882702710573,185.0
4065.6882702710573,185.0
4065.6882702710573,186.0
4085.6882702710573,186.0
4085.6882702710573,187.0
4110.40978786652,187.0
4110.40978786652,188.0
4132.049078864511,188.0
4132.049078864511,189.0
4152.833252993878,189.0
4152.833252993878,190.0
4174.320175679168,190.0
4174.320175679168,191.0
4194.320175679168,191.0
4194.320175679168,192.0
4214.877176692244,192.0
4214.877176692244,193.0
4239.800633257255,193.0
4239.800633257255,194.0
4264.782619853504,194.0
4264.782619853504,195.0
4286.944292220287,195.0
4286.944292220287,196.0
4306.944292220287,196.0
4306.944292220287,197.0
4328.305252469145,197.0
4328.305252469145,198.0
4348.305252469145,198.0
4348.305252469145,199.0
4372.576544829644,199.0
4372.576544829644,200.0
4394.989244444296,200.0
4394.989244444296,201.0
4414.989244444296,201.0
4414.989244444296,202.0
4434.989244444296,202.0
4434.989244444296,203.0
4459.700956239831,203.0
4459.700956239831,204.0
4483.935536986683,204.0
4483.935536986683,205.0
4505.026620199205,205.0
4505.026620199205,206.0
4528.237520918483,206.0
4528.237520918483,207.0
4549.773868566845,207.0
4549.773868566845,208.0
4573.33896487602,208.0
4573.33896487602,209.0
4593.33896487602,209.0
4593.33896487602,210.0
4614.721974028507,210.0
4614.721974028507,211.0
4638.031132832402,211.0
4638.031132832402,212.0
4659.014324967284,212.0
4659.014324967284,213.0
4679.177926884731,213.0
4679.177926884731,214.0
4699.177926884731,214.0
4699.177926884731,215.0
4723.072721728822,215.0
4723.072721728822,216.0
4745.114584150724,216.0
4745.114584150724,217.0
4768.5124885931145,217.0
4768.5124885931145,218.0
4790.868896777974,218.0
4790.868896777974,219.0
4814.8324819945265,219.0
4814.8324819945265,220.0
4834.8324819945265,220.0
4834.8324819945265,221.0
4854.8324819945265,221.0
4854.8324819945265,222.0
4874.8324819945265,222.0
4874.8324819945265,223.0
4896.699099611724,223.0
4896.699099611724,224.0
4916.699099611724,224.0
4916.699099611724,225.0
4936.699099611724,225.0
4936.699099611724,226.0
4958.361606848193,226.0
4958.361606848193,227.0
4982.618307628436,227.0
4982.618307628436,228.0
5000.0,228.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (max:error_prob)</formula>
			<comment>Error Probability</comment>
			<result outcome="success" type="quantity" value="1.76875 ± 0.249424 (95% CI)" timestamp="2024-03-12 17:44:47 +0100">
				<details>1.76875 ± 0.249424 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: error_prob" yaxis="probability density">
					<series title="density" type="b(0.250000)" color="0x0000ff" encoding="csv">1.375,1.9999999999999996
1.625,0.7999999999999998
1.875,0.3999999999999999
2.125,0.7999999999999998
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">1.76875,0.0
1.76875,1.9999999999999996
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.25, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [1.375, 2.375]
Mean estimate of displayed sample: 1.769 ± 0.2494 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: error_prob" yaxis="probability">
					<series title="probability" type="b(0.250000)" color="0x0000ff" encoding="csv">1.375,0.5
1.625,0.2
1.875,0.1
2.125,0.2
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">1.76875,0.0
1.76875,0.5
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.25, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [1.375, 2.375]
Mean estimate of displayed sample: 1.769 ± 0.2494 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: error_prob" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">1.375,0.0
1.625,0.5
1.875,0.7
2.125,0.8
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">1.76875,0.0
1.76875,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.25, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [1.375, 2.375]
Mean estimate of displayed sample: 1.769 ± 0.2494 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: error_prob" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">1.375,0.30849710781876083
1.625,0.8129139715526015
1.875,0.9332604888222655
2.125,0.9747892736731666
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">1.375,0.0
1.625,0.18708602844739852
1.875,0.3475471499400027
2.125,0.44390453769235844
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">1.375,0.0
1.625,0.5
1.875,0.7
2.125,0.8
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">1.76875,0.0
1.76875,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.25, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [1.375, 2.375]
Mean estimate of displayed sample: 1.769 ± 0.2494 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: error_prob" yaxis="count">
					<series title="count" type="b(0.250000)" color="0x0000ff" encoding="csv">1.375,5.0
1.625,2.0
1.875,1.0
2.125,2.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">1.76875,0.0
1.76875,5.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.25, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [1.375, 2.375]
Mean estimate of displayed sample: 1.769 ± 0.2494 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (max:mean_abs_error)</formula>
			<comment>Mean Absolute Error</comment>
			<result outcome="success" type="quantity" value="3.3375 ± 0.266764 (95% CI)" timestamp="2024-03-12 17:44:50 +0100">
				<details>3.3375 ± 0.266764 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: mean_abs_error" yaxis="probability density">
					<series title="density" type="b(0.312500)" color="0x0000ff" encoding="csv">2.625,0.31999999999999995
2.9375,0.9599999999999999
3.25,0.9599999999999999
3.5625,0.9599999999999999
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">3.3375,0.0
3.3375,0.9599999999999997
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.3125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2.625, 3.875]
Mean estimate of displayed sample: 3.337 ± 0.2668 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: mean_abs_error" yaxis="probability">
					<series title="probability" type="b(0.312500)" color="0x0000ff" encoding="csv">2.625,0.1
2.9375,0.3
3.25,0.3
3.5625,0.3
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">3.3375,0.0
3.3375,0.3
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.3125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2.625, 3.875]
Mean estimate of displayed sample: 3.337 ± 0.2668 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: mean_abs_error" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2.625,0.0
2.9375,0.1
3.25,0.4
3.5625,0.7
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">3.3375,0.0
3.3375,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.3125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2.625, 3.875]
Mean estimate of displayed sample: 3.337 ± 0.2668 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: mean_abs_error" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">2.625,0.30849710781876083
2.9375,0.44501611702819543
3.25,0.7376219233930549
3.5625,0.9332604888222655
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">2.625,0.0
2.9375,0.0025285785444617848
3.25,0.12155225811982719
3.5625,0.3475471499400027
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2.625,0.0
2.9375,0.1
3.25,0.4
3.5625,0.7
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">3.3375,0.0
3.3375,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.3125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2.625, 3.875]
Mean estimate of displayed sample: 3.337 ± 0.2668 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: mean_abs_error" yaxis="count">
					<series title="count" type="b(0.312500)" color="0x0000ff" encoding="csv">2.625,1.0
2.9375,3.0
3.25,3.0
3.5625,3.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">3.3375,0.0
3.3375,3.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.3125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2.625, 3.875]
Mean estimate of displayed sample: 3.337 ± 0.2668 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (max:mean_squared_error)</formula>
			<comment>Mean Squared Error</comment>
			<result outcome="success" type="quantity" value="7.1 ± 0.685939 (95% CI)" timestamp="2024-03-12 17:44:53 +0100">
				<details>7.1 ± 0.685939 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: mean_squared_error" yaxis="probability density">
					<series title="density" type="b(0.812500)" color="0x0000ff" encoding="csv">6.0,0.7384615384615383
6.8125,0.2461538461538461
7.625,0.12307692307692306
8.4375,0.12307692307692306
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">7.1,0.0
7.1,0.7384615384615383
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.8125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [6, 9.25]
Mean estimate of displayed sample: 7.1 ± 0.6859 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: mean_squared_error" yaxis="probability">
					<series title="probability" type="b(0.812500)" color="0x0000ff" encoding="csv">6.0,0.6
6.8125,0.2
7.625,0.1
8.4375,0.1
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">7.1,0.0
7.1,0.6
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.8125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [6, 9.25]
Mean estimate of displayed sample: 7.1 ± 0.6859 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: mean_squared_error" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">6.0,0.0
6.8125,0.6
7.625,0.8
8.4375,0.9
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">7.1,0.0
7.1,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.8125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [6, 9.25]
Mean estimate of displayed sample: 7.1 ± 0.6859 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: mean_squared_error" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">6.0,0.30849710781876083
6.8125,0.8784477418801728
7.625,0.9747892736731666
8.4375,0.9974714214555382
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">6.0,0.0
6.8125,0.26237807660694507
7.625,0.44390453769235844
8.4375,0.5549838829718046
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">6.0,0.0
6.8125,0.6
7.625,0.8
8.4375,0.9
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">7.1,0.0
7.1,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.8125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [6, 9.25]
Mean estimate of displayed sample: 7.1 ± 0.6859 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: mean_squared_error" yaxis="count">
					<series title="count" type="b(0.812500)" color="0x0000ff" encoding="csv">6.0,6.0
6.8125,2.0
7.625,1.0
8.4375,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">7.1,0.0
7.1,6.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.8125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [6, 9.25]
Mean estimate of displayed sample: 7.1 ± 0.6859 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (max:mean_relative_error)</formula>
			<comment>Mean Relative Error</comment>
			<result outcome="success" type="quantity" value="0.416667 ± 0.0380501 (95% CI)" timestamp="2024-03-12 17:44:56 +0100">
				<details>0.416667 ± 0.0380501 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: mean_relative_error" yaxis="probability density">
					<series title="density" type="b(0.041667)" color="0x0000ff" encoding="csv">0.3472222222222223,7.200000000000001
0.388888888888889,4.800000000000001
0.43055555555555564,9.600000000000001
0.4722222222222223,2.4000000000000004
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.4166666666666668,0.0
0.4166666666666668,9.600000000000001
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.041667, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.3472, 0.5139]
Mean estimate of displayed sample: 0.4167 ± 0.03805 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: mean_relative_error" yaxis="probability">
					<series title="probability" type="b(0.041667)" color="0x0000ff" encoding="csv">0.3472222222222223,0.3
0.388888888888889,0.2
0.43055555555555564,0.4
0.4722222222222223,0.1
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.4166666666666668,0.0
0.4166666666666668,0.4
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.041667, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.3472, 0.5139]
Mean estimate of displayed sample: 0.4167 ± 0.03805 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: mean_relative_error" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.3472222222222223,0.0
0.388888888888889,0.3
0.43055555555555564,0.5
0.4722222222222223,0.9
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.4166666666666668,0.0
0.4166666666666668,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.041667, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.3472, 0.5139]
Mean estimate of displayed sample: 0.4167 ± 0.03805 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: mean_relative_error" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">0.3472222222222223,0.30849710781876083
0.388888888888889,0.6524528500599973
0.43055555555555564,0.8129139715526015
0.4722222222222223,0.9974714214555382
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">0.3472222222222223,0.0
0.388888888888889,0.06673951117773447
0.43055555555555564,0.18708602844739852
0.4722222222222223,0.5549838829718046
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.3472222222222223,0.0
0.388888888888889,0.3
0.43055555555555564,0.5
0.4722222222222223,0.9
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.4166666666666668,0.0
0.4166666666666668,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.041667, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.3472, 0.5139]
Mean estimate of displayed sample: 0.4167 ± 0.03805 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: mean_relative_error" yaxis="count">
					<series title="count" type="b(0.041667)" color="0x0000ff" encoding="csv">0.3472222222222223,3.0
0.388888888888889,2.0
0.43055555555555564,4.0
0.4722222222222223,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.4166666666666668,0.0
0.4166666666666668,4.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.041667, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.3472, 0.5139]
Mean estimate of displayed sample: 0.4167 ± 0.03805 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (max:worst_case_error)</formula>
			<comment/>
			<result outcome="success" type="quantity" value="≈ 2" timestamp="2024-03-01 12:02:58 +0100">
				<details>≈ 2</details>
				<plot title="Probability Density Distribution" xaxis="max: worst_case_error" yaxis="probability density">
					<series title="density" type="b(1.000000)" color="0x0000ff" encoding="csv">2.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">2.0,0.0
2.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 2]
Mean estimate of displayed sample: ≈ 2</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: worst_case_error" yaxis="probability">
					<series title="probability" type="b(1.000000)" color="0x0000ff" encoding="csv">2.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">2.0,0.0
2.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 2]
Mean estimate of displayed sample: ≈ 2</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: worst_case_error" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2.0,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">2.0,0.0
2.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 2]
Mean estimate of displayed sample: ≈ 2</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: worst_case_error" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">2.0,0.30849710781876083
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">2.0,0.0
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2.0,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">2.0,0.0
2.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 2]
Mean estimate of displayed sample: ≈ 2</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: worst_case_error" yaxis="count">
					<series title="count" type="b(1.000000)" color="0x0000ff" encoding="csv">2.0,10.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">2.0,0.0
2.0,10.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 2]
Mean estimate of displayed sample: ≈ 2</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (max:worst_case_relative_error)</formula>
			<comment/>
			<result outcome="success" type="quantity" value="0.222222 ± 2.77556e-17 (95% CI)" timestamp="2024-03-01 12:02:58 +0100">
				<details>0.222222 ± 2.77556e-17 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: worst_case_relative_error" yaxis="probability density">
					<series title="density" type="b(0.000000)" color="0x0000ff" encoding="csv">0.2222222222222222,4.503599627370496E15
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.22222222222222224,0.0
0.22222222222222224,4.503599627370496E15
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.2222222222222222099, 0.2222222222222222099]
Mean estimate of displayed sample: 0.2222222222222222376 ± 2.775557561562891351e-17 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: worst_case_relative_error" yaxis="probability">
					<series title="probability" type="b(0.000000)" color="0x0000ff" encoding="csv">0.2222222222222222,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.22222222222222224,0.0
0.22222222222222224,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.2222222222222222099, 0.2222222222222222099]
Mean estimate of displayed sample: 0.2222222222222222376 ± 2.775557561562891351e-17 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: worst_case_relative_error" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.2222222222222222,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.22222222222222224,0.0
0.22222222222222224,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.2222222222222222099, 0.2222222222222222099]
Mean estimate of displayed sample: 0.2222222222222222376 ± 2.775557561562891351e-17 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: worst_case_relative_error" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">0.2222222222222222,0.30849710781876083
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">0.2222222222222222,0.0
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.2222222222222222,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.22222222222222224,0.0
0.22222222222222224,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.2222222222222222099, 0.2222222222222222099]
Mean estimate of displayed sample: 0.2222222222222222376 ± 2.775557561562891351e-17 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: worst_case_relative_error" yaxis="count">
					<series title="count" type="b(0.000000)" color="0x0000ff" encoding="csv">0.2222222222222222,10.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.22222222222222224,0.0
0.22222222222222224,10.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.2222222222222222099, 0.2222222222222222099]
Mean estimate of displayed sample: 0.2222222222222222376 ± 2.775557561562891351e-17 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (max:hamming_distance)</formula>
			<comment/>
			<result outcome="success" type="quantity" value="6.4 ± 2.7644 (95% CI)" timestamp="2024-03-01 12:02:58 +0100">
				<details>6.4 ± 2.7644 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: hamming_distance" yaxis="probability density">
					<series title="density" type="b(3.000000)" color="0x0000ff" encoding="csv">2.0,0.16666666666666666
5.0,0.06666666666666667
8.0,0.03333333333333333
11.0,0.03333333333333333
14.0,0.03333333333333333
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">6.4,0.0
6.4,0.16666666666666666
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=3, bucket count=5
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 14]
Mean estimate of displayed sample: 6.4 ± 2.76 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: hamming_distance" yaxis="probability">
					<series title="probability" type="b(3.000000)" color="0x0000ff" encoding="csv">2.0,0.5
5.0,0.2
8.0,0.1
11.0,0.1
14.0,0.1
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">6.4,0.0
6.4,0.5
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=3, bucket count=5
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 14]
Mean estimate of displayed sample: 6.4 ± 2.76 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: hamming_distance" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2.0,0.0
5.0,0.5
8.0,0.7
11.0,0.8
14.0,0.9
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">6.4,0.0
6.4,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=3, bucket count=5
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 14]
Mean estimate of displayed sample: 6.4 ± 2.76 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: hamming_distance" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">2.0,0.30849710781876083
5.0,0.8129139715526015
8.0,0.9332604888222655
11.0,0.9747892736731666
14.0,0.9974714214555382
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">2.0,0.0
5.0,0.18708602844739852
8.0,0.3475471499400027
11.0,0.44390453769235844
14.0,0.5549838829718046
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2.0,0.0
5.0,0.5
8.0,0.7
11.0,0.8
14.0,0.9
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">6.4,0.0
6.4,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=3, bucket count=5
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 14]
Mean estimate of displayed sample: 6.4 ± 2.76 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: hamming_distance" yaxis="count">
					<series title="count" type="b(3.000000)" color="0x0000ff" encoding="csv">2.0,5.0
5.0,2.0
8.0,1.0
11.0,1.0
14.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">6.4,0.0
6.4,5.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=3, bucket count=5
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 14]
Mean estimate of displayed sample: 6.4 ± 2.76 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (min:hamming_distance)</formula>
			<comment/>
			<result outcome="success" type="quantity" value="≈ 0" timestamp="2024-03-01 12:02:58 +0100">
				<details>≈ 0</details>
				<plot title="Probability Density Distribution" xaxis="min: hamming_distance" yaxis="probability density">
					<series title="density" type="b(1.000000)" color="0x0000ff" encoding="csv">0.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="min: hamming_distance" yaxis="probability">
					<series title="probability" type="b(1.000000)" color="0x0000ff" encoding="csv">0.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="min: hamming_distance" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="min: hamming_distance" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">0.0,0.30849710781876083
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">0.0,0.0
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="min: hamming_distance" yaxis="count">
					<series title="count" type="b(1.000000)" color="0x0000ff" encoding="csv">0.0,10.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,10.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
			</result>
		</query>
	</queries>
</nta>

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>/* Feel free to cite and/or read details to the model using:
  STRNADEL Josef. Statistical Model Checking of Approximate Circuits: Challenges and Opportunities. In: Proceedings of the 2020 Design, Automation &amp; Test in Europe Conference &amp; Exhibition (DATE). Grenoble: IEEE Computer Society, 2020, pp. 1574-1577. ISBN 978-3-9819263-4-7. Available from: https://ieeexplore.ieee.org/document/9116207 and https://www.fit.vut.cz/research/publication/12055/
 */

int dif_count = 0;
int res_count = 0;

int out_sum_all_acc;
int out_sum_all_approx;
int out_sum_all_diff;
double out_sum_all_diff_squared;

double out_sum_relative;

int hamming_distance = 0;
double error_prob = 0.0;
double mean_abs_error = 0.0;
double mean_squared_error = 0.0;
double mean_relative_error = 0.0;
double worst_case_error = 0.0;
double worst_case_relative_error = 0.0;

double rnd;

broadcast chan change[100];
int outcnt=0;

const int NOPS = 9;
typedef int[0,NOPS-1] tOp;

const tOp OP_NOT = 0;
const tOp OP_DLY = 1;
const tOp OP_AND = 2;
const tOp OP_NAND = 3;
const tOp OP_OR = 4;
const tOp OP_NOR = 5;
const tOp OP_XOR = 6;
const tOp OP_XNOR = 7;
const tOp OP_SET = 8;

const int NCOM = 7;
tOp tbl_op[NCOM] = {
    2,                
    2,                
    4,                
    2,                
    2,                
    0,                
    1};               

int duration(tOp op){  
    int duration=0;
    if(op==OP_NOT) duration=3;
    if(op==OP_DLY) duration=10;
    if(op==OP_AND) duration=10;
    if(op==OP_NAND) duration=13;
    if(op==OP_OR) duration=10;
    if(op==OP_NOR) duration=13;
    if(op==OP_XOR) duration=20;
    if(op==OP_XNOR) duration=23;
    if(op==OP_SET) duration=0;
    return duration;
}

broadcast chan go, pwrUp;

const double COVERAGE_RATIO = 100.0;
const int DLY_ZERO = 0;

const int TBL_PWR2[31] = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824};

broadcast chan update;
broadcast chan cmpDone;

const int MAX_BITS = 1024;
bool bits[MAX_BITS];
bool difference=false;
bool dif2=false;
int diffctrl=0;
int err_magn_v;    
double err_magn_r;  

int bitsCovered;
double inCoverage;

bool allCovered=false;

const int NIB_MUL2 = 4;                  
const int NOB_MUL2 = 4;                  
const int NTV_MUL2 = TBL_PWR2[NIB_MUL2]; 
const int DLY_MUL2 = 20;                 

/* ===------------------------  ------------------------==== */
int getMasked(int w, int offset, int data){ 
    int mask = (TBL_PWR2[w]-1);    
   return (data &amp; (mask &lt;&lt; offset)) &gt;&gt; offset;     
}    
bool getBit(int pos, int data){ return getMasked(1, pos, data); }

const int NIB_ANY = 4;                  
const int NOB_ANY = 4;                  
const int NTV_ANY = TBL_PWR2[NIB_ANY]; 
const int DLY_ANY = 20;                 
bool tbl_acc_any[TBL_PWR2[NIB_ANY]][NIB_ANY+NOB_ANY];
//
const int NFUN = 1;
typedef int[0,NFUN-1] tFun;
//-------
const tFun F_MUL = 0;
//
void fill_tbl_acc_any(int win, int wout, tFun f, int fdly){ 
    int i, j, k, op0, op1, result;
    for(i=0; i&lt;TBL_PWR2[win]; i++){    
        for(j=0; j&lt;win; j++){
            tbl_acc_any[i][j] = getBit(j,i);
        }
        if(f==F_MUL){
            op0 = getMasked(win/2, 0, i);
            op1 = getMasked(win/2, win/2, i);
            result = op0*op1;
        }
        else { result = 0; }
        for(k=0; k&lt;wout; k++){
            tbl_acc_any[i][win+(wout-k-1)] = getBit(k,result);
        }
    }
}

/* ===------------------------  ------------------------==== */
const int NPI = NIB_MUL2;    
const int NPO = NOB_MUL2;   
//
const int NTV = NTV_MUL2; 
const int DLY = DLY_MUL2;
//
const int PIxy[NPI] = {0,1,2,3};    
const int POx[NPO] = {4,5,6,7};     
//
const int POy[NPO] = {8,9,10,-1};

int PWR2_NPI = TBL_PWR2[NPI];

/* ===------------------------  ------------------------==== */

const int MAX_INNER_NODES = 100;
typedef struct {
    int dly;
    bool flag;
} sNode;
sNode nodes[MAX_INNER_NODES];

const int MAX_INNER_GATES = 100;
typedef struct {
    bool active;
    int in0;
    int in1;
    int inAvail;
    int out0;
    int dly;
    int depth;
    bool flag;
} sGate;
sGate gates[MAX_INNER_GATES];

int approxCircNodes = 0;
int approxCircGates = 0;
int approxCircDly=0;
int approxCircDepth=0;


bool outEq(){
    bool same=true;
    int i;
    for(i=0; i&lt;NPO; i++){
        if((POx[i]&gt;=0) &amp;&amp; (POy[i]&gt;=0)){
            if(bits[POx[i]] != bits[POy[i]]){
                hamming_distance++;
                same = false;
            }
        }
    }
    
    if (same == false) {
        dif_count++;
    }

    res_count++;

    return same;
}

void diff(){
    int res_acc=0, res_approx=0;
    int i;
    double res_dif;
    double relative_res_dif;

    difference = !outEq();

     for(i=0; i&lt;=NPO-1; i++){                                       
        res_acc += bits[i+NPI]*TBL_PWR2[i];
        if(POy[i]&gt;=0) res_approx += bits[i+NPI+NPO]*TBL_PWR2[i];    
    }
    out_sum_all_acc += res_acc;
    out_sum_all_approx += res_approx;

    out_sum_all_diff = abs(out_sum_all_acc - out_sum_all_approx);
    out_sum_all_diff_squared = out_sum_all_diff_squared + pow(abs(res_approx-res_acc),2);
    out_sum_relative = out_sum_relative + (abs(res_approx-res_acc) / fmax(1.0, 1.0*res_acc));

    res_dif = 1.0 * abs(res_approx - res_acc);
    if (res_dif &gt; worst_case_error) {
        worst_case_error = res_dif;
    }

    relative_res_dif = abs(res_approx - res_acc) / fmax(1.0, 1.0*res_acc);
    if (relative_res_dif &gt; worst_case_relative_error) {
        worst_case_relative_error = relative_res_dif;
    }

    err_magn_v = res_acc - res_approx;
    if(res_acc!=0) err_magn_r = 1-((1.0*res_approx)/(1.0*res_acc));
}

</declaration>
	<template>
		<name>tmul2any</name>
		<parameter>int a0, int a1, int b0, int b1, int y0, int y1, int y2, int y3, bool &amp;ttbl[TBL_PWR2[NIB_ANY]][NIB_ANY+NOB_ANY], const int  dly</parameter>
		<declaration>clock x;

int getIdx(int i){
    int idx=-1;
    
    if(i==0){ idx = a0; } 
    else if (i==1) { idx = a1; }
    else if (i==2) { idx = b0; }
    else if (i==3) { idx = b1; }
    else if (i==4) { idx = y0; }
    else if (i==5) { idx = y1; }
    else if (i==6) { idx = y2; }
    else if (i==7) { idx = y3; }
    else {}

    return idx;
}



int bin2dec()
{
    int result=0, i;
    for(i=0; i&lt;NIB_MUL2; i++){
        result += bits[getIdx(i)]*TBL_PWR2[i];
    }

    return result;
}


int getOut(){
    int res, i;
    for(i=NIB_MUL2; i&lt;NIB_MUL2+NOB_MUL2; i++){
        res += bits[getIdx(i)]*TBL_PWR2[i-NIB_MUL2];
    }
    return res;    
}

void f(){
    if(y3&gt;=0) bits[y3]=ttbl[bin2dec()][4];
    if(y2&gt;=0) bits[y2]=ttbl[bin2dec()][5];
    if(y1&gt;=0) bits[y1]=ttbl[bin2dec()][6];
    if(y0&gt;=0) bits[y0]=ttbl[bin2dec()][7];

    diffctrl++;
}

void inits(){
    fill_tbl_acc_any(NIB_ANY, NOB_ANY, F_MUL, dly);
}
</declaration>
		<location id="id0" x="-170" y="0">
		</location>
		<location id="id1" x="0" y="0">
			<label kind="invariant" x="-25" y="17">x&lt;=dly</label>
		</location>
		<location id="id2" x="-374" y="0">
			<committed/>
		</location>
		<init ref="id2"/>
		<transition id="id3">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="assignment" x="-297" y="0">inits()</label>
		</transition>
		<transition id="id4">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-152" y="-136">x==dly</label>
			<label kind="assignment" x="17" y="-59">f()</label>
			<nail x="0" y="-102"/>
			<nail x="-170" y="-102"/>
		</transition>
		<transition id="id5">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-110" y="-25">update?</label>
			<label kind="assignment" x="-93" y="0">x=0</label>
		</transition>
	</template>
	<template>
		<name>tmul2_tb_exhaust</name>
		<parameter>const int a0, const int a1, const int b0, const int b1, const int dly, const double covratio</parameter>
		<declaration>clock x;
clock tcover;
int input=0;
int nsame=0, inSame=0;
double rCover;

bool inCoverSet[NTV];

int covered()
{
    int cnt=0;

    for(i: int[0,NTV-1])
    {
        if(inCoverSet[i]) {
            cnt++;
        }
    }

    bitsCovered=cnt;

    return cnt;
}

int bin2dec()
{
    int result=0, i;
    for(i=0; i&lt;NPI; i++){
        result += bits[i]*TBL_PWR2[i];
    }

    return result;
}


bool inCovered()
{
  return forall (i : int[0,NTV-1]) inCoverSet[i];    
}



void f(){
    bits[a0] = getBit(0, input);
    bits[a1] = getBit(1, input);
    bits[b0] = getBit(2, input);
    bits[b1] = getBit(3, input);

    if(inCoverSet[input]) { inSame = -1*input; nsame++; }
    else inSame = input;
    inCoverSet[input] = true;
    input = (input+1) % NTV;
    covered();

    rCover = 100.0*bitsCovered / NTV; 
}

void inits(){
    int i;
    for(i:int[0,MAX_INNER_NODES-1]){ nodes[i].flag=false; }
    for(i:int[0,NPI-1]){
        if(exists(j:int[0,NPI-1]) PIxy[j]==i){ 
            nodes[i].flag=true;    
            nodes[i].dly=0;        
        }
        approxCircNodes++;
    }
    for(i=0; i&lt;approxCircGates; i++) gates[i].flag=false;    
    while(exists(i:int[0,MAX_INNER_GATES-1]) (gates[i].flag==false &amp;&amp; i&lt;approxCircGates)){
        approxCircDepth++;
        for(i=0; i&lt;approxCircGates; i++) {
            if(!gates[i].flag &amp;&amp; nodes[gates[i].in0].flag &amp;&amp; nodes[gates[i].in1].flag){  
                nodes[gates[i].out0].dly = (nodes[gates[i].in0].dly&gt;nodes[gates[i].in1].dly?nodes[gates[i].in0].dly:nodes[gates[i].in1].dly) + duration(tbl_op[i]);
                nodes[gates[i].out0].flag=true;
                approxCircNodes++;
                if(nodes[gates[i].out0].dly&gt;approxCircDly){ approxCircDly=nodes[gates[i].out0].dly; }

                gates[i].flag=true;   
            }  
        }
    }
}</declaration>
		<location id="id6" x="-136" y="0">
			<name x="-153" y="8">apply</name>
			<committed/>
		</location>
		<location id="id7" x="-374" y="0">
			<name x="-382" y="8">get</name>
			<committed/>
		</location>
		<location id="id8" x="34" y="0">
			<name x="17" y="8">done</name>
			<label kind="invariant" x="0" y="-34">tcover'==0</label>
		</location>
		<location id="id9" x="-246" y="-102">
			<name x="-255" y="-136">wait</name>
		</location>
		<location id="id10" x="-510" y="0">
			<urgent/>
		</location>
		<init ref="id10"/>
		<transition id="id11">
			<source ref="id10"/>
			<target ref="id7"/>
			<label kind="assignment" x="-459" y="0">inits()</label>
		</transition>
		<transition id="id12">
			<source ref="id6"/>
			<target ref="id9"/>
			<label kind="guard" x="-221" y="-93">!inCovered()</label>
			<nail x="-136" y="-102"/>
		</transition>
		<transition id="id13">
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="-93" y="-25">inCovered()</label>
			<label kind="assignment" x="-110" y="0">allCovered=true,
x=0</label>
		</transition>
		<transition id="id14">
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-289" y="-25">update!</label>
			<label kind="assignment" x="-280" y="0">f(), x=0</label>
		</transition>
		<transition id="id15">
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-365" y="-93">cmpDone?</label>
			<nail x="-374" y="-102"/>
		</transition>
	</template>
	<template>
		<name>tmul2_tb_nondet</name>
		<parameter>const int a0, const int a1, const int b0, const int b1, const int dly, const double covratio</parameter>
		<declaration>clock x;
clock tcover;
int input=0;
int nsame=0, inSame=0;
double rCover;
int idx=0;

bool inCoverSet[NTV];

int covered()
{
    int cnt=0;

    for(i: int[0,NTV-1])
    {
        if(inCoverSet[i]) {
            cnt++;
        }
    }

    bitsCovered=cnt;

    return cnt;
}

int bin2dec()
{
    int result=0, i;
    for(i=0; i&lt;NPI; i++){
        result += bits[i]*TBL_PWR2[i];
    }

    return result;
}


bool inCovered()
{
  return forall (i : int[0,NTV-1]) inCoverSet[i];    
}

void f(int i){
    input = bin2dec();
   if(inCoverSet[input]) { inSame = -1*input; nsame++; }
  else inSame = input;
   inCoverSet[bin2dec()] = true;
    covered();

    rCover = 100.0*bitsCovered / NTV; 

    inCoverage = 0.0;
}

void inits(){
    int i;
    for(i:int[0,MAX_INNER_NODES-1]){ nodes[i].flag=false; }
    for(i:int[0,NPI-1]){
        if(exists(j:int[0,NPI-1]) PIxy[j]==i){ 
            nodes[i].flag=true;
            nodes[i].dly=0;      
        }
        approxCircNodes++;
    }
    for(i=0; i&lt;approxCircGates; i++) gates[i].flag=false;    
    while(exists(i:int[0,MAX_INNER_GATES-1]) (gates[i].flag==false &amp;&amp; i&lt;approxCircGates)){
        approxCircDepth++;
        for(i=0; i&lt;approxCircGates; i++) {
            if(!gates[i].flag &amp;&amp; nodes[gates[i].in0].flag &amp;&amp; nodes[gates[i].in1].flag){  
                nodes[gates[i].out0].dly = (nodes[gates[i].in0].dly&gt;nodes[gates[i].in1].dly?nodes[gates[i].in0].dly:nodes[gates[i].in1].dly) + duration(tbl_op[i]);
                nodes[gates[i].out0].flag=true;
                approxCircNodes++;
                if(nodes[gates[i].out0].dly&gt;approxCircDly){ approxCircDly=nodes[gates[i].out0].dly; }

                gates[i].flag=true;
            }  
        }
    }
}</declaration>
		<location id="id16" x="-119" y="-102">
			<name x="-129" y="-136">wait</name>
		</location>
		<location id="id17" x="-246" y="0">
			<name x="-255" y="8">get</name>
			<committed/>
		</location>
		<location id="id18" x="170" y="0">
			<name x="153" y="8">done</name>
			<label kind="invariant" x="136" y="-34">tcover'==0</label>
		</location>
		<location id="id19" x="0" y="0">
			<name x="-17" y="8">apply</name>
			<committed/>
		</location>
		<location id="id20" x="-246" y="-102">
			<committed/>
		</location>
		<location id="id21" x="-374" y="0">
			<urgent/>
		</location>
		<init ref="id21"/>
		<transition id="id22">
			<source ref="id21"/>
			<target ref="id17"/>
			<label kind="assignment" x="-331" y="0">inits()</label>
		</transition>
		<transition id="id23">
			<source ref="id20"/>
			<target ref="id17"/>
			<label kind="select" x="-238" y="-68">i: int[a0, b1]</label>
			<label kind="assignment" x="-238" y="-51">bits[i] ^= 1, idx=i</label>
		</transition>
		<transition id="id24">
			<source ref="id16"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-212" y="-102">cmpDone?</label>
		</transition>
		<transition id="id25">
			<source ref="id19"/>
			<target ref="id16"/>
			<label kind="guard" x="-93" y="-93">!inCovered()</label>
			<nail x="0" y="-102"/>
		</transition>
		<transition id="id26">
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-153" y="-25">update!</label>
			<label kind="assignment" x="-144" y="0">f(idx)</label>
		</transition>
		<transition id="id27">
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="guard" x="42" y="-25">inCovered()</label>
			<label kind="assignment" x="34" y="0">allCovered=true</label>
		</transition>
	</template>
	<template>
		<name>tmul2_tb_random</name>
		<parameter>const int dly, const double covratio</parameter>
		<declaration>clock x;
clock tcover;
int input=0;
int nsame=0, inSame=0;
double rCover;
int idx=0;

bool inCoverSet[NTV];

int covered()
{
    int cnt=0;

    for(i: int[0,NTV-1])
    {
        if(inCoverSet[i]) {
            cnt++;
        }
    }

    bitsCovered=cnt;

    return cnt;
}

int bin2dec()
{
    int result=0, i;
    for(i=0; i&lt;NPI; i++){
        result += bits[i]*TBL_PWR2[i];
    }

    return result;
}


bool inCovered()
{
  return forall (i : int[0,NTV-1]) inCoverSet[i];    
}

void f(int i){
    int j, k;
    int min = 0;
    int max = (NPI/2) - 1;

    //changing bits in the first number (bits &lt;0,7&gt;)
    j=fint(random(NPI/2));
    if(j &lt; min) j=min;
    if(j &gt; max) j=max;
    bits[j] ^= 1;

    //changing bits in the second number (bits &lt;8,15&gt;)
    k = fint(random(NPI/2));
    if(k &lt; min) k=min;
    if(k &gt; max) k=max;
    k += 8; //shift to the correct bit range
    bits[k] ^= 1;

    //check if this bit combination has already been used
    if(inCoverSet[input]) { inSame = -1*input; nsame++; }
    else inSame = input;
    inCoverSet[bin2dec()] = true;
    covered();

    rCover = 100.0*bitsCovered / NTV; 

    inCoverage = 0.0;
}

double EP() {
    //error probability
    //number of different outputs divided by 2^NPI
    double ret = dif_count / (1.0*PWR2_NPI);

    return ret;
}

double MAE() {
    //mean absolute error
    //sum of differences (approx. vs acc.) divided by 2^NPI
    double ret = out_sum_all_diff / (1.0*PWR2_NPI);

    return ret;
}

double MSE() {
    //mean squared error
    //sum of squared differences divided by 2^NPI
    double ret = out_sum_all_diff_squared / (1.0*PWR2_NPI);

    return ret;
}

double MRE() {
    //mean relative error
    //mean error in relation to size of accurate output
    double ret = out_sum_relative / (1.0*PWR2_NPI);

    return ret;
}

void calc_metrics() {
    error_prob = EP();
    mean_abs_error = MAE();
    mean_squared_error = MSE();
    mean_relative_error = MRE();
}

void inits(){
    int i;
    for(i:int[0,MAX_INNER_NODES-1]){ nodes[i].flag=false; }
    for(i:int[0,NPI-1]){
        if(exists(j:int[0,NPI-1]) PIxy[j]==i){ 
            nodes[i].flag=true;    
            nodes[i].dly=0;        
        }
        approxCircNodes++;
    }
    for(i=0; i&lt;approxCircGates; i++) gates[i].flag=false;
    while(exists(i:int[0,MAX_INNER_GATES-1]) (gates[i].flag==false &amp;&amp; i&lt;approxCircGates)){
        approxCircDepth++;
        for(i=0; i&lt;approxCircGates; i++) {
            if(!gates[i].flag &amp;&amp; nodes[gates[i].in0].flag &amp;&amp; nodes[gates[i].in1].flag){  
                nodes[gates[i].out0].dly = (nodes[gates[i].in0].dly&gt;nodes[gates[i].in1].dly?nodes[gates[i].in0].dly:nodes[gates[i].in1].dly) + duration(tbl_op[i]);
                nodes[gates[i].out0].flag=true;
                approxCircNodes++;
                if(nodes[gates[i].out0].dly&gt;approxCircDly){ approxCircDly=nodes[gates[i].out0].dly; }

                gates[i].flag=true; 
            }  
        }
    }
}</declaration>
		<location id="id28" x="-119" y="-102">
			<name x="-129" y="-136">wait</name>
		</location>
		<location id="id29" x="-246" y="0">
			<name x="-255" y="8">get</name>
			<committed/>
		</location>
		<location id="id30" x="170" y="0">
			<name x="153" y="8">done</name>
			<label kind="invariant" x="136" y="-34">tcover'==0</label>
		</location>
		<location id="id31" x="0" y="0">
			<name x="-17" y="8">apply</name>
			<committed/>
		</location>
		<location id="id32" x="-246" y="-102">
			<committed/>
		</location>
		<location id="id33" x="-374" y="0">
			<urgent/>
		</location>
		<init ref="id33"/>
		<transition id="id34">
			<source ref="id33"/>
			<target ref="id29"/>
			<label kind="assignment" x="-331" y="0">inits()</label>
		</transition>
		<transition id="id35">
			<source ref="id32"/>
			<target ref="id29"/>
		</transition>
		<transition id="id36">
			<source ref="id28"/>
			<target ref="id32"/>
			<label kind="synchronisation" x="-212" y="-102">cmpDone?</label>
		</transition>
		<transition id="id37">
			<source ref="id31"/>
			<target ref="id28"/>
			<label kind="guard" x="-93" y="-93">!inCovered()</label>
			<nail x="0" y="-102"/>
		</transition>
		<transition id="id38">
			<source ref="id29"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-153" y="-25">update!</label>
			<label kind="assignment" x="-144" y="0">f(idx)</label>
		</transition>
		<transition id="id39">
			<source ref="id31"/>
			<target ref="id30"/>
			<label kind="guard" x="42" y="-25">inCovered()</label>
			<label kind="assignment" x="34" y="0">allCovered=true,
calc_metrics()</label>
		</transition>
	</template>
	<template>
		<name>syncPrimary</name>
		<declaration>int idx;</declaration>
		<location id="id40" x="-748" y="-306">
		</location>
		<location id="id41" x="-646" y="-306">
			<committed/>
		</location>
		<location id="id42" x="-510" y="-306">
			<committed/>
		</location>
		<init ref="id40"/>
		<transition id="id43">
			<source ref="id42"/>
			<target ref="id40"/>
			<label kind="guard" x="-646" y="-399">idx&gt;=NPI</label>
			<nail x="-510" y="-374"/>
			<nail x="-748" y="-374"/>
		</transition>
		<transition id="id44">
			<source ref="id42"/>
			<target ref="id41"/>
			<label kind="guard" x="-595" y="-323">idx&lt;NPI</label>
			<nail x="-578" y="-272"/>
		</transition>
		<transition id="id45">
			<source ref="id41"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-612" y="-340">change[idx]!</label>
			<label kind="assignment" x="-629" y="-280">idx++</label>
		</transition>
		<transition id="id46">
			<source ref="id40"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="-730" y="-323">update?</label>
			<label kind="assignment" x="-714" y="-306">idx=0</label>
		</transition>
	</template>
	<template>
		<name>eval_diff</name>
		<parameter>const int dly</parameter>
		<declaration>clock x;</declaration>
		<location id="id47" x="-238" y="0">
			<label kind="invariant" x="-297" y="-8">x&lt;=dly</label>
		</location>
		<location id="id48" x="-102" y="0">
			<committed/>
		</location>
		<init ref="id47"/>
		<transition id="id49">
			<source ref="id48"/>
			<target ref="id47"/>
			<label kind="synchronisation" x="-178" y="51">cmpDone!</label>
			<label kind="assignment" x="-246" y="110">outcnt=0, diffctrl=0, x=0</label>
			<nail x="-102" y="110"/>
			<nail x="-238" y="110"/>
		</transition>
		<transition id="id50">
			<source ref="id47"/>
			<target ref="id47"/>
			<label kind="guard" x="-331" y="-93">diffctrl&lt;2
&amp;&amp; x==dly</label>
			<label kind="assignment" x="-289" y="-42">x=0</label>
			<nail x="-263" y="-76"/>
			<nail x="-229" y="-76"/>
		</transition>
		<transition id="id51">
			<source ref="id47"/>
			<target ref="id48"/>
			<label kind="guard" x="-204" y="0">diffctrl==2</label>
			<label kind="assignment" x="-212" y="-68">err_magn_v=0,
err_magn_r=0.0,
diff()</label>
		</transition>
	</template>
	<template>
		<name>gate2</name>
		<parameter>const int id, const int a0, const int a1, const int y0, broadcast chan &amp;cin0, broadcast chan &amp;cin1, broadcast chan &amp;cout0</parameter>
		<declaration>clock x;

void inits(){
    int i;

    // collect info about the approx.circuit topology 
    gates[id].active = true;
    gates[id].in0 = a0; 
    gates[id].in1 = a1; 
    gates[id].inAvail = 0; 
    gates[id].out0 = y0; 
    gates[id].dly = duration(tbl_op[id]);
    gates[id].depth = -1;
    gates[id].flag = false;

    approxCircGates++;    
}

void outGen(tOp op){
 //   outSync(y0);

    if(op == OP_AND){
        bits[y0] = bits[a0] &amp; bits[a1];        
    }
    else if(op == OP_NAND){
        bits[y0] = not (bits[a0] &amp; bits[a1]);        
    }
    else if(op == OP_OR){
        bits[y0] = bits[a0] | bits[a1];        
    }
    else if(op == OP_NOR){
        bits[y0] = not (bits[a0] | bits[a1]);        
    }
    else if(op == OP_XOR){
        bits[y0] = (bits[a0] != bits[a1]);        
    }
    else if(op == OP_XNOR){
        bits[y0] = (bits[a0] == bits[a1]);
    }
    else if(op == OP_SET){
        //not really a gate but idk how else to do it
        bits[y0] = bits[a0];
    }
    else {    // unsupported operation
    }

    if(id==2){ 
        if(diffctrl&lt;2) diffctrl++;
    }  
}</declaration>
		<location id="id52" x="-170" y="0">
		</location>
		<location id="id53" x="0" y="0">
			<label kind="invariant" x="-17" y="17">x&lt;=duration(tbl_op[id])</label>
		</location>
		<location id="id54" x="-272" y="0">
			<committed/>
		</location>
		<init ref="id54"/>
		<transition id="id55">
			<source ref="id54"/>
			<target ref="id52"/>
			<label kind="assignment" x="-238" y="0">inits()</label>
		</transition>
		<transition id="id56">
			<source ref="id52"/>
			<target ref="id53"/>
			<label kind="synchronisation" x="-144" y="0">cin1?</label>
			<label kind="assignment" x="-76" y="0">x=0</label>
			<nail x="-85" y="0"/>
		</transition>
		<transition id="id57">
			<source ref="id53"/>
			<target ref="id52"/>
			<label kind="guard" x="-110" y="-127">x==duration(tbl_op[id])</label>
			<label kind="synchronisation" x="8" y="-68">cout0!</label>
			<label kind="assignment" x="-144" y="-102">outGen(tbl_op[id])</label>
			<nail x="0" y="-102"/>
			<nail x="-170" y="-102"/>
		</transition>
		<transition id="id58">
			<source ref="id52"/>
			<target ref="id53"/>
			<label kind="synchronisation" x="-136" y="-42">cin0?</label>
			<label kind="assignment" x="-59" y="-42">x=0</label>
			<nail x="-85" y="-34"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

synPri = syncPrimary();
mul2A = tmul2any(PIxy[0],PIxy[1],PIxy[2],PIxy[3],    POx[0],POx[1],POx[2],POx[3],    tbl_acc_any,     DLY_MUL2);

//mul2Atb = tmul2_tb_exhaust(PIxy[0],PIxy[1],PIxy[2],PIxy[3],    DLY_MUL2, COVERAGE_RATIO);
mul2Atb = tmul2_tb_random(DLY_MUL2, COVERAGE_RATIO);

ediff = eval_diff(5);

g24 = gate2(4,    PIxy[0],PIxy[2],    POy[0],    change[0],change[2],change[13]);
g23 = gate2(3,    PIxy[0],PIxy[3],    12,        change[0],change[3],change[12]);
g22 = gate2(2,    11,12,              POy[1],    change[11],change[12],change[14]);
g21 = gate2(1,    PIxy[1],PIxy[2],    11,        change[1],change[2],change[11]);
g20 = gate2(0,    PIxy[1],PIxy[3],    POy[2],    change[1],change[3],change[15]);

// List one or more processes to be composed into a system.
system 
synPri,
mul2A, 
mul2Atb,
ediff
,g20
,g21
,g22
,g23
,g24;    
</system>
	<queries>
		<query>
			<formula>E[&lt;=25000; 10] (max:mul2Atb.tcover)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=350; 100] (max:bitsCovered)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>Pr[&lt;=25000] (&lt;&gt;bitsCovered&gt;14)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=350;1] {bits[0], 2+bits[1], 4+bits[2], 6+bits[3], 8+bits[4], 10+bits[5], 12+bits[6], 14+bits[7], bitsCovered, 16+allCovered}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=1250;1] {bits[0], 2+bits[1], 4+bits[2], 6+bits[3], 10+bits[4], 12+bits[5], 14+bits[6], 16+bits[7], 20+bits[8], 22+bits[9], 24+bits[10], 26+bits[11], 28+bits[12], 32+difference, out_sum_all_acc, out_sum_all_approx}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=1500;1] {bits[0], 2+bits[1], 4+bits[2], 6+bits[3], 8+bits[4], 10+bits[5], 12+bits[6], 14+bits[7], 20+bits[8], 22+bits[9], 24+bits[10], 26+bits[11], bitsCovered, 20+allCovered, 30+mul2Atb.inSame, 40+mul2Atb.input, 30+mul2Atb.nsame, mul2Atb.rCover, 60+difference*10}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=2500;5] {100*((((100.0*(out_sum_all_acc-out_sum_all_approx))/(100.0*(out_sum_all_acc+1))))), out_sum_all_acc, out_sum_all_approx}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=2000;5] {40+difference, 50+10*err_magn_v, 100*err_magn_r, out_sum_all_acc, out_sum_all_approx, 80+out_sum_all_diff, mul2Atb.rCover, 100*((1+1.0*out_sum_all_acc)/(1+1.0*out_sum_all_approx))}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=4000;20] {out_sum_all_diff}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=400;5] {bits[0], 2+bits[1], 4+bits[2], 6+bits[3], 10+bits[4], 12+bits[5], 14+bits[6], 16+bits[7], 20+bits[8], 22+bits[9], 24+bits[10], 26+bits[11], 30+bits[14], 32+bits[15], 34+bits[16], 36+bits[13], 38+bits[12], 40+difference, 45+diffctrl, 50+outcnt}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>sup: err_magn_v
			</formula>
			<comment>Maximalni rozdil mezi vysledkem presne a priblizne nasobicky (pro stejny vstup)</comment>
		</query>
		<query>
			<formula>E[&lt;=2500; 10] (max:err_magn_v)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=2500; 10] (max:err_magn_r)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=25000; 10] (max:out_sum_all_diff)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=5000;200] {bitsCovered, 100*allCovered, mul2Atb.rCover}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>Pr[&lt;=50000] (&lt;&gt;allCovered)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=2500; 10] (max:dif_count)</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate[&lt;=5000;1] {dif_count, res_count}</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (max:error_prob)</formula>
			<comment>Error Probability</comment>
			<result outcome="success" type="quantity" value="0.26875 ± 0.122986 (95% CI)" timestamp="2024-03-01 12:02:57 +0100">
				<details>0.26875 ± 0.122986 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: error_prob" yaxis="probability density">
					<series title="density" type="b(0.125000)" color="0x0000ff" encoding="csv">0.0625,3.999999999999999
0.18750000000000003,1.5999999999999996
0.31250000000000006,1.5999999999999996
0.4375000000000001,0.7999999999999998
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.26875,0.0
0.26875,3.999999999999999
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.0625, 0.562]
Mean estimate of displayed sample: 0.269 ± 0.123 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: error_prob" yaxis="probability">
					<series title="probability" type="b(0.125000)" color="0x0000ff" encoding="csv">0.0625,0.5
0.18750000000000003,0.2
0.31250000000000006,0.2
0.4375000000000001,0.1
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.26875,0.0
0.26875,0.5
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.0625, 0.562]
Mean estimate of displayed sample: 0.269 ± 0.123 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: error_prob" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0625,0.0
0.18750000000000003,0.5
0.31250000000000006,0.7
0.4375000000000001,0.9
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.26875,0.0
0.26875,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.0625, 0.562]
Mean estimate of displayed sample: 0.269 ± 0.123 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: error_prob" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">0.0625,0.30849710781876083
0.18750000000000003,0.8129139715526015
0.31250000000000006,0.9332604888222655
0.4375000000000001,0.9974714214555382
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">0.0625,0.0
0.18750000000000003,0.18708602844739852
0.31250000000000006,0.3475471499400027
0.4375000000000001,0.5549838829718046
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0625,0.0
0.18750000000000003,0.5
0.31250000000000006,0.7
0.4375000000000001,0.9
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.26875,0.0
0.26875,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.0625, 0.562]
Mean estimate of displayed sample: 0.269 ± 0.123 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: error_prob" yaxis="count">
					<series title="count" type="b(0.125000)" color="0x0000ff" encoding="csv">0.0625,5.0
0.18750000000000003,2.0
0.31250000000000006,2.0
0.4375000000000001,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.26875,0.0
0.26875,5.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.0625, 0.562]
Mean estimate of displayed sample: 0.269 ± 0.123 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (max:mean_abs_error)</formula>
			<comment>Mean Absolute Error</comment>
			<result outcome="success" type="quantity" value="0.4375 ± 0.198834 (95% CI)" timestamp="2024-03-01 12:02:57 +0100">
				<details>0.4375 ± 0.198834 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: mean_abs_error" yaxis="probability density">
					<series title="density" type="b(0.218750)" color="0x0000ff" encoding="csv">0.0,0.9142857142857141
0.21875000000000006,1.8285714285714283
0.4375000000000001,0.9142857142857141
0.6562500000000002,0.9142857142857141
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.4375,0.0
0.4375,1.8285714285714283
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.21875, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0.875]
Mean estimate of displayed sample: 0.438 ± 0.199 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: mean_abs_error" yaxis="probability">
					<series title="probability" type="b(0.218750)" color="0x0000ff" encoding="csv">0.0,0.2
0.21875000000000006,0.4
0.4375000000000001,0.2
0.6562500000000002,0.2
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.4375,0.0
0.4375,0.4
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.21875, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0.875]
Mean estimate of displayed sample: 0.438 ± 0.199 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: mean_abs_error" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0,0.0
0.21875000000000006,0.2
0.4375000000000001,0.6
0.6562500000000002,0.8
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.4375,0.0
0.4375,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.21875, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0.875]
Mean estimate of displayed sample: 0.438 ± 0.199 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: mean_abs_error" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">0.0,0.30849710781876083
0.21875000000000006,0.5560954623076415
0.4375000000000001,0.8784477418801728
0.6562500000000002,0.9747892736731666
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">0.0,0.0
0.21875000000000006,0.025210726326833372
0.4375000000000001,0.26237807660694507
0.6562500000000002,0.44390453769235844
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0,0.0
0.21875000000000006,0.2
0.4375000000000001,0.6
0.6562500000000002,0.8
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.4375,0.0
0.4375,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.21875, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0.875]
Mean estimate of displayed sample: 0.438 ± 0.199 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: mean_abs_error" yaxis="count">
					<series title="count" type="b(0.218750)" color="0x0000ff" encoding="csv">0.0,2.0
0.21875000000000006,4.0
0.4375000000000001,2.0
0.6562500000000002,2.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.4375,0.0
0.4375,4.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.21875, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0.875]
Mean estimate of displayed sample: 0.438 ± 0.199 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (max:mean_squared_error)</formula>
			<comment>Mean Squared Error</comment>
			<result outcome="success" type="quantity" value="0.875 ± 0.329224 (95% CI)" timestamp="2024-03-01 12:25:57 +0100">
				<details>0.875 ± 0.329224 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: mean_squared_error" yaxis="probability density">
					<series title="density" type="b(0.312500)" color="0x0000ff" encoding="csv">0.25,1.2799999999999998
0.5625,0.6399999999999999
0.8750000000000001,0.0
1.1875000000000002,1.2799999999999998
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.875,0.0
0.875,1.2799999999999998
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.3125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.25, 1.5]
Mean estimate of displayed sample: 0.875 ± 0.329 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: mean_squared_error" yaxis="probability">
					<series title="probability" type="b(0.312500)" color="0x0000ff" encoding="csv">0.25,0.4
0.5625,0.2
0.8750000000000001,0.0
1.1875000000000002,0.4
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.875,0.0
0.875,0.4
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.3125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.25, 1.5]
Mean estimate of displayed sample: 0.875 ± 0.329 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: mean_squared_error" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.25,0.0
0.5625,0.4
0.8750000000000001,0.6
1.1875000000000002,0.6
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.875,0.0
0.875,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.3125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.25, 1.5]
Mean estimate of displayed sample: 0.875 ± 0.329 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: mean_squared_error" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">0.25,0.30849710781876083
0.5625,0.7376219233930549
0.8750000000000001,0.8784477418801728
1.1875000000000002,0.8784477418801728
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">0.25,0.0
0.5625,0.12155225811982719
0.8750000000000001,0.26237807660694507
1.1875000000000002,0.26237807660694507
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.25,0.0
0.5625,0.4
0.8750000000000001,0.6
1.1875000000000002,0.6
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.875,0.0
0.875,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.3125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.25, 1.5]
Mean estimate of displayed sample: 0.875 ± 0.329 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: mean_squared_error" yaxis="count">
					<series title="count" type="b(0.312500)" color="0x0000ff" encoding="csv">0.25,4.0
0.5625,2.0
0.8750000000000001,0.0
1.1875000000000002,4.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.875,0.0
0.875,4.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.3125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.25, 1.5]
Mean estimate of displayed sample: 0.875 ± 0.329 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (max:mean_relative_error)</formula>
			<comment>Mean Relative Error</comment>
			<result outcome="success" type="quantity" value="0.0513889 ± 0.0324661 (95% CI)" timestamp="2024-03-01 12:02:58 +0100">
				<details>0.0513889 ± 0.0324661 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: mean_relative_error" yaxis="probability density">
					<series title="density" type="b(0.031250)" color="0x0000ff" encoding="csv">0.0,15.999999999999995
0.031250000000000014,3.199999999999999
0.06250000000000003,6.399999999999998
0.09375000000000004,6.399999999999998
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.051388888888888894,0.0
0.051388888888888894,15.999999999999993
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.03125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0.125]
Mean estimate of displayed sample: 0.0514 ± 0.0325 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: mean_relative_error" yaxis="probability">
					<series title="probability" type="b(0.031250)" color="0x0000ff" encoding="csv">0.0,0.5
0.031250000000000014,0.1
0.06250000000000003,0.2
0.09375000000000004,0.2
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.051388888888888894,0.0
0.051388888888888894,0.5
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.03125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0.125]
Mean estimate of displayed sample: 0.0514 ± 0.0325 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: mean_relative_error" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0,0.0
0.031250000000000014,0.5
0.06250000000000003,0.6
0.09375000000000004,0.8
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.051388888888888894,0.0
0.051388888888888894,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.03125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0.125]
Mean estimate of displayed sample: 0.0514 ± 0.0325 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: mean_relative_error" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">0.0,0.30849710781876083
0.031250000000000014,0.8129139715526015
0.06250000000000003,0.8784477418801728
0.09375000000000004,0.9747892736731666
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">0.0,0.0
0.031250000000000014,0.18708602844739852
0.06250000000000003,0.26237807660694507
0.09375000000000004,0.44390453769235844
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0,0.0
0.031250000000000014,0.5
0.06250000000000003,0.6
0.09375000000000004,0.8
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.051388888888888894,0.0
0.051388888888888894,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.03125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0.125]
Mean estimate of displayed sample: 0.0514 ± 0.0325 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: mean_relative_error" yaxis="count">
					<series title="count" type="b(0.031250)" color="0x0000ff" encoding="csv">0.0,5.0
0.031250000000000014,1.0
0.06250000000000003,2.0
0.09375000000000004,2.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.051388888888888894,0.0
0.051388888888888894,5.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.03125, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0.125]
Mean estimate of displayed sample: 0.0514 ± 0.0325 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (max:worst_case_error)</formula>
			<comment/>
			<result outcome="success" type="quantity" value="≈ 2" timestamp="2024-03-01 12:02:58 +0100">
				<details>≈ 2</details>
				<plot title="Probability Density Distribution" xaxis="max: worst_case_error" yaxis="probability density">
					<series title="density" type="b(1.000000)" color="0x0000ff" encoding="csv">2.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">2.0,0.0
2.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 2]
Mean estimate of displayed sample: ≈ 2</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: worst_case_error" yaxis="probability">
					<series title="probability" type="b(1.000000)" color="0x0000ff" encoding="csv">2.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">2.0,0.0
2.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 2]
Mean estimate of displayed sample: ≈ 2</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: worst_case_error" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2.0,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">2.0,0.0
2.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 2]
Mean estimate of displayed sample: ≈ 2</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: worst_case_error" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">2.0,0.30849710781876083
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">2.0,0.0
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2.0,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">2.0,0.0
2.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 2]
Mean estimate of displayed sample: ≈ 2</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: worst_case_error" yaxis="count">
					<series title="count" type="b(1.000000)" color="0x0000ff" encoding="csv">2.0,10.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">2.0,0.0
2.0,10.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 2]
Mean estimate of displayed sample: ≈ 2</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (max:worst_case_relative_error)</formula>
			<comment/>
			<result outcome="success" type="quantity" value="0.222222 ± 2.77556e-17 (95% CI)" timestamp="2024-03-01 12:02:58 +0100">
				<details>0.222222 ± 2.77556e-17 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: worst_case_relative_error" yaxis="probability density">
					<series title="density" type="b(0.000000)" color="0x0000ff" encoding="csv">0.2222222222222222,4.503599627370496E15
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.22222222222222224,0.0
0.22222222222222224,4.503599627370496E15
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.2222222222222222099, 0.2222222222222222099]
Mean estimate of displayed sample: 0.2222222222222222376 ± 2.775557561562891351e-17 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: worst_case_relative_error" yaxis="probability">
					<series title="probability" type="b(0.000000)" color="0x0000ff" encoding="csv">0.2222222222222222,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.22222222222222224,0.0
0.22222222222222224,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.2222222222222222099, 0.2222222222222222099]
Mean estimate of displayed sample: 0.2222222222222222376 ± 2.775557561562891351e-17 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: worst_case_relative_error" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.2222222222222222,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.22222222222222224,0.0
0.22222222222222224,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.2222222222222222099, 0.2222222222222222099]
Mean estimate of displayed sample: 0.2222222222222222376 ± 2.775557561562891351e-17 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: worst_case_relative_error" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">0.2222222222222222,0.30849710781876083
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">0.2222222222222222,0.0
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.2222222222222222,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.22222222222222224,0.0
0.22222222222222224,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.2222222222222222099, 0.2222222222222222099]
Mean estimate of displayed sample: 0.2222222222222222376 ± 2.775557561562891351e-17 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: worst_case_relative_error" yaxis="count">
					<series title="count" type="b(0.000000)" color="0x0000ff" encoding="csv">0.2222222222222222,10.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.22222222222222224,0.0
0.22222222222222224,10.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0.2222222222222222099, 0.2222222222222222099]
Mean estimate of displayed sample: 0.2222222222222222376 ± 2.775557561562891351e-17 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (max:hamming_distance)</formula>
			<comment/>
			<result outcome="success" type="quantity" value="6.4 ± 2.7644 (95% CI)" timestamp="2024-03-01 12:02:58 +0100">
				<details>6.4 ± 2.7644 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: hamming_distance" yaxis="probability density">
					<series title="density" type="b(3.000000)" color="0x0000ff" encoding="csv">2.0,0.16666666666666666
5.0,0.06666666666666667
8.0,0.03333333333333333
11.0,0.03333333333333333
14.0,0.03333333333333333
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">6.4,0.0
6.4,0.16666666666666666
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=3, bucket count=5
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 14]
Mean estimate of displayed sample: 6.4 ± 2.76 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: hamming_distance" yaxis="probability">
					<series title="probability" type="b(3.000000)" color="0x0000ff" encoding="csv">2.0,0.5
5.0,0.2
8.0,0.1
11.0,0.1
14.0,0.1
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">6.4,0.0
6.4,0.5
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=3, bucket count=5
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 14]
Mean estimate of displayed sample: 6.4 ± 2.76 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: hamming_distance" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2.0,0.0
5.0,0.5
8.0,0.7
11.0,0.8
14.0,0.9
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">6.4,0.0
6.4,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=3, bucket count=5
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 14]
Mean estimate of displayed sample: 6.4 ± 2.76 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: hamming_distance" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">2.0,0.30849710781876083
5.0,0.8129139715526015
8.0,0.9332604888222655
11.0,0.9747892736731666
14.0,0.9974714214555382
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">2.0,0.0
5.0,0.18708602844739852
8.0,0.3475471499400027
11.0,0.44390453769235844
14.0,0.5549838829718046
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">2.0,0.0
5.0,0.5
8.0,0.7
11.0,0.8
14.0,0.9
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">6.4,0.0
6.4,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=3, bucket count=5
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 14]
Mean estimate of displayed sample: 6.4 ± 2.76 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: hamming_distance" yaxis="count">
					<series title="count" type="b(3.000000)" color="0x0000ff" encoding="csv">2.0,5.0
5.0,2.0
8.0,1.0
11.0,1.0
14.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">6.4,0.0
6.4,5.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=3, bucket count=5
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2, 14]
Mean estimate of displayed sample: 6.4 ± 2.76 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (min:hamming_distance)</formula>
			<comment/>
			<result outcome="success" type="quantity" value="≈ 0" timestamp="2024-03-01 12:02:58 +0100">
				<details>≈ 0</details>
				<plot title="Probability Density Distribution" xaxis="min: hamming_distance" yaxis="probability density">
					<series title="density" type="b(1.000000)" color="0x0000ff" encoding="csv">0.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="min: hamming_distance" yaxis="probability">
					<series title="probability" type="b(1.000000)" color="0x0000ff" encoding="csv">0.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="min: hamming_distance" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="min: hamming_distance" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">0.0,0.30849710781876083
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">0.0,0.0
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="min: hamming_distance" yaxis="count">
					<series title="count" type="b(1.000000)" color="0x0000ff" encoding="csv">0.0,10.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,10.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
			</result>
		</query>
	</queries>
</nta>

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>/* Feel free to cite and/or read details to the model using:
  STRNADEL Josef. Statistical Model Checking of Approximate Circuits: Challenges and Opportunities. In: Proceedings of the 2020 Design, Automation &amp; Test in Europe Conference &amp; Exhibition (DATE). Grenoble: IEEE Computer Society, 2020, pp. 1574-1577. ISBN 978-3-9819263-4-7. Available from: https://ieeexplore.ieee.org/document/9116207 and https://www.fit.vut.cz/research/publication/12055/
 */
const int MAX_INT = 16384;

double dif_count = 0;
double res_count = 0;
int[0, MAX_INT] unique_count = 0;

int[0, MAX_INT] comb_input;
int[-1,MAX_INT] unique_inputs[MAX_INT];
double coverage_percentage = 0.0;

double out_sum_all_acc;
double out_sum_all_approx;
double out_sum_all_diff;
double out_sum_all_diff_squared;

double out_sum_relative;

int hamming_distance = 0;
int max_hamming_distance = 0;
double error_prob = 0.0;
double mean_abs_error = 0.0;
double mean_squared_error = 0.0;
double mean_relative_error = 0.0;
double worst_case_error = 0.0;
double worst_case_relative_error = 0.0;
double worst_delay = 0.0;
double current_delay = 0.0;
double delay_sum = 0.0;
double delay_avg = 0.0;

double rnd;

broadcast chan change[1000];
int outcnt=0;

double bit_flips = 0.0;
double avg_flips_per_res = 0.0;
double bit_flips_sum = 0.0;
double max_bit_flips = 0.0;

const int NOPS = 9;
typedef int[0,NOPS-1] tOp;

int input_a;
int input_b;

const tOp OP_NOT = 0;
const tOp OP_DLY = 1;
const tOp OP_AND = 2;
const tOp OP_NAND = 3;
const tOp OP_OR = 4;
const tOp OP_NOR = 5;
const tOp OP_XOR = 6;
const tOp OP_XNOR = 7;
const tOp OP_SET = 8;

const int NCOM = 211;
tOp tbl_op[NCOM] = {2, 2, 2, 2, 2, 2, 2, 6, 2, 6, 2, 6, 2, 2, 2, 2, 2, 2, 2, 6, 2, 8, 2, 6, 2, 2, 6, 6, 6, 2, 2, 6, 6, 6, 2, 2, 6, 4, 2, 2, 2, 2, 2, 2, 2, 2, 6, 2, 2, 6, 6, 6, 2, 2, 6, 6, 6, 2, 2, 6, 6, 6, 2, 2, 6, 4, 6, 2, 2, 6, 4, 2, 2, 2, 2, 2, 2, 2, 6, 2, 2, 6, 6, 6, 2, 2, 6, 6, 6, 2, 2, 6, 4, 6, 2, 2, 6, 6, 6, 2, 2, 6, 6, 6, 2, 2, 6, 6, 2, 2, 2, 2, 2, 2, 2, 6, 2, 2, 6, 4, 6, 2, 2, 6, 4, 6, 2, 2, 6, 4, 6, 2, 2, 6, 4, 6, 2, 2, 6, 6, 6, 2, 2, 6, 4, 2, 2, 2, 2, 2, 2, 2, 6, 2, 2, 6, 6, 6, 2, 2, 6, 4, 6, 2, 2, 6, 4, 6, 2, 2, 6, 6, 6, 2, 2, 6, 4, 6, 2, 2, 6, 4, 6, 2, 6, 2, 2, 6, 4, 6, 2, 2, 6, 4, 6, 2, 2, 6, 4, 6, 2, 2, 6, 4, 6, 2, 2, 6, 6, 2, 1};

int duration(tOp op){  
    int duration=0;
    if(op==OP_NOT) duration=3;
    if(op==OP_DLY) duration=10;
    if(op==OP_AND) duration=10;
    if(op==OP_NAND) duration=13;
    if(op==OP_OR) duration=10;
    if(op==OP_NOR) duration=13;
    if(op==OP_XOR) duration=20;
    if(op==OP_XNOR) duration=23;
    if(op==OP_SET) duration=0;
    return duration;
}

broadcast chan go, pwrUp;

const double COVERAGE_RATIO = 100.0;
const int DLY_ZERO = 0;

const int TBL_PWR2[31] = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824};

broadcast chan update;
broadcast chan cmpDone;

const int MAX_BITS = 1024;
bool bits[MAX_BITS];
bool difference=false;
bool dif2=false;
int diffctrl=0;
int[-MAX_INT, MAX_INT] err_magn_v;    
double err_magn_r;

int[0, MAX_INT] bitsCovered;
double inCoverage;

bool allCovered=false;

const int NIB_MUL2 = 14;
const int NOB_MUL2 = 14;
const int NTV_MUL2 = TBL_PWR2[NIB_MUL2]; 
const int DLY_MUL2 = 500;                 

/* ===------------------------  ------------------------==== */
int getMasked(int w, int offset, int[0,MAX_INT] data){ 
    int mask = (TBL_PWR2[w]-1);    
   return (data &amp; (mask &lt;&lt; offset)) &gt;&gt; offset;     
}    
bool getBit(int pos, int[0,MAX_INT] data){ return getMasked(1, pos, data); }

const int NIB_ANY = 14;
const int NOB_ANY = 14;
const int NTV_ANY = TBL_PWR2[NIB_ANY]; 
const int DLY_ANY = 20;                 
bool tbl_acc_any[TBL_PWR2[NIB_ANY]][NIB_ANY+NOB_ANY];
//
const int NFUN = 1;
typedef int[0,NFUN-1] tFun;
//-------
const tFun F_MUL = 0;
//
void fill_tbl_acc_any(int win, int wout, tFun f, int fdly){ 
    int[0,MAX_INT] i;
    int[0,MAX_INT] result;
    int j, k, op0, op1;
    for(i=0; i&lt;TBL_PWR2[win]; i++){    
        for(j=0; j&lt;win; j++){
            tbl_acc_any[i][j] = getBit(j,i);
        }
        if(f==F_MUL){
            op0 = getMasked(win/2, 0, i);
            op1 = getMasked(win/2, win/2, i);
            result = op0*op1;
        }
        else { result = 0; }
        for(k=0; k&lt;wout; k++){
            tbl_acc_any[i][win+(wout-k-1)] = getBit(k,result);
        }
    }
}

/* ===------------------------  ------------------------==== */
const int NPI = NIB_MUL2;    
const int NPO = NOB_MUL2;   
//
const int NTV = NTV_MUL2; 
const int DLY = DLY_MUL2;
//
const int PIxy[NPI] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};
const int POx[NPO] = {14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27};
//
const int POy[NPO] = {28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41};

int[0, 1073741824] PWR2_NPI = TBL_PWR2[NPI];
/* ===------------------------  ------------------------==== */

const int MAX_INNER_NODES = 1000;
typedef struct {
    int dly;
    bool flag;
} sNode;
sNode nodes[MAX_INNER_NODES];

const int MAX_INNER_GATES = 1000;
typedef struct {
    bool active;
    int in0;
    int in1;
    int inAvail;
    int out0;
    int dly;
    int depth;
    bool flag;
} sGate;
sGate gates[MAX_INNER_GATES];

int[0, 1073741824] approxCircNodes = 0;
int[0, 1073741824] approxCircGates = 0;
int approxCircDly=0;
int[0, 1073741824] approxCircDepth=0;


bool outEq(){
    bool same=true;
    int i;
    hamming_distance = 0;
    for(i=0; i&lt;NPO; i++){
        if((POx[i]&gt;=0) &amp;&amp; (POy[i]&gt;=0)){
            if(bits[POx[i]] != bits[POy[i]]){
                hamming_distance++;
                same = false;
            }
        }
    }
    
    if (same == false) {
        dif_count = dif_count + 1;
    }

    if (hamming_distance &gt; max_hamming_distance) {
        max_hamming_distance = hamming_distance;
    }

    res_count = res_count + 1;

    return same;
}

double EP() {
    //error probability
    //number of different outputs divided by number of results
    double ret = dif_count / res_count;

    return ret;
}

double MAE() {
    //mean absolute error
    //sum of differences (approx. vs acc.) divided by number of results
    double ret = out_sum_all_diff / res_count;

    return ret;
}

double MSE() {
    //mean squared error
    //sum of squared differences divided by number of results
    double ret = out_sum_all_diff_squared / res_count;

    return ret;
}

double MRE() {
    //mean relative error
    //mean error in relation to size of accurate output
    double ret = out_sum_relative / res_count;

    return ret;
}

double avg_bitflips() {
    //total number of bit flips divided by number of results
    double ret = bit_flips_sum / res_count;

    return ret;
}

void calc_metrics() {
    error_prob = EP();
    mean_abs_error = MAE();
    mean_squared_error = MSE();
    mean_relative_error = MRE();
    avg_flips_per_res = avg_bitflips();
}

int[0, MAX_INT] res_acc=0;
int[0, MAX_INT] res_approx=0;

void diff(){
    int i;
    double res_dif;
    double relative_res_dif;
    res_acc = 0;
    res_approx = 0;

    difference = !outEq();

     for(i=0; i&lt;=NPO-1; i++){                                       
        res_acc += bits[i+NPI]*TBL_PWR2[i];
        if(POy[i]&gt;=0) res_approx += bits[i+NPI+NPO]*TBL_PWR2[i];    
    }
    out_sum_all_acc = out_sum_all_acc + res_acc;
    out_sum_all_approx = out_sum_all_approx + res_approx;

    out_sum_all_diff = fabs(out_sum_all_acc - out_sum_all_approx);
    out_sum_all_diff_squared = out_sum_all_diff_squared + pow(abs(res_approx-res_acc),2);
    out_sum_relative = out_sum_relative + (abs(res_approx-res_acc) / fmax(1.0, 1.0*res_acc));

    res_dif = 1.0 * abs(res_approx - res_acc);
    if (res_dif &gt; worst_case_error) {
        worst_case_error = res_dif;
    }

    relative_res_dif = abs(res_approx - res_acc) / fmax(1.0, 1.0*res_acc);
    if (relative_res_dif &gt; worst_case_relative_error) {
        worst_case_relative_error = relative_res_dif;
    }

    err_magn_v = res_acc - res_approx;
    if(res_acc!=0) err_magn_r = 1-((1.0*res_approx)/(1.0*res_acc));

    if(max_bit_flips &lt; bit_flips) {
        max_bit_flips = bit_flips;
    }

    bit_flips = 0;

    calc_metrics();
}
</declaration>
<template>
<name>tmul2any</name>
<parameter>const int &amp;PIxy[NPI], const int &amp;POx[NPO], bool &amp;ttbl[TBL_PWR2[NIB_ANY]][NIB_ANY+NOB_ANY], const int  dly</parameter>
<declaration>
clock x;

int getIdx(int i){
    int idx=-1;

    if(i &lt; NPI) {
        idx = PIxy[i];
    }
    else {
        idx = POx[i-NPI];
    }

    return idx;
}


int[0, MAX_INT] bin2dec()
{
    int[0, MAX_INT] result=0;
    int i;
    for(i=0; i&lt;NIB_MUL2; i++){
        result += bits[getIdx(i)]*TBL_PWR2[i];
    }

    return result;
}


int getOut(){
    int res, i;
    for(i=NIB_MUL2; i&lt;NIB_MUL2+NOB_MUL2; i++){
        res += bits[getIdx(i)]*TBL_PWR2[i-NIB_MUL2];
    }
    return res;    
}

void f(){
    if(POx[13]>=0) bits[POx[13]]=ttbl[bin2dec()][14];
    if(POx[12]>=0) bits[POx[12]]=ttbl[bin2dec()][15];
    if(POx[11]>=0) bits[POx[11]]=ttbl[bin2dec()][16];
    if(POx[10]>=0) bits[POx[10]]=ttbl[bin2dec()][17];
    if(POx[9]>=0) bits[POx[9]]=ttbl[bin2dec()][18];
    if(POx[8]>=0) bits[POx[8]]=ttbl[bin2dec()][19];
    if(POx[7]>=0) bits[POx[7]]=ttbl[bin2dec()][20];
    if(POx[6]>=0) bits[POx[6]]=ttbl[bin2dec()][21];
    if(POx[5]>=0) bits[POx[5]]=ttbl[bin2dec()][22];
    if(POx[4]>=0) bits[POx[4]]=ttbl[bin2dec()][23];
    if(POx[3]>=0) bits[POx[3]]=ttbl[bin2dec()][24];
    if(POx[2]>=0) bits[POx[2]]=ttbl[bin2dec()][25];
    if(POx[1]>=0) bits[POx[1]]=ttbl[bin2dec()][26];
    if(POx[0]>=0) bits[POx[0]]=ttbl[bin2dec()][27];

    diffctrl++;
}

void inits(){
    fill_tbl_acc_any(NIB_ANY, NOB_ANY, F_MUL, dly);
}

</declaration>
<location id="id0" x="-170" y="0">
</location>
<location id="id1" x="0" y="0">
	<label kind="invariant" x="-25" y="17">x&lt;=dly</label>
</location>
<location id="id2" x="-374" y="0">
	<committed/>
</location>
<init ref="id2"/>
<transition>
	<source ref="id2"/>
	<target ref="id0"/>
	<label kind="assignment" x="-297" y="0">inits()</label>
</transition>
<transition>
	<source ref="id1"/>
	<target ref="id0"/>
	<label kind="guard" x="-152" y="-136">x==dly</label>
	<label kind="assignment" x="17" y="-59">f()</label>
	<nail x="0" y="-102"/>
	<nail x="-170" y="-102"/>
</transition>
<transition>
	<source ref="id0"/>
	<target ref="id1"/>
	<label kind="synchronisation" x="-110" y="-25">update?</label>
	<label kind="assignment" x="-93" y="0">x=0</label>
</transition>
</template>
<template>
<name>tmul2_tb_exhaust</name>
<parameter>const int &amp;PIxy[NPI], const int dly, const double covratio</parameter>
<declaration>
clock x;
clock tcover;
int input=0;
int nsame=0, inSame=0;
double rCover;

bool inCoverSet[NTV];

int covered()
{
    int cnt=0;

    for(i: int[0,NTV-1])
    {
        if(inCoverSet[i]) {
            cnt++;
        }
    }

    bitsCovered=cnt;

    return cnt;
}

int bin2dec()
{
    int result=0, i;
    for(i=0; i&lt;NPI; i++){
        result += bits[i]*TBL_PWR2[i];
    }

    return result;
}


bool inCovered()
{
  return forall (i : int[0,NTV-1]) inCoverSet[i];    
}



void f(){
    bits[PIxy[0]] = getBit(0, input);
    bits[PIxy[1]] = getBit(1, input);
    bits[PIxy[2]] = getBit(2, input);
    bits[PIxy[3]] = getBit(3, input);
    bits[PIxy[4]] = getBit(4, input);
    bits[PIxy[5]] = getBit(5, input);
    bits[PIxy[6]] = getBit(6, input);

    if(inCoverSet[input]) { inSame = -1*input; nsame++; }
    else inSame = input;
    inCoverSet[input] = true;
    input = (input+1) % NTV;
    covered();

    rCover = 100.0*bitsCovered / NTV; 
}

void inits(){
    int i;
    for(i:int[0,MAX_INNER_NODES-1]){ nodes[i].flag=false; }
    for(i:int[0,NPI-1]){
        if(exists(j:int[0,NPI-1]) PIxy[j]==i){ 
            nodes[i].flag=true;    
            nodes[i].dly=0;        
        }
        approxCircNodes++;
    }
    for(i=0; i&lt;approxCircGates; i++) gates[i].flag=false;    
    while(exists(i:int[0,MAX_INNER_GATES-1]) (gates[i].flag==false &amp;&amp; i&lt;approxCircGates)){
        approxCircDepth++;
        for(i=0; i&lt;approxCircGates; i++) {
            if(!gates[i].flag &amp;&amp; nodes[gates[i].in0].flag &amp;&amp; nodes[gates[i].in1].flag){  
                nodes[gates[i].out0].dly = (nodes[gates[i].in0].dly&gt;nodes[gates[i].in1].dly?nodes[gates[i].in0].dly:nodes[gates[i].in1].dly) + duration(tbl_op[i]);
                nodes[gates[i].out0].flag=true;
                approxCircNodes++;
                if(nodes[gates[i].out0].dly&lt;approxCircDly){ approxCircDly=nodes[gates[i].out0].dly; }

                gates[i].flag=true;   
            }  
        }
    }
}
</declaration>
		<location id="id3" x="-136" y="0">
			<name x="-153" y="8">apply</name>
			<committed/>
		</location>
		<location id="id4" x="-374" y="0">
			<name x="-382" y="8">get</name>
			<committed/>
		</location>
		<location id="id5" x="34" y="0">
			<name x="17" y="8">done</name>
			<label kind="invariant" x="0" y="-34">tcover'==0</label>
		</location>
		<location id="id6" x="-246" y="-102">
			<name x="-255" y="-136">wait</name>
		</location>
		<location id="id7" x="-510" y="0">
			<urgent/>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="assignment" x="-459" y="0">inits()</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id6"/>
			<label kind="guard" x="-221" y="-93">!inCovered()</label>
			<nail x="-136" y="-102"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="guard" x="-93" y="-25">inCovered()</label>
			<label kind="assignment" x="-110" y="0">allCovered=true,
x=0</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-289" y="-25">update!</label>
			<label kind="assignment" x="-280" y="0">f(), x=0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-365" y="-93">cmpDone?</label>
			<nail x="-374" y="-102"/>
		</transition>
	</template>
<template>
	<name>tmul2_tb_nondet</name>
	<parameter>const int range_min, const int range_max, const int dly, const double covratio</parameter>
	<declaration>clock x;
clock tcover;
int input=0;
int nsame=0, inSame=0;
double rCover;
int idx=0;

bool inCoverSet[NTV];

int covered()
{
    int cnt=0;

    for(i: int[0,NTV-1])
    {
        if(inCoverSet[i]) {
            cnt++;
        }
    }

    bitsCovered=cnt;

    return cnt;
}

int bin2dec()
{
    int[0, 1073741824] result=0;
	int i;
    for(i=0; i&lt;NPI; i++){
        result += bits[i]*TBL_PWR2[i];
    }

    return result;
}


bool inCovered()
{
  return forall (i : int[0,NTV-1]) inCoverSet[i];    
}

void f(int i){
    input = bin2dec();
   if(inCoverSet[input]) { inSame = -1*input; nsame++; }
  else inSame = input;
   inCoverSet[bin2dec()] = true;
    covered();

    rCover = 100.0*bitsCovered / NTV; 

    inCoverage = 0.0;
}

void inits(){
    int i;
    for(i:int[0,MAX_INNER_NODES-1]){ nodes[i].flag=false; }
    for(i:int[0,NPI-1]){
        if(exists(j:int[0,NPI-1]) PIxy[j]==i){ 
            nodes[i].flag=true;
            nodes[i].dly=0;      
        }
        approxCircNodes++;
    }
    for(i=0; i&lt;approxCircGates; i++) gates[i].flag=false;    
    while(exists(i:int[0,MAX_INNER_GATES-1]) (gates[i].flag==false &amp;&amp; i&lt;approxCircGates)){
        approxCircDepth++;
        for(i=0; i&lt;approxCircGates; i++) {
            if(!gates[i].flag &amp;&amp; nodes[gates[i].in0].flag &amp;&amp; nodes[gates[i].in1].flag){  
                nodes[gates[i].out0].dly = (nodes[gates[i].in0].dly&gt;nodes[gates[i].in1].dly?nodes[gates[i].in0].dly:nodes[gates[i].in1].dly) + duration(tbl_op[i]);
                nodes[gates[i].out0].flag=true;
                approxCircNodes++;
                if(nodes[gates[i].out0].dly&gt;approxCircDly){ approxCircDly=nodes[gates[i].out0].dly; }

                gates[i].flag=true;
            }  
        }
    }
}</declaration>
		<location id="id8" x="-119" y="-102">
			<name x="-129" y="-136">wait</name>
		</location>
		<location id="id9" x="-246" y="0">
			<name x="-255" y="8">get</name>
			<committed/>
		</location>
		<location id="id10" x="170" y="0">
			<name x="153" y="8">done</name>
			<label kind="invariant" x="136" y="-34">tcover'==0</label>
		</location>
		<location id="id11" x="0" y="0">
			<name x="-17" y="8">apply</name>
			<committed/>
		</location>
		<location id="id12" x="-246" y="-102">
			<committed/>
		</location>
		<location id="id13" x="-374" y="0">
			<urgent/>
		</location>
		<init ref="id13"/>
		<transition>
			<source ref="id13"/>
			<target ref="id9"/>
			<label kind="assignment" x="-331" y="0">inits()</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id9"/>
			<label kind="select" x="-238" y="-68">i: int[range_min, range_max]</label>
			<label kind="assignment" x="-238" y="-51">bits[i] ^= 1, idx=i</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-212" y="-102">cmpDone?</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id8"/>
			<label kind="guard" x="-93" y="-93">!inCovered()</label>
			<nail x="0" y="-102"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-153" y="-25">update!</label>
			<label kind="assignment" x="-144" y="0">f(idx)</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="guard" x="42" y="-25">inCovered()</label>
			<label kind="assignment" x="34" y="0">allCovered=true</label>
		</transition>
	</template>
	<template>
		<name>tmul2_tb_random</name>
		<parameter>const int dly, const double covratio</parameter>
		<declaration>clock x;
clock tcover;
int input=0;
int[0, 16777216] nsame=0;
int[0, 16777216] inSame=0;
double rCover;
int idx=0;

bool inCoverSet[NTV];

int[0, MAX_INT] covered()
{
    int[0, MAX_INT] cnt=0;

    for(i: int[0,NTV-1])
    {
        if(inCoverSet[i]) {
            cnt++;
        }
    }

    bitsCovered=cnt;

    return cnt;
}

int[0, MAX_INT] bin2dec()
{
    int[0, MAX_INT] result=0;
	int i;
    for(i=0; i&lt;NPI; i++){
        result += bits[i]*TBL_PWR2[i];
    }

    return result;
}


bool inCovered()
{
  return forall (i : int[0,NTV-1]) inCoverSet[i];    
}

int[0, MAX_INT] combine_inputs(bool &amp;in1_binary[NPI/2], bool &amp;in2_binary[NPI/2]) {
    //Concatenate both binary representations of inputs and then convert that to dec
    bool both_binary[NPI];
    int[0, MAX_INT] ret = 0;

    //concatenate both inputs
    for(i:int[0,(NPI/2) - 1]) {
        both_binary[i] = in1_binary[i];
        both_binary[i+NPI/2] = in2_binary[i];
    }
    
    //convert that result to decimal number
    for(i:int[0,NPI-1]) {
        ret += both_binary[i] * TBL_PWR2[i];
    }

    return ret;
}

void unique_input_insert(int[0, MAX_INT] input) {
    for(i:int[0,MAX_INT-1]) {
        if(unique_inputs[i] == -1) {
            unique_inputs[i] = input;
            return;
        }
    }
}

bool input_covered(int[0, MAX_INT] input) {
    //if the input is already in the unique_inputs array return True
    //else return False
    return exists (i : int[0,MAX_INT-1]) input == unique_inputs[i];
}

void dec_to_bin(int[0,MAX_INT] number, bool &amp;number_binary[NPI/2]) {
    //init all bits to 0
    int j = 0;
    for(i:int[0,(NPI/2 - 1)]) {
        number_binary[i] = 0;
    }

    if(number == 0) { 
        return; 
    }

    while(number &gt; 0) {
        number_binary[j] = number % 2;
        number /= 2;
        j++;
    }
}

int[0, MAX_INT] check_limits(int[-MAX_INT, MAX_INT] number, int[0, MAX_INT] min, int[0, MAX_INT] max) {
    if(number &lt; min) number = min;
    if(number &gt; max) number = max;
    return number;
}

void f(int i){
    bool a_binary[NPI/2];
    bool b_binary[NPI/2];

    int[0, MAX_INT] imax = fint(exp2(NPI/2));

    input_a = 0;
    input_b = 0;

    current_delay = 0.0; //reset delay counter
    if(res_count &gt; 0) { delay_avg = delay_sum / res_count; }

    //Both inputs uniform distribution
    input_a = fint(random(imax));

    input_b = fint(random(imax));

    input_a = check_limits(input_a, 0, imax-1);
    input_b = check_limits(input_b, 0, imax-1);

    dec_to_bin(input_a, a_binary);
    dec_to_bin(input_b, b_binary);

    for(i:int[0,NPI/2 - 1]) {
        bits[i] = a_binary[i];
        bits[i+NPI/2] = b_binary[i];
    }

    //check if this bit combination has already been used
    comb_input = combine_inputs(a_binary, b_binary);
    if(not input_covered(comb_input)) {
        unique_input_insert(comb_input);
        unique_count++;

        coverage_percentage = (1.0*unique_count / MAX_INT) * 100;
    }

    if(inCoverSet[input]) { inSame = -1*input; nsame++; }
    else inSame = input;
    inCoverSet[bin2dec()] = true;
    covered();

    rCover = 100.0*bitsCovered / NTV; 

    inCoverage = 0.0;
}

void inits(){
    int i;

    //set all elements of unique_inputs array to -1
    //eventually they shall all be replaced by different input combos
    for(i:int[0,MAX_INT-1]) { unique_inputs[i] = -1; }

    for(i:int[0,MAX_INNER_NODES-1]){ nodes[i].flag=false; }
    for(i:int[0,NPI-1]){
        if(exists(j:int[0,NPI-1]) PIxy[j]==i){ 
            nodes[i].flag=true;    
            nodes[i].dly=0;        
        }
        approxCircNodes++;
    }
    for(i=0; i&lt;approxCircGates; i++) gates[i].flag=false;
    while(exists(i:int[0,MAX_INNER_GATES-1]) (gates[i].flag==false &amp;&amp; i&lt;approxCircGates)){
        approxCircDepth++;
        for(i=0; i&lt;approxCircGates; i++) {
            if(!gates[i].flag &amp;&amp; nodes[gates[i].in0].flag &amp;&amp; nodes[gates[i].in1].flag){  
                nodes[gates[i].out0].dly = (nodes[gates[i].in0].dly&gt;nodes[gates[i].in1].dly?nodes[gates[i].in0].dly:nodes[gates[i].in1].dly) + duration(tbl_op[i]);
                nodes[gates[i].out0].flag=true;
                approxCircNodes++;
                if(nodes[gates[i].out0].dly&gt;approxCircDly){ approxCircDly=nodes[gates[i].out0].dly; }

                gates[i].flag=true; 
            }  
        }
    }
}</declaration>
		<location id="id14" x="-119" y="-102">
			<name x="-129" y="-136">wait</name>
		</location>
		<location id="id15" x="-246" y="0">
			<name x="-255" y="8">get</name>
			<committed/>
		</location>
		<location id="id16" x="170" y="0">
			<name x="153" y="8">done</name>
			<label kind="invariant" x="136" y="-34">tcover'==0</label>
		</location>
		<location id="id17" x="0" y="0">
			<name x="-17" y="8">apply</name>
			<committed/>
		</location>
		<location id="id18" x="-246" y="-102">
			<committed/>
		</location>
		<location id="id19" x="-374" y="0">
			<urgent/>
		</location>
		<init ref="id19"/>
		<transition>
			<source ref="id19"/>
			<target ref="id15"/>
			<label kind="assignment" x="-331" y="0">inits()</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id15"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="-212" y="-102">cmpDone?</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id14"/>
			<label kind="guard" x="-93" y="-93">!inCovered()</label>
			<nail x="0" y="-102"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-153" y="-25">update!</label>
			<label kind="assignment" x="-144" y="0">f(idx)</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="guard" x="42" y="-25">inCovered()</label>
			<label kind="assignment" x="34" y="0">allCovered=true</label>
		</transition>
	</template>
<template>
		<name>syncPrimary</name>
		<declaration>int idx;</declaration>
		<location id="id20" x="-748" y="-306">
		</location>
		<location id="id21" x="-646" y="-306">
			<committed/>
		</location>
		<location id="id22" x="-510" y="-306">
			<committed/>
		</location>
		<init ref="id20"/>
		<transition>
			<source ref="id22"/>
			<target ref="id20"/>
			<label kind="guard" x="-646" y="-399">idx&gt;=NPI</label>
			<nail x="-510" y="-374"/>
			<nail x="-748" y="-374"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="guard" x="-595" y="-323">idx&lt;NPI</label>
			<nail x="-578" y="-272"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-612" y="-340">change[idx]!</label>
			<label kind="assignment" x="-629" y="-280">idx++</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-730" y="-323">update?</label>
			<label kind="assignment" x="-714" y="-306">idx=0</label>
		</transition>
	</template>
<template>
		<name>eval_diff</name>
		<parameter>const int dly</parameter>
		<declaration>clock x;</declaration>
		<location id="id23" x="-238" y="0">
			<label kind="invariant" x="-297" y="-8">x&lt;=dly</label>
		</location>
		<location id="id24" x="-102" y="0">
			<committed/>
		</location>
		<init ref="id23"/>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="-178" y="51">cmpDone!</label>
			<label kind="assignment" x="-246" y="110">outcnt=0, diffctrl=0, x=0</label>
			<nail x="-102" y="110"/>
			<nail x="-238" y="110"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id23"/>
			<label kind="guard" x="-331" y="-93">diffctrl&lt;2
&amp;&amp; x==dly</label>
			<label kind="assignment" x="-289" y="-42">x=0</label>
			<nail x="-263" y="-76"/>
			<nail x="-229" y="-76"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="guard" x="-204" y="0">diffctrl==2</label>
			<label kind="assignment" x="-212" y="-68">err_magn_v=0,
err_magn_r=0.0,
diff()</label>
		</transition>
	</template>
<template>
		<name>gate2</name>
		<parameter>const int id, const int a0, const int a1, const int y0, broadcast chan &amp;cin0, broadcast chan &amp;cin1, broadcast chan &amp;cout0</parameter>
		<declaration>clock x;

void inits(){
    int i;

    // collect info about the approx.circuit topology 
    gates[id].active = true;
    gates[id].in0 = a0; 
    gates[id].in1 = a1; 
    gates[id].inAvail = 0; 
    gates[id].out0 = y0; 
    gates[id].dly = duration(tbl_op[id]);
    gates[id].depth = -1;
    gates[id].flag = false;

    approxCircGates++;    
}

void outGen(tOp op){
 //   outSync(y0);

	bool original_bit = bits[y0];

    if(op == OP_AND){
        bits[y0] = bits[a0] &amp; bits[a1];        
    }
    else if(op == OP_NAND){
        bits[y0] = not (bits[a0] &amp; bits[a1]);        
    }
    else if(op == OP_OR){
        bits[y0] = bits[a0] | bits[a1];        
    }
    else if(op == OP_NOR){
        bits[y0] = not (bits[a0] | bits[a1]);        
    }
    else if(op == OP_XOR){
        bits[y0] = (bits[a0] != bits[a1]);        
    }
    else if(op == OP_XNOR){
        bits[y0] = (bits[a0] == bits[a1]);
    }
    else if(op == OP_SET){
        //not really a gate but should be fine
        bits[y0] = bits[a0];
    }
    else {    // unsupported operation
    }

	if(original_bit != bits[y0]) {
		bit_flips = bit_flips + 1;
        bit_flips_sum = bit_flips_sum + 1;
	}

    if(id==2){ 
        if(diffctrl&lt;2) diffctrl++;
    }

    //delay between input and output
    current_delay = current_delay + duration(tbl_op[id]);
    if(current_delay &gt; worst_delay) {
        worst_delay = current_delay;
    }

    delay_sum = delay_sum + duration(tbl_op[id]); 
}
</declaration>
		<location id="id25" x="-170" y="0">
		</location>
		<location id="id26" x="0" y="0">
			<label kind="invariant" x="-17" y="17">x&lt;=duration(tbl_op[id])</label>
		</location>
		<location id="id27" x="-272" y="0">
			<committed/>
		</location>
		<init ref="id27"/>
		<transition>
			<source ref="id27"/>
			<target ref="id25"/>
			<label kind="assignment" x="-238" y="0">inits()</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-144" y="0">cin1?</label>
			<label kind="assignment" x="-76" y="0">x=0</label>
			<nail x="-85" y="0"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="guard" x="-110" y="-127">x==duration(tbl_op[id])</label>
			<label kind="synchronisation" x="8" y="-68">cout0!</label>
			<label kind="assignment" x="-144" y="-102">outGen(tbl_op[id])</label>
			<nail x="0" y="-102"/>
			<nail x="-170" y="-102"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-136" y="-42">cin0?</label>
			<label kind="assignment" x="-59" y="-42">x=0</label>
			<nail x="-85" y="-34"/>
		</transition>
	</template>
<system>
// Place template instantiations here.

synPri = syncPrimary();
mul2A = tmul2any(PIxy, POx, tbl_acc_any, DLY_MUL2);

//mul2Atb = tmul2_tb_exhaust(PIxy, DLY_MUL2, COVERAGE_RATIO);
//mul2Atb = tmul2_tb_nondet(PIxy[0], PIxy[6], DLY_MUL2, COVERAGE_RATIO);
mul2Atb = tmul2_tb_random(DLY_MUL2, COVERAGE_RATIO);

ediff = eval_diff(5);

//gates
g118 = gate2(0, PIxy[4], PIxy[7], 118, change[4], change[7], change[118]);
g119 = gate2(1, PIxy[5], PIxy[7], 119, change[5], change[7], change[119]);
g120 = gate2(2, PIxy[6], PIxy[7], 120, change[6], change[7], change[120]);
g124 = gate2(3, PIxy[3], PIxy[8], 124, change[3], change[8], change[124]);
g125 = gate2(4, PIxy[4], PIxy[8], 125, change[4], change[8], change[125]);
g126 = gate2(5, PIxy[5], PIxy[8], 126, change[5], change[8], change[126]);
g127 = gate2(6, PIxy[6], PIxy[8], 127, change[6], change[8], change[127]);
g134 = gate2(7, 118, 124, 134, change[118], change[124], change[134]);
g135 = gate2(8, 118, 124, 135, change[118], change[124], change[135]);
g136 = gate2(9, 119, 125, 136, change[119], change[125], change[136]);
g137 = gate2(10, 119, 125, 137, change[119], change[125], change[137]);
g138 = gate2(11, 120, 126, 138, change[120], change[126], change[138]);
g139 = gate2(12, 120, 126, 139, change[120], change[126], change[139]);
g142 = gate2(13, PIxy[2], PIxy[9], 142, change[2], change[9], change[142]);
g143 = gate2(14, PIxy[3], PIxy[9], 143, change[3], change[9], change[143]);
g144 = gate2(15, PIxy[4], PIxy[9], 144, change[4], change[9], change[144]);
g145 = gate2(16, PIxy[5], PIxy[9], 145, change[5], change[9], change[145]);
g146 = gate2(17, PIxy[6], PIxy[9], 146, change[6], change[9], change[146]);
g156 = gate2(18, PIxy[9], PIxy[1], 156, change[9], change[1], change[156]);
g157 = gate2(19, 134, 142, 157, change[134], change[142], change[157]);
g158 = gate2(20, 134, PIxy[9], 158, change[134], change[9], change[158]);
g160 = gate2(21, 157, 157, 160, change[157], change[999], change[160]);
g161 = gate2(22, 158, PIxy[2], 161, change[158], change[2], change[161]);
g162 = gate2(23, 136, 143, 162, change[136], change[143], change[162]);
g163 = gate2(24, 136, 143, 163, change[136], change[143], change[163]);
g164 = gate2(25, 162, 135, 164, change[162], change[135], change[164]);
g165 = gate2(26, 162, 135, 165, change[162], change[135], change[165]);
g166 = gate2(27, 163, 164, 166, change[163], change[164], change[166]);
g167 = gate2(28, 138, 144, 167, change[138], change[144], change[167]);
g168 = gate2(29, 138, 144, 168, change[138], change[144], change[168]);
g169 = gate2(30, 167, 137, 169, change[167], change[137], change[169]);
g170 = gate2(31, 167, 137, 170, change[167], change[137], change[170]);
g171 = gate2(32, 168, 169, 171, change[168], change[169], change[171]);
g172 = gate2(33, 127, 145, 172, change[127], change[145], change[172]);
g173 = gate2(34, 127, 145, 173, change[127], change[145], change[173]);
g174 = gate2(35, PIxy[6], 139, 174, change[6], change[139], change[174]);
g175 = gate2(36, 172, 139, 175, change[172], change[139], change[175]);
g176 = gate2(37, 173, 174, 176, change[173], change[174], change[176]);
g177 = gate2(38, PIxy[0], PIxy[7], POy[2], change[0], change[7], change[177]);
g178 = gate2(39, PIxy[1], PIxy[10], 178, change[1], change[10], change[178]);
g179 = gate2(40, PIxy[2], PIxy[10], 179, change[2], change[10], change[179]);
g180 = gate2(41, PIxy[3], PIxy[10], 180, change[3], change[10], change[180]);
g181 = gate2(42, PIxy[4], PIxy[10], 181, change[4], change[10], change[181]);
g182 = gate2(43, PIxy[5], PIxy[10], 182, change[5], change[10], change[182]);
g183 = gate2(44, PIxy[6], PIxy[10], 183, change[6], change[10], change[183]);
g188 = gate2(45, PIxy[8], PIxy[2], 188, change[8], change[2], change[188]);
g189 = gate2(46, 160, 178, 189, change[160], change[178], change[189]);
g190 = gate2(47, 160, 178, 190, change[160], change[178], change[190]);
g191 = gate2(48, 189, 156, 191, change[189], change[156], change[191]);
g192 = gate2(49, 189, 156, 192, change[189], change[156], change[192]);
g193 = gate2(50, 190, 191, 193, change[190], change[191], change[193]);
g194 = gate2(51, 165, 179, 194, change[165], change[179], change[194]);
g195 = gate2(52, 165, 179, 195, change[165], change[179], change[195]);
g196 = gate2(53, 194, 161, 196, change[194], change[161], change[196]);
g197 = gate2(54, 194, 161, 197, change[194], change[161], change[197]);
g198 = gate2(55, 195, 196, 198, change[195], change[196], change[198]);
g199 = gate2(56, 170, 180, 199, change[170], change[180], change[199]);
g200 = gate2(57, 170, 180, 200, change[170], change[180], change[200]);
g201 = gate2(58, 199, 166, 201, change[199], change[166], change[201]);
g202 = gate2(59, 199, 166, 202, change[199], change[166], change[202]);
g203 = gate2(60, 200, 201, 203, change[200], change[201], change[203]);
g204 = gate2(61, 175, 181, 204, change[175], change[181], change[204]);
g205 = gate2(62, 175, 181, 205, change[175], change[181], change[205]);
g206 = gate2(63, 204, 171, 206, change[204], change[171], change[206]);
g207 = gate2(64, 204, 171, 207, change[204], change[171], change[207]);
g208 = gate2(65, 205, 206, 208, change[205], change[206], change[208]);
g209 = gate2(66, 146, 182, 209, change[146], change[182], change[209]);
g210 = gate2(67, 146, 182, 210, change[146], change[182], change[210]);
g211 = gate2(68, 209, 176, 211, change[209], change[176], change[211]);
g212 = gate2(69, 209, 176, 212, change[209], change[176], change[212]);
g213 = gate2(70, 210, 211, 213, change[210], change[211], change[213]);
g214 = gate2(71, PIxy[0], PIxy[11], 214, change[0], change[11], change[214]);
g215 = gate2(72, PIxy[1], PIxy[11], 215, change[1], change[11], change[215]);
g216 = gate2(73, PIxy[2], PIxy[11], 216, change[2], change[11], change[216]);
g217 = gate2(74, PIxy[3], PIxy[11], 217, change[3], change[11], change[217]);
g218 = gate2(75, PIxy[4], PIxy[11], 218, change[4], change[11], change[218]);
g219 = gate2(76, PIxy[5], PIxy[11], 219, change[5], change[11], change[219]);
g220 = gate2(77, PIxy[6], PIxy[11], 220, change[6], change[11], change[220]);
g221 = gate2(78, 192, 214, 221, change[192], change[214], change[221]);
g222 = gate2(79, 192, 214, 222, change[192], change[214], change[222]);
g223 = gate2(80, 221, 188, 223, change[221], change[188], change[223]);
g224 = gate2(81, 221, 188, POy[4], change[221], change[188], change[224]);
g225 = gate2(82, 222, 223, 225, change[222], change[223], change[225]);
g226 = gate2(83, 197, 215, 226, change[197], change[215], change[226]);
g227 = gate2(84, 197, 215, 227, change[197], change[215], change[227]);
g228 = gate2(85, 226, 193, 228, change[226], change[193], change[228]);
g229 = gate2(86, 226, 193, 229, change[226], change[193], change[229]);
g230 = gate2(87, 227, 228, 230, change[227], change[228], change[230]);
g231 = gate2(88, 202, 216, 231, change[202], change[216], change[231]);
g232 = gate2(89, 202, 216, 232, change[202], change[216], change[232]);
g233 = gate2(90, 231, 198, 233, change[231], change[198], change[233]);
g234 = gate2(91, 231, 198, 234, change[231], change[198], change[234]);
g235 = gate2(92, 232, 233, 235, change[232], change[233], change[235]);
g236 = gate2(93, 207, 217, 236, change[207], change[217], change[236]);
g237 = gate2(94, 207, 217, 237, change[207], change[217], change[237]);
g238 = gate2(95, 236, 203, 238, change[236], change[203], change[238]);
g239 = gate2(96, 236, 203, 239, change[236], change[203], change[239]);
g240 = gate2(97, 237, 238, 240, change[237], change[238], change[240]);
g241 = gate2(98, 212, 218, 241, change[212], change[218], change[241]);
g242 = gate2(99, 212, 218, 242, change[212], change[218], change[242]);
g243 = gate2(100, 241, 208, 243, change[241], change[208], change[243]);
g244 = gate2(101, 241, 208, 244, change[241], change[208], change[244]);
g245 = gate2(102, 242, 243, 245, change[242], change[243], change[245]);
g246 = gate2(103, 183, 219, 246, change[183], change[219], change[246]);
g247 = gate2(104, 183, 219, 247, change[183], change[219], change[247]);
g248 = gate2(105, 246, 213, 248, change[246], change[213], change[248]);
g249 = gate2(106, 246, 213, 249, change[246], change[213], change[249]);
g250 = gate2(107, 247, 248, 250, change[247], change[248], change[250]);
g251 = gate2(108, PIxy[0], PIxy[12], 251, change[0], change[12], change[251]);
g252 = gate2(109, PIxy[1], PIxy[12], 252, change[1], change[12], change[252]);
g253 = gate2(110, PIxy[2], PIxy[12], 253, change[2], change[12], change[253]);
g254 = gate2(111, PIxy[3], PIxy[12], 254, change[3], change[12], change[254]);
g255 = gate2(112, PIxy[4], PIxy[12], 255, change[4], change[12], change[255]);
g256 = gate2(113, PIxy[5], PIxy[12], 256, change[5], change[12], change[256]);
g257 = gate2(114, PIxy[6], PIxy[12], 257, change[6], change[12], change[257]);
g258 = gate2(115, 229, 251, 258, change[229], change[251], change[258]);
g259 = gate2(116, 229, 251, 259, change[229], change[251], change[259]);
g260 = gate2(117, 258, 225, 260, change[258], change[225], change[260]);
g261 = gate2(118, 258, 225, POy[5], change[258], change[225], change[261]);
g262 = gate2(119, 259, 260, 262, change[259], change[260], change[262]);
g263 = gate2(120, 234, 252, 263, change[234], change[252], change[263]);
g264 = gate2(121, 234, 252, 264, change[234], change[252], change[264]);
g265 = gate2(122, 263, 230, 265, change[263], change[230], change[265]);
g266 = gate2(123, 263, 230, 266, change[263], change[230], change[266]);
g267 = gate2(124, 264, 265, 267, change[264], change[265], change[267]);
g268 = gate2(125, 239, 253, 268, change[239], change[253], change[268]);
g269 = gate2(126, 239, 253, 269, change[239], change[253], change[269]);
g270 = gate2(127, 268, 235, 270, change[268], change[235], change[270]);
g271 = gate2(128, 268, 235, 271, change[268], change[235], change[271]);
g272 = gate2(129, 269, 270, 272, change[269], change[270], change[272]);
g273 = gate2(130, 244, 254, 273, change[244], change[254], change[273]);
g274 = gate2(131, 244, 254, 274, change[244], change[254], change[274]);
g275 = gate2(132, 273, 240, POy[0], change[273], change[240], change[275]);
g276 = gate2(133, 273, 240, 276, change[273], change[240], change[276]);
g277 = gate2(134, 274, POy[0], 277, change[274], change[275], change[277]);
g278 = gate2(135, 249, 255, 278, change[249], change[255], change[278]);
g279 = gate2(136, 249, 255, 279, change[249], change[255], change[279]);
g280 = gate2(137, 278, 245, 280, change[278], change[245], change[280]);
g281 = gate2(138, 278, 245, 281, change[278], change[245], change[281]);
g282 = gate2(139, 279, 280, 282, change[279], change[280], change[282]);
g283 = gate2(140, 220, 256, 283, change[220], change[256], change[283]);
g284 = gate2(141, 220, 256, 284, change[220], change[256], change[284]);
g285 = gate2(142, 283, 250, 285, change[283], change[250], change[285]);
g286 = gate2(143, 283, 250, 286, change[283], change[250], change[286]);
g287 = gate2(144, 284, 285, 287, change[284], change[285], change[287]);
g288 = gate2(145, PIxy[0], PIxy[13], 288, change[0], change[13], change[288]);
g289 = gate2(146, PIxy[1], PIxy[13], 289, change[1], change[13], change[289]);
g290 = gate2(147, PIxy[2], PIxy[13], 290, change[2], change[13], change[290]);
g291 = gate2(148, PIxy[3], PIxy[13], 291, change[3], change[13], change[291]);
g292 = gate2(149, PIxy[4], PIxy[13], 292, change[4], change[13], change[292]);
g293 = gate2(150, PIxy[5], PIxy[13], 293, change[5], change[13], change[293]);
g294 = gate2(151, PIxy[6], PIxy[13], 294, change[6], change[13], change[294]);
g295 = gate2(152, 266, 288, 295, change[266], change[288], change[295]);
g296 = gate2(153, 266, 288, 296, change[266], change[288], change[296]);
g297 = gate2(154, 295, 262, 297, change[295], change[262], change[297]);
g298 = gate2(155, 295, 262, POy[6], change[295], change[262], change[298]);
g299 = gate2(156, 296, 297, 299, change[296], change[297], change[299]);
g300 = gate2(157, 271, 289, 300, change[271], change[289], change[300]);
g301 = gate2(158, 271, 289, 301, change[271], change[289], change[301]);
g302 = gate2(159, 300, 267, 302, change[300], change[267], change[302]);
g303 = gate2(160, 300, 267, 303, change[300], change[267], change[303]);
g304 = gate2(161, 301, 302, 304, change[301], change[302], change[304]);
g305 = gate2(162, 276, 290, 305, change[276], change[290], change[305]);
g306 = gate2(163, 276, 290, 306, change[276], change[290], change[306]);
g307 = gate2(164, 305, 272, 307, change[305], change[272], change[307]);
g308 = gate2(165, 305, 272, 308, change[305], change[272], change[308]);
g309 = gate2(166, 306, 307, 309, change[306], change[307], change[309]);
g310 = gate2(167, 281, 291, 310, change[281], change[291], change[310]);
g311 = gate2(168, 281, 291, 311, change[281], change[291], change[311]);
g312 = gate2(169, 310, 277, 312, change[310], change[277], change[312]);
g313 = gate2(170, 310, 277, 313, change[310], change[277], change[313]);
g314 = gate2(171, 311, 312, 314, change[311], change[312], change[314]);
g315 = gate2(172, 286, 292, 315, change[286], change[292], change[315]);
g316 = gate2(173, 286, 292, 316, change[286], change[292], change[316]);
g317 = gate2(174, 315, 282, 317, change[315], change[282], change[317]);
g318 = gate2(175, 315, 282, 318, change[315], change[282], change[318]);
g319 = gate2(176, 316, 317, 319, change[316], change[317], change[319]);
g320 = gate2(177, 257, 293, 320, change[257], change[293], change[320]);
g321 = gate2(178, 257, 293, POy[1], change[257], change[293], change[321]);
g322 = gate2(179, 320, 287, 322, change[320], change[287], change[322]);
g323 = gate2(180, 320, 287, 323, change[320], change[287], change[323]);
g324 = gate2(181, POy[1], 322, 324, change[321], change[322], change[324]);
g325 = gate2(182, 303, 299, POy[7], change[303], change[299], change[325]);
g326 = gate2(183, 303, 299, 326, change[303], change[299], change[326]);
g327 = gate2(184, 308, 304, 327, change[308], change[304], change[327]);
g328 = gate2(185, 308, 304, 328, change[308], change[304], change[328]);
g329 = gate2(186, 327, 326, 329, change[327], change[326], change[329]);
g330 = gate2(187, 327, 326, POy[8], change[327], change[326], change[330]);
g331 = gate2(188, 328, 329, 331, change[328], change[329], change[331]);
g332 = gate2(189, 313, 309, 332, change[313], change[309], change[332]);
g333 = gate2(190, 313, 309, 333, change[313], change[309], change[333]);
g334 = gate2(191, 332, 331, 334, change[332], change[331], change[334]);
g335 = gate2(192, 332, 331, POy[9], change[332], change[331], change[335]);
g336 = gate2(193, 333, 334, 336, change[333], change[334], change[336]);
g337 = gate2(194, 318, 314, 337, change[318], change[314], change[337]);
g338 = gate2(195, 318, 314, 338, change[318], change[314], change[338]);
g339 = gate2(196, 337, 336, 339, change[337], change[336], change[339]);
g340 = gate2(197, 337, 336, POy[10], change[337], change[336], change[340]);
g341 = gate2(198, 338, 339, 341, change[338], change[339], change[341]);
g342 = gate2(199, 323, 319, 342, change[323], change[319], change[342]);
g343 = gate2(200, 323, 319, 343, change[323], change[319], change[343]);
g344 = gate2(201, 342, 341, 344, change[342], change[341], change[344]);
g345 = gate2(202, 342, 341, POy[11], change[342], change[341], change[345]);
g346 = gate2(203, 343, 344, 346, change[343], change[344], change[346]);
g347 = gate2(204, 294, 324, 347, change[294], change[324], change[347]);
g348 = gate2(205, PIxy[13], 324, 348, change[13], change[324], change[348]);
g349 = gate2(206, 347, 346, 349, change[347], change[346], change[349]);
g350 = gate2(207, 347, 346, POy[12], change[347], change[346], change[350]);
g351 = gate2(208, 348, 349, POy[13], change[348], change[349], change[351]);
g352 = gate2(209, PIxy[0], PIxy[7], POy[3], change[0], change[7], change[352]);

// List one or more processes to be composed into a system.
system
synPri,
mul2A, 
mul2Atb,
ediff,
g118,
g119,
g120,
g124,
g125,
g126,
g127,
g134,
g135,
g136,
g137,
g138,
g139,
g142,
g143,
g144,
g145,
g146,
g156,
g157,
g158,
g160,
g161,
g162,
g163,
g164,
g165,
g166,
g167,
g168,
g169,
g170,
g171,
g172,
g173,
g174,
g175,
g176,
g177,
g178,
g179,
g180,
g181,
g182,
g183,
g188,
g189,
g190,
g191,
g192,
g193,
g194,
g195,
g196,
g197,
g198,
g199,
g200,
g201,
g202,
g203,
g204,
g205,
g206,
g207,
g208,
g209,
g210,
g211,
g212,
g213,
g214,
g215,
g216,
g217,
g218,
g219,
g220,
g221,
g222,
g223,
g224,
g225,
g226,
g227,
g228,
g229,
g230,
g231,
g232,
g233,
g234,
g235,
g236,
g237,
g238,
g239,
g240,
g241,
g242,
g243,
g244,
g245,
g246,
g247,
g248,
g249,
g250,
g251,
g252,
g253,
g254,
g255,
g256,
g257,
g258,
g259,
g260,
g261,
g262,
g263,
g264,
g265,
g266,
g267,
g268,
g269,
g270,
g271,
g272,
g273,
g274,
g275,
g276,
g277,
g278,
g279,
g280,
g281,
g282,
g283,
g284,
g285,
g286,
g287,
g288,
g289,
g290,
g291,
g292,
g293,
g294,
g295,
g296,
g297,
g298,
g299,
g300,
g301,
g302,
g303,
g304,
g305,
g306,
g307,
g308,
g309,
g310,
g311,
g312,
g313,
g314,
g315,
g316,
g317,
g318,
g319,
g320,
g321,
g322,
g323,
g324,
g325,
g326,
g327,
g328,
g329,
g330,
g331,
g332,
g333,
g334,
g335,
g336,
g337,
g338,
g339,
g340,
g341,
g342,
g343,
g344,
g345,
g346,
g347,
g348,
g349,
g350,
g351,
g352;
</system>

	<queries>
		<query>
			<formula>simulate[&lt;=20000;1] {input_a, input_b}</formula>
			<comment>Input numbers</comment>
		</query>
		<query>
			<formula>simulate[&lt;=20000;1] {res_acc, res_approx}</formula>
			<comment>Accurate results vs approximate results</comment>
		</query>
		<query>
			<formula>simulate[&lt;=1000;1] {current_delay}</formula>
			<comment>Jitter of delay for each result</comment>
		</query>
		<query>
			<formula>simulate[&lt;=10000000;1] {coverage_percentage, delay_avg, error_prob, mean_abs_error,
mean_relative_error, mean_squared_error, avg_flips_per_res, worst_case_error, 
worst_case_relative_error, max_hamming_distance, max_bit_flips, worst_delay
}</formula>
			<comment/>
		</query>
	</queries>
</nta>
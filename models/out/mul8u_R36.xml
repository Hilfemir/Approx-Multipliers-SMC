<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>/* Feel free to cite and/or read details to the model using:
  STRNADEL Josef. Statistical Model Checking of Approximate Circuits: Challenges and Opportunities. In: Proceedings of the 2020 Design, Automation &amp; Test in Europe Conference &amp; Exhibition (DATE). Grenoble: IEEE Computer Society, 2020, pp. 1574-1577. ISBN 978-3-9819263-4-7. Available from: https://ieeexplore.ieee.org/document/9116207 and https://www.fit.vut.cz/research/publication/12055/
 */
int dif_count = 0;
int res_count = 0;

int[0, 1073741824] out_sum_all_acc;
int[0, 1073741824] out_sum_all_approx;
int[-1073741824, 1073741824] out_sum_all_diff;
double out_sum_all_diff_squared;

double out_sum_relative;

int hamming_distance = 0;
double error_prob = 0.0;
double mean_abs_error = 0.0;
double mean_squared_error = 0.0;
double mean_relative_error = 0.0;
double worst_case_error = 0.0;
double worst_case_relative_error = 0.0;

double rnd;

broadcast chan change[1000];
int outcnt=0;

int bit_flips = 0;

const int NOPS = 9;
typedef int[0,NOPS-1] tOp;

const int MAX_INT = 65536;

const tOp OP_NOT = 0;
const tOp OP_DLY = 1;
const tOp OP_AND = 2;
const tOp OP_NAND = 3;
const tOp OP_OR = 4;
const tOp OP_NOR = 5;
const tOp OP_XOR = 6;
const tOp OP_XNOR = 7;
const tOp OP_SET = 8;

const int NCOM = 31;
tOp tbl_op[NCOM] = {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 2, 2, 2, 4, 4, 4, 4, 2, 4, 4, 1};

int duration(tOp op){  
    int duration=0;
    if(op==OP_NOT) duration=3;
    if(op==OP_DLY) duration=10;
    if(op==OP_AND) duration=10;
    if(op==OP_NAND) duration=13;
    if(op==OP_OR) duration=10;
    if(op==OP_NOR) duration=13;
    if(op==OP_XOR) duration=20;
    if(op==OP_XNOR) duration=23;
    if(op==OP_SET) duration=0;
    return duration;
}

broadcast chan go, pwrUp;

const double COVERAGE_RATIO = 100.0;
const int DLY_ZERO = 0;

const int TBL_PWR2[31] = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824};

broadcast chan update;
broadcast chan cmpDone;

const int MAX_BITS = 1024;
bool bits[MAX_BITS];
bool difference=false;
bool dif2=false;
int diffctrl=0;
int[-MAX_INT, MAX_INT] err_magn_v;    
double err_magn_r;

int bitsCovered;
double inCoverage;

bool allCovered=false;

const int NIB_MUL2 = 16;
const int NOB_MUL2 = 16;
const int NTV_MUL2 = TBL_PWR2[NIB_MUL2]; 
const int DLY_MUL2 = 20;                 

/* ===------------------------  ------------------------==== */
int getMasked(int w, int offset, int[0,MAX_INT] data){ 
    int mask = (TBL_PWR2[w]-1);    
   return (data &amp; (mask &lt;&lt; offset)) &gt;&gt; offset;     
}    
bool getBit(int pos, int[0,MAX_INT] data){ return getMasked(1, pos, data); }

const int NIB_ANY = 16;
const int NOB_ANY = 16;
const int NTV_ANY = TBL_PWR2[NIB_ANY]; 
const int DLY_ANY = 20;                 
bool tbl_acc_any[TBL_PWR2[NIB_ANY]][NIB_ANY+NOB_ANY];
//
const int NFUN = 1;
typedef int[0,NFUN-1] tFun;
//-------
const tFun F_MUL = 0;
//
void fill_tbl_acc_any(int win, int wout, tFun f, int fdly){ 
    int[0,MAX_INT] i;
    int[0,MAX_INT] result;
    int j, k, op0, op1;
    for(i=0; i&lt;TBL_PWR2[win]; i++){    
        for(j=0; j&lt;win; j++){
            tbl_acc_any[i][j] = getBit(j,i);
        }
        if(f==F_MUL){
            op0 = getMasked(win/2, 0, i);
            op1 = getMasked(win/2, win/2, i);
            result = op0*op1;
        }
        else { result = 0; }
        for(k=0; k&lt;wout; k++){
            tbl_acc_any[i][win+(wout-k-1)] = getBit(k,result);
        }
    }
}

/* ===------------------------  ------------------------==== */
const int NPI = NIB_MUL2;    
const int NPO = NOB_MUL2;   
//
const int NTV = NTV_MUL2; 
const int DLY = DLY_MUL2;
//
const int PIxy[NPI] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
const int POx[NPO] = {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
//
const int POy[NPO] = {-1, -1, -1, -1, -1, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, -1};

int[0, 1073741824] PWR2_NPI = TBL_PWR2[NPI];
/* ===------------------------  ------------------------==== */

const int MAX_INNER_NODES = 1000;
typedef struct {
    int dly;
    bool flag;
} sNode;
sNode nodes[MAX_INNER_NODES];

const int MAX_INNER_GATES = 1000;
typedef struct {
    bool active;
    int in0;
    int in1;
    int inAvail;
    int out0;
    int dly;
    int depth;
    bool flag;
} sGate;
sGate gates[MAX_INNER_GATES];

int[0, 1073741824] approxCircNodes = 0;
int[0, 1073741824] approxCircGates = 0;
int approxCircDly=0;
int[0, 1073741824] approxCircDepth=0;


bool outEq(){
    bool same=true;
    int i;
    hamming_distance = 0;
    for(i=0; i&lt;NPO; i++){
        if((POx[i]&gt;=0) &amp;&amp; (POy[i]&gt;=0)){
            if(bits[POx[i]] != bits[POy[i]]){
                hamming_distance++;
                same = false;
            }
        }
    }
    
    if (same == false) {
        dif_count++;
    }

    res_count++;

    return same;
}

void diff(){
    int[0, MAX_INT] res_acc=0;
    int[0, MAX_INT] res_approx=0;
    int i;
    double res_dif;
    double relative_res_dif;

    difference = !outEq();

     for(i=0; i&lt;=NPO-1; i++){                                       
        res_acc += bits[i+NPI]*TBL_PWR2[i];
        if(POy[i]&gt;=0) res_approx += bits[i+NPI+NPO]*TBL_PWR2[i];    
    }
    out_sum_all_acc += res_acc;
    out_sum_all_approx += res_approx;

    out_sum_all_diff = abs(out_sum_all_acc - out_sum_all_approx);
    out_sum_all_diff_squared = out_sum_all_diff_squared + pow(abs(res_approx-res_acc),2);
    out_sum_relative = out_sum_relative + (abs(res_approx-res_acc) / fmax(1.0, 1.0*res_acc));

    res_dif = 1.0 * abs(res_approx - res_acc);
    if (res_dif &gt; worst_case_error) {
        worst_case_error = res_dif;
    }

    relative_res_dif = abs(res_approx - res_acc) / fmax(1.0, 1.0*res_acc);
    if (relative_res_dif &gt; worst_case_relative_error) {
        worst_case_relative_error = relative_res_dif;
    }

    err_magn_v = res_acc - res_approx;
    if(res_acc!=0) err_magn_r = 1-((1.0*res_approx)/(1.0*res_acc));
}
</declaration>
	<template>
		<name>tmul2any</name>
		<parameter>const int &amp;PIxy[NPI], const int &amp;POx[NPO], bool &amp;ttbl[TBL_PWR2[NIB_ANY]][NIB_ANY+NOB_ANY], const int  dly</parameter>
		<declaration>
clock x;

int getIdx(int i){
    int idx=-1;

    if(i &lt; NPI) {
        idx = PIxy[i];
    }
    else {
        idx = POx[i-NPI];
    }

    return idx;
}


int[0, MAX_INT] bin2dec()
{
    int[0, MAX_INT] result=0;
    int i;
    for(i=0; i&lt;NIB_MUL2; i++){
        result += bits[getIdx(i)]*TBL_PWR2[i];
    }

    return result;
}


int getOut(){
    int res, i;
    for(i=NIB_MUL2; i&lt;NIB_MUL2+NOB_MUL2; i++){
        res += bits[getIdx(i)]*TBL_PWR2[i-NIB_MUL2];
    }
    return res;    
}

void f(){
    if(POx[15]&gt;=0) bits[POx[15]]=ttbl[bin2dec()][16];
    if(POx[14]&gt;=0) bits[POx[14]]=ttbl[bin2dec()][17];
    if(POx[13]&gt;=0) bits[POx[13]]=ttbl[bin2dec()][18];
    if(POx[12]&gt;=0) bits[POx[12]]=ttbl[bin2dec()][19];
    if(POx[11]&gt;=0) bits[POx[11]]=ttbl[bin2dec()][20];
    if(POx[10]&gt;=0) bits[POx[10]]=ttbl[bin2dec()][21];
    if(POx[9]&gt;=0) bits[POx[9]]=ttbl[bin2dec()][22];
    if(POx[8]&gt;=0) bits[POx[8]]=ttbl[bin2dec()][23];
    if(POx[7]&gt;=0) bits[POx[7]]=ttbl[bin2dec()][24];
    if(POx[6]&gt;=0) bits[POx[6]]=ttbl[bin2dec()][25];
    if(POx[5]&gt;=0) bits[POx[5]]=ttbl[bin2dec()][26];
    if(POx[4]&gt;=0) bits[POx[4]]=ttbl[bin2dec()][27];
    if(POx[3]&gt;=0) bits[POx[3]]=ttbl[bin2dec()][28];
    if(POx[2]&gt;=0) bits[POx[2]]=ttbl[bin2dec()][29];
    if(POx[1]&gt;=0) bits[POx[1]]=ttbl[bin2dec()][30];
    if(POx[0]&gt;=0) bits[POx[0]]=ttbl[bin2dec()][31];

    diffctrl++;
}

void inits(){
    fill_tbl_acc_any(NIB_ANY, NOB_ANY, F_MUL, dly);
}

</declaration>
		<location id="id0" x="-170" y="0">
		</location>
		<location id="id1" x="0" y="0">
			<label kind="invariant" x="-25" y="17">x&lt;=dly</label>
		</location>
		<location id="id2" x="-374" y="0">
			<committed/>
		</location>
		<init ref="id2"/>
		<transition id="id3">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="assignment" x="-297" y="0">inits()</label>
		</transition>
		<transition id="id4">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-152" y="-136">x==dly</label>
			<label kind="assignment" x="17" y="-59">f()</label>
			<nail x="0" y="-102"/>
			<nail x="-170" y="-102"/>
		</transition>
		<transition id="id5">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-110" y="-25">update?</label>
			<label kind="assignment" x="-93" y="0">x=0</label>
		</transition>
	</template>
	<template>
		<name>tmul2_tb_exhaust</name>
		<parameter>const int &amp;PIxy[NPI], const int dly, const double covratio</parameter>
		<declaration>
clock x;
clock tcover;
int input=0;
int nsame=0, inSame=0;
double rCover;

bool inCoverSet[NTV];

int covered()
{
    int cnt=0;

    for(i: int[0,NTV-1])
    {
        if(inCoverSet[i]) {
            cnt++;
        }
    }

    bitsCovered=cnt;

    return cnt;
}

int bin2dec()
{
    int result=0, i;
    for(i=0; i&lt;NPI; i++){
        result += bits[i]*TBL_PWR2[i];
    }

    return result;
}


bool inCovered()
{
  return forall (i : int[0,NTV-1]) inCoverSet[i];    
}



void f(){
    bits[PIxy[0]] = getBit(0, input);
    bits[PIxy[1]] = getBit(1, input);
    bits[PIxy[2]] = getBit(2, input);
    bits[PIxy[3]] = getBit(3, input);
    bits[PIxy[4]] = getBit(4, input);
    bits[PIxy[5]] = getBit(5, input);
    bits[PIxy[6]] = getBit(6, input);
    bits[PIxy[7]] = getBit(7, input);

    if(inCoverSet[input]) { inSame = -1*input; nsame++; }
    else inSame = input;
    inCoverSet[input] = true;
    input = (input+1) % NTV;
    covered();

    rCover = 100.0*bitsCovered / NTV; 
}

void inits(){
    int i;
    for(i:int[0,MAX_INNER_NODES-1]){ nodes[i].flag=false; }
    for(i:int[0,NPI-1]){
        if(exists(j:int[0,NPI-1]) PIxy[j]==i){ 
            nodes[i].flag=true;    
            nodes[i].dly=0;        
        }
        approxCircNodes++;
    }
    for(i=0; i&lt;approxCircGates; i++) gates[i].flag=false;    
    while(exists(i:int[0,MAX_INNER_GATES-1]) (gates[i].flag==false &amp;&amp; i&lt;approxCircGates)){
        approxCircDepth++;
        for(i=0; i&lt;approxCircGates; i++) {
            if(!gates[i].flag &amp;&amp; nodes[gates[i].in0].flag &amp;&amp; nodes[gates[i].in1].flag){  
                nodes[gates[i].out0].dly = (nodes[gates[i].in0].dly&gt;nodes[gates[i].in1].dly?nodes[gates[i].in0].dly:nodes[gates[i].in1].dly) + duration(tbl_op[i]);
                nodes[gates[i].out0].flag=true;
                approxCircNodes++;
                if(nodes[gates[i].out0].dly&lt;approxCircDly){ approxCircDly=nodes[gates[i].out0].dly; }

                gates[i].flag=true;   
            }  
        }
    }
}
</declaration>
		<location id="id6" x="-136" y="0">
			<name x="-153" y="8">apply</name>
			<committed/>
		</location>
		<location id="id7" x="-374" y="0">
			<name x="-382" y="8">get</name>
			<committed/>
		</location>
		<location id="id8" x="34" y="0">
			<name x="17" y="8">done</name>
			<label kind="invariant" x="0" y="-34">tcover'==0</label>
		</location>
		<location id="id9" x="-246" y="-102">
			<name x="-255" y="-136">wait</name>
		</location>
		<location id="id10" x="-510" y="0">
			<urgent/>
		</location>
		<init ref="id10"/>
		<transition id="id11">
			<source ref="id10"/>
			<target ref="id7"/>
			<label kind="assignment" x="-459" y="0">inits()</label>
		</transition>
		<transition id="id12">
			<source ref="id6"/>
			<target ref="id9"/>
			<label kind="guard" x="-221" y="-93">!inCovered()</label>
			<nail x="-136" y="-102"/>
		</transition>
		<transition id="id13">
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="-93" y="-25">inCovered()</label>
			<label kind="assignment" x="-110" y="0">allCovered=true,
x=0</label>
		</transition>
		<transition id="id14">
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-289" y="-25">update!</label>
			<label kind="assignment" x="-280" y="0">f(), x=0</label>
		</transition>
		<transition id="id15">
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-365" y="-93">cmpDone?</label>
			<nail x="-374" y="-102"/>
		</transition>
	</template>
	<template>
		<name>tmul2_tb_nondet</name>
		<parameter>const int range_min, const int range_max, const int dly, const double covratio</parameter>
		<declaration>clock x;
clock tcover;
int input=0;
int nsame=0, inSame=0;
double rCover;
int idx=0;

bool inCoverSet[NTV];

int covered()
{
    int cnt=0;

    for(i: int[0,NTV-1])
    {
        if(inCoverSet[i]) {
            cnt++;
        }
    }

    bitsCovered=cnt;

    return cnt;
}

int bin2dec()
{
    int[0, 1073741824] result=0;
	int i;
    for(i=0; i&lt;NPI; i++){
        result += bits[i]*TBL_PWR2[i];
    }

    return result;
}


bool inCovered()
{
  return forall (i : int[0,NTV-1]) inCoverSet[i];    
}

void f(int i){
    input = bin2dec();
   if(inCoverSet[input]) { inSame = -1*input; nsame++; }
  else inSame = input;
   inCoverSet[bin2dec()] = true;
    covered();

    rCover = 100.0*bitsCovered / NTV; 

    inCoverage = 0.0;
}

void inits(){
    int i;
    for(i:int[0,MAX_INNER_NODES-1]){ nodes[i].flag=false; }
    for(i:int[0,NPI-1]){
        if(exists(j:int[0,NPI-1]) PIxy[j]==i){ 
            nodes[i].flag=true;
            nodes[i].dly=0;      
        }
        approxCircNodes++;
    }
    for(i=0; i&lt;approxCircGates; i++) gates[i].flag=false;    
    while(exists(i:int[0,MAX_INNER_GATES-1]) (gates[i].flag==false &amp;&amp; i&lt;approxCircGates)){
        approxCircDepth++;
        for(i=0; i&lt;approxCircGates; i++) {
            if(!gates[i].flag &amp;&amp; nodes[gates[i].in0].flag &amp;&amp; nodes[gates[i].in1].flag){  
                nodes[gates[i].out0].dly = (nodes[gates[i].in0].dly&gt;nodes[gates[i].in1].dly?nodes[gates[i].in0].dly:nodes[gates[i].in1].dly) + duration(tbl_op[i]);
                nodes[gates[i].out0].flag=true;
                approxCircNodes++;
                if(nodes[gates[i].out0].dly&gt;approxCircDly){ approxCircDly=nodes[gates[i].out0].dly; }

                gates[i].flag=true;
            }  
        }
    }
}</declaration>
		<location id="id16" x="-119" y="-102">
			<name x="-129" y="-136">wait</name>
		</location>
		<location id="id17" x="-246" y="0">
			<name x="-255" y="8">get</name>
			<committed/>
		</location>
		<location id="id18" x="170" y="0">
			<name x="153" y="8">done</name>
			<label kind="invariant" x="136" y="-34">tcover'==0</label>
		</location>
		<location id="id19" x="0" y="0">
			<name x="-17" y="8">apply</name>
			<committed/>
		</location>
		<location id="id20" x="-246" y="-102">
			<committed/>
		</location>
		<location id="id21" x="-374" y="0">
			<urgent/>
		</location>
		<init ref="id21"/>
		<transition id="id22">
			<source ref="id21"/>
			<target ref="id17"/>
			<label kind="assignment" x="-331" y="0">inits()</label>
		</transition>
		<transition id="id23">
			<source ref="id20"/>
			<target ref="id17"/>
			<label kind="select" x="-238" y="-68">i: int[range_min, range_max]</label>
			<label kind="assignment" x="-238" y="-51">bits[i] ^= 1, idx=i</label>
		</transition>
		<transition id="id24">
			<source ref="id16"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-212" y="-102">cmpDone?</label>
		</transition>
		<transition id="id25">
			<source ref="id19"/>
			<target ref="id16"/>
			<label kind="guard" x="-93" y="-93">!inCovered()</label>
			<nail x="0" y="-102"/>
		</transition>
		<transition id="id26">
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-153" y="-25">update!</label>
			<label kind="assignment" x="-144" y="0">f(idx)</label>
		</transition>
		<transition id="id27">
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="guard" x="42" y="-25">inCovered()</label>
			<label kind="assignment" x="34" y="0">allCovered=true</label>
		</transition>
	</template>
	<template>
		<name>tmul2_tb_random</name>
		<parameter>const int dly, const double covratio</parameter>
		<declaration>clock x;
clock tcover;
int input=0;
int nsame=0, inSame=0;
double rCover;
int idx=0;

bool inCoverSet[NTV];

int covered()
{
    int cnt=0;

    for(i: int[0,NTV-1])
    {
        if(inCoverSet[i]) {
            cnt++;
        }
    }

    bitsCovered=cnt;

    return cnt;
}

int[0, MAX_INT] bin2dec()
{
    int[0, MAX_INT] result=0;
	int i;
    for(i=0; i&lt;NPI; i++){
        result += bits[i]*TBL_PWR2[i];
    }

    return result;
}


bool inCovered()
{
  return forall (i : int[0,NTV-1]) inCoverSet[i];    
}

void f(int i){
    int j;
    int[0, MAX_INT] imax = fint(exp2(NPI));

//    rnd = random(100);
//    rnd = random_arcsine(-10,10);
//    rnd = random_beta(0.1,5);
//    rnd = random_gamma(0.5,5);
//    rnd = random_normal(10,1);
//    rnd = random_poisson(1.0);
//    rnd = random_weibull(0.5,5);
//    rnd = random_tri(0,10,100);

    j=fint(random(NPI));                   // pro (NPI) je out 0...NPI-1
 //   j=fint(random_normal(NPI/2.0,0.5));    // pro (NPI/2.0, 0.5) je out NPI/2 +- 0.5
 //   j=fint(random_poisson(1.0));           // pro (1.0) je out 1.0 +- 
//    j=fint(random_arcsine(0.0, NPI-1));    // pro (0.0, NPI-1) je out mezi 0...NPI-1 (aka random())
  //  j=fint(random_tri(0.0, 0.5, NPI-1));    // pro (0.0, 0.5, NPI-1) je out mezi 0...NPI-1 (aka random()), se stredem u 0.5
  //  j = fint(random_weibull(10, 3.0));    // pro (10.0, 3.0) je out mezi 0...3 (aka random()), se stredem vys (pro 10)
  //  j = fint(random_gamma(1.0,0.5));    // pro (1.0, 0.5) je out mezi 0...5 (aka random()), se stredem niz (kolem 1.0)
    if(j &lt; 0) j=0;
    if(j &gt; (NPI-1)) j=NPI-1;
    bits[j] ^= 1;

   if(inCoverSet[input]) { inSame = -1*input; nsame++; }
   else inSame = input;
   inCoverSet[bin2dec()] = true;
    covered();

    rCover = 100.0*bitsCovered / NTV; 

    inCoverage = 0.0;
}

double EP() {
    //error probability
    //number of different outputs divided by 2^NPI
    double ret = dif_count / (1.0*PWR2_NPI);

    return ret;
}

double MAE() {
    //mean absolute error
    //sum of differences (approx. vs acc.) divided by 2^NPI
    double ret = out_sum_all_diff / (1.0*PWR2_NPI);

    return ret;
}

double MSE() {
    //mean squared error
    //sum of squared differences divided by 2^NPI
    double ret = out_sum_all_diff_squared / (1.0*PWR2_NPI);

    return ret;
}

double MRE() {
    //mean relative error
    //mean error in relation to size of accurate output
    double ret = out_sum_relative / (1.0*PWR2_NPI);

    return ret;
}

void calc_metrics() {
    error_prob = EP();
    mean_abs_error = MAE();
    mean_squared_error = MSE();
    mean_relative_error = MRE();
}

void inits(){
    int i;
    for(i:int[0,MAX_INNER_NODES-1]){ nodes[i].flag=false; }
    for(i:int[0,NPI-1]){
        if(exists(j:int[0,NPI-1]) PIxy[j]==i){ 
            nodes[i].flag=true;    
            nodes[i].dly=0;        
        }
        approxCircNodes++;
    }
    for(i=0; i&lt;approxCircGates; i++) gates[i].flag=false;
    while(exists(i:int[0,MAX_INNER_GATES-1]) (gates[i].flag==false &amp;&amp; i&lt;approxCircGates)){
        approxCircDepth++;
        for(i=0; i&lt;approxCircGates; i++) {
            if(!gates[i].flag &amp;&amp; nodes[gates[i].in0].flag &amp;&amp; nodes[gates[i].in1].flag){  
                nodes[gates[i].out0].dly = (nodes[gates[i].in0].dly&gt;nodes[gates[i].in1].dly?nodes[gates[i].in0].dly:nodes[gates[i].in1].dly) + duration(tbl_op[i]);
                nodes[gates[i].out0].flag=true;
                approxCircNodes++;
                if(nodes[gates[i].out0].dly&gt;approxCircDly){ approxCircDly=nodes[gates[i].out0].dly; }

                gates[i].flag=true; 
            }  
        }
    }
}</declaration>
		<location id="id28" x="-119" y="-102">
			<name x="-129" y="-136">wait</name>
		</location>
		<location id="id29" x="-246" y="0">
			<name x="-255" y="8">get</name>
			<committed/>
		</location>
		<location id="id30" x="170" y="0">
			<name x="153" y="8">done</name>
			<label kind="invariant" x="136" y="-34">tcover'==0</label>
		</location>
		<location id="id31" x="0" y="0">
			<name x="-17" y="8">apply</name>
			<committed/>
		</location>
		<location id="id32" x="-246" y="-102">
			<committed/>
		</location>
		<location id="id33" x="-374" y="0">
			<urgent/>
		</location>
		<init ref="id33"/>
		<transition id="id34">
			<source ref="id33"/>
			<target ref="id29"/>
			<label kind="assignment" x="-331" y="0">inits()</label>
		</transition>
		<transition id="id35">
			<source ref="id32"/>
			<target ref="id29"/>
		</transition>
		<transition id="id36">
			<source ref="id28"/>
			<target ref="id32"/>
			<label kind="synchronisation" x="-212" y="-102">cmpDone?</label>
		</transition>
		<transition id="id37">
			<source ref="id31"/>
			<target ref="id28"/>
			<label kind="guard" x="-93" y="-93">!inCovered()</label>
			<nail x="0" y="-102"/>
		</transition>
		<transition id="id38">
			<source ref="id29"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-153" y="-25">update!</label>
			<label kind="assignment" x="-144" y="0">f(idx)</label>
		</transition>
		<transition id="id39">
			<source ref="id31"/>
			<target ref="id30"/>
			<label kind="guard" x="42" y="-25">inCovered()</label>
			<label kind="assignment" x="34" y="0">allCovered=true, 
calc_metrics()</label>
		</transition>
	</template>
	<template>
		<name>syncPrimary</name>
		<declaration>int idx;</declaration>
		<location id="id40" x="-748" y="-306">
		</location>
		<location id="id41" x="-646" y="-306">
			<committed/>
		</location>
		<location id="id42" x="-510" y="-306">
			<committed/>
		</location>
		<init ref="id40"/>
		<transition id="id43">
			<source ref="id42"/>
			<target ref="id40"/>
			<label kind="guard" x="-646" y="-399">idx&gt;=NPI</label>
			<nail x="-510" y="-374"/>
			<nail x="-748" y="-374"/>
		</transition>
		<transition id="id44">
			<source ref="id42"/>
			<target ref="id41"/>
			<label kind="guard" x="-595" y="-323">idx&lt;NPI</label>
			<nail x="-578" y="-272"/>
		</transition>
		<transition id="id45">
			<source ref="id41"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-612" y="-340">change[idx]!</label>
			<label kind="assignment" x="-629" y="-280">idx++</label>
		</transition>
		<transition id="id46">
			<source ref="id40"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="-730" y="-323">update?</label>
			<label kind="assignment" x="-714" y="-306">idx=0</label>
		</transition>
	</template>
	<template>
		<name>eval_diff</name>
		<parameter>const int dly</parameter>
		<declaration>clock x;</declaration>
		<location id="id47" x="-238" y="0">
			<label kind="invariant" x="-297" y="-8">x&lt;=dly</label>
		</location>
		<location id="id48" x="-102" y="0">
			<committed/>
		</location>
		<init ref="id47"/>
		<transition id="id49">
			<source ref="id48"/>
			<target ref="id47"/>
			<label kind="synchronisation" x="-178" y="51">cmpDone!</label>
			<label kind="assignment" x="-246" y="110">outcnt=0, diffctrl=0, x=0</label>
			<nail x="-102" y="110"/>
			<nail x="-238" y="110"/>
		</transition>
		<transition id="id50">
			<source ref="id47"/>
			<target ref="id47"/>
			<label kind="guard" x="-331" y="-93">diffctrl&lt;2
&amp;&amp; x==dly</label>
			<label kind="assignment" x="-289" y="-42">x=0</label>
			<nail x="-263" y="-76"/>
			<nail x="-229" y="-76"/>
		</transition>
		<transition id="id51">
			<source ref="id47"/>
			<target ref="id48"/>
			<label kind="guard" x="-204" y="0">diffctrl==2</label>
			<label kind="assignment" x="-212" y="-68">err_magn_v=0,
err_magn_r=0.0,
diff()</label>
		</transition>
	</template>
	<template>
		<name>gate2</name>
		<parameter>const int id, const int a0, const int a1, const int y0, broadcast chan &amp;cin0, broadcast chan &amp;cin1, broadcast chan &amp;cout0</parameter>
		<declaration>clock x;

void inits(){
    int i;

    // collect info about the approx.circuit topology 
    gates[id].active = true;
    gates[id].in0 = a0; 
    gates[id].in1 = a1; 
    gates[id].inAvail = 0; 
    gates[id].out0 = y0; 
    gates[id].dly = duration(tbl_op[id]);
    gates[id].depth = -1;
    gates[id].flag = false;

    approxCircGates++;    
}

void outGen(tOp op){
 //   outSync(y0);

	bool original_bit = bits[y0];

    if(op == OP_AND){
        bits[y0] = bits[a0] &amp; bits[a1];        
    }
    else if(op == OP_NAND){
        bits[y0] = not (bits[a0] &amp; bits[a1]);        
    }
    else if(op == OP_OR){
        bits[y0] = bits[a0] | bits[a1];        
    }
    else if(op == OP_NOR){
        bits[y0] = not (bits[a0] | bits[a1]);        
    }
    else if(op == OP_XOR){
        bits[y0] = (bits[a0] != bits[a1]);        
    }
    else if(op == OP_XNOR){
        bits[y0] = (bits[a0] == bits[a1]);
    }
    else if(op == OP_SET){
        //not really a gate but should be fine
        bits[y0] = bits[a0];
    }
    else {    // unsupported operation
    }

	if(original_bit != bits[y0]) {
		bit_flips++;
	}

    if(id==2){ 
        if(diffctrl&lt;2) diffctrl++;
    }  
}</declaration>
		<location id="id52" x="-170" y="0">
		</location>
		<location id="id53" x="0" y="0">
			<label kind="invariant" x="-17" y="17">x&lt;=duration(tbl_op[id])</label>
		</location>
		<location id="id54" x="-272" y="0">
			<committed/>
		</location>
		<init ref="id54"/>
		<transition id="id55">
			<source ref="id54"/>
			<target ref="id52"/>
			<label kind="assignment" x="-238" y="0">inits()</label>
		</transition>
		<transition id="id56">
			<source ref="id52"/>
			<target ref="id53"/>
			<label kind="synchronisation" x="-144" y="0">cin1?</label>
			<label kind="assignment" x="-76" y="0">x=0</label>
			<nail x="-85" y="0"/>
		</transition>
		<transition id="id57">
			<source ref="id53"/>
			<target ref="id52"/>
			<label kind="guard" x="-110" y="-127">x==duration(tbl_op[id])</label>
			<label kind="synchronisation" x="8" y="-68">cout0!</label>
			<label kind="assignment" x="-144" y="-102">outGen(tbl_op[id])</label>
			<nail x="0" y="-102"/>
			<nail x="-170" y="-102"/>
		</transition>
		<transition id="id58">
			<source ref="id52"/>
			<target ref="id53"/>
			<label kind="synchronisation" x="-136" y="-42">cin0?</label>
			<label kind="assignment" x="-59" y="-42">x=0</label>
			<nail x="-85" y="-34"/>
		</transition>
	</template>
	<system>
// Place template instantiations here.

synPri = syncPrimary();
mul2A = tmul2any(PIxy, POx, tbl_acc_any, DLY_MUL2);

//mul2Atb = tmul2_tb_exhaust(PIxy, DLY_MUL2, COVERAGE_RATIO);
//mul2Atb = tmul2_tb_nondet(PIxy[0], PIxy[7], DLY_MUL2, COVERAGE_RATIO);
mul2Atb = tmul2_tb_random(DLY_MUL2, COVERAGE_RATIO);

ediff = eval_diff(5);

//gates
g22 = gate2(0, PIxy[14], PIxy[0], POy[6], change[14], change[0], change[22]);
g23 = gate2(1, PIxy[15], PIxy[0], 23, change[15], change[0], change[23]);
g29 = gate2(2, PIxy[13], PIxy[0], POy[5], change[13], change[0], change[29]);
g30 = gate2(3, PIxy[14], PIxy[1], 30, change[14], change[1], change[30]);
g46 = gate2(4, PIxy[14], PIxy[5], 46, change[14], change[5], change[46]);
g47 = gate2(5, PIxy[15], PIxy[3], 47, change[15], change[3], change[47]);
g53 = gate2(6, PIxy[15], PIxy[4], 53, change[15], change[4], change[53]);
g54 = gate2(7, PIxy[14], PIxy[4], 54, change[14], change[4], change[54]);
g60 = gate2(8, PIxy[12], PIxy[7], 60, change[12], change[7], change[60]);
g61 = gate2(9, PIxy[13], PIxy[5], 61, change[13], change[5], change[61]);
g70 = gate2(10, PIxy[14], PIxy[6], 70, change[14], change[6], change[70]);
g71 = gate2(11, PIxy[15], PIxy[6], 71, change[15], change[6], change[71]);
g77 = gate2(12, PIxy[13], PIxy[7], 77, change[13], change[7], change[77]);
g78 = gate2(13, PIxy[14], PIxy[7], 78, change[14], change[7], change[78]);
g79 = gate2(14, PIxy[15], PIxy[7], POy[14], change[15], change[7], change[79]);
g107 = gate2(15, 23, 30, 107, change[23], change[30], change[107]);
g136 = gate2(16, 46, 53, 136, change[46], change[53], change[136]);
g139 = gate2(17, 136, 60, POy[11], change[136], change[60], change[139]);
g141 = gate2(18, 47, 54, 141, change[47], change[54], change[141]);
g144 = gate2(19, 141, 61, 144, change[141], change[61], change[144]);
g156 = gate2(20, PIxy[5], PIxy[15], 156, change[5], change[15], change[156]);
g180 = gate2(21, PIxy[15], PIxy[1], POy[8], change[15], change[1], change[180]);
g189 = gate2(22, PIxy[8], PIxy[7], 189, change[8], change[7], change[189]);
g212 = gate2(23, 156, 70, 212, change[156], change[70], change[212]);
g215 = gate2(24, 212, 77, POy[12], change[212], change[77], change[215]);
g218 = gate2(25, 71, 78, POy[13], change[71], change[78], change[218]);
g236 = gate2(26, 107, 189, POy[7], change[107], change[189], change[236]);
g242 = gate2(27, PIxy[7], PIxy[11], 242, change[7], change[11], change[242]);
g251 = gate2(28, 144, 242, POy[10], change[144], change[242], change[251]);
g252 = gate2(29, 144, 242, POy[9], change[144], change[242], change[252]);

// List one or more processes to be composed into a system.
system
synPri,
mul2A, 
mul2Atb,
ediff,
g22,
g23,
g29,
g30,
g46,
g47,
g53,
g54,
g60,
g61,
g70,
g71,
g77,
g78,
g79,
g107,
g136,
g139,
g141,
g144,
g156,
g180,
g189,
g212,
g215,
g218,
g236,
g242,
g251,
g252;
</system>
	<queries>
		<query>
			<formula>E[&lt;=25000; 10] (max:mul2Atb.tcover)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=350; 100] (max:bitsCovered)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>Pr[&lt;=25000] (&lt;&gt;bitsCovered&gt;14)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=350;1] {bits[0], 2+bits[1], 4+bits[2], 6+bits[3], 8+bits[4], 10+bits[5], 12+bits[6], 14+bits[7], bitsCovered, 16+allCovered}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=1250;1] {bits[0], 2+bits[1], 4+bits[2], 6+bits[3], 10+bits[4], 12+bits[5], 14+bits[6], 16+bits[7], 20+bits[8], 22+bits[9], 24+bits[10], 26+bits[11], 28+bits[12], 32+difference, out_sum_all_acc, out_sum_all_approx}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=1500;1] {bits[0], 2+bits[1], 4+bits[2], 6+bits[3], 8+bits[4], 10+bits[5], 12+bits[6], 14+bits[7], 20+bits[8], 22+bits[9], 24+bits[10], 26+bits[11], bitsCovered, 20+allCovered, 30+mul2Atb.inSame, 40+mul2Atb.input, 30+mul2Atb.nsame, mul2Atb.rCover, 60+difference*10}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=2500;5] {100*((((100.0*(out_sum_all_acc-out_sum_all_approx))/(100.0*(out_sum_all_acc+1))))), out_sum_all_acc, out_sum_all_approx}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=2000;5] {40+difference, 50+10*err_magn_v, 100*err_magn_r, out_sum_all_acc, out_sum_all_approx, 80+out_sum_all_diff, mul2Atb.rCover, 100*((1+1.0*out_sum_all_acc)/(1+1.0*out_sum_all_approx))}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=4000;20] {out_sum_all_diff}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=400;5] {bits[0], 2+bits[1], 4+bits[2], 6+bits[3], 10+bits[4], 12+bits[5], 14+bits[6], 16+bits[7], 20+bits[8], 22+bits[9], 24+bits[10], 26+bits[11], 30+bits[14], 32+bits[15], 34+bits[16], 36+bits[13], 38+bits[12], 40+difference, 45+diffctrl, 50+outcnt}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>sup: err_magn_v
			</formula>
			<comment>Maximalni rozdil mezi vysledkem presne a priblizne nasobicky (pro stejny vstup)</comment>
		</query>
		<query>
			<formula>E[&lt;=2500; 10] (max:err_magn_v)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=2500; 10] (max:err_magn_r)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=25000; 10] (max:out_sum_all_diff)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=5000;200] {bitsCovered, 100*allCovered, mul2Atb.rCover}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>Pr[&lt;=50000] (&lt;&gt;allCovered)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=2500; 10] (max:dif_count)</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate[&lt;=5000;1] {dif_count, res_count}</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-01 12:44:34 +0100">
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="dif_count" type="l" color="0xff0000" encoding="csv">0.0,0.0
193.3803847769741,0.0
193.3803847769741,1.0
213.3803847769741,1.0
213.3803847769741,2.0
236.33233738713898,2.0
236.33233738713898,3.0
258.35736832697876,3.0
258.35736832697876,4.0
279.23288209480233,4.0
279.23288209480233,5.0
301.99847765034065,5.0
301.99847765034065,6.0
321.99847765034065,6.0
321.99847765034065,7.0
345.46143422601745,7.0
345.46143422601745,8.0
366.47621592273936,8.0
366.47621592273936,9.0
390.72057644603774,9.0
390.72057644603774,10.0
414.04301737318747,10.0
414.04301737318747,11.0
438.65203725057654,11.0
438.65203725057654,12.0
458.65203725057654,12.0
458.65203725057654,13.0
481.247320426628,13.0
481.247320426628,14.0
506.0553872224409,14.0
506.0553872224409,15.0
526.0553872224409,15.0
526.0553872224409,16.0
546.0553872224409,16.0
546.0553872224409,17.0
566.0553872224409,17.0
566.0553872224409,18.0
589.3275812803768,18.0
589.3275812803768,19.0
609.3275812803768,19.0
609.3275812803768,20.0
630.9315423853695,20.0
630.9315423853695,21.0
650.9315423853695,21.0
650.9315423853695,22.0
675.6378628849052,22.0
675.6378628849052,23.0
696.1922401632182,23.0
696.1922401632182,24.0
716.1922401632182,24.0
716.1922401632182,25.0
736.1922401632182,25.0
736.1922401632182,26.0
756.1922401632182,26.0
756.1922401632182,27.0
780.1885186054278,27.0
780.1885186054278,28.0
800.7695854140911,28.0
800.7695854140911,29.0
823.6148271278944,29.0
823.6148271278944,30.0
843.6148271278944,30.0
843.6148271278944,31.0
866.1764737777412,31.0
866.1764737777412,32.0
887.9467822099105,32.0
887.9467822099105,33.0
908.6600346048363,33.0
908.6600346048363,34.0
932.105442796601,34.0
932.105442796601,35.0
952.105442796601,35.0
952.105442796601,36.0
972.105442796601,36.0
972.105442796601,37.0
992.105442796601,37.0
992.105442796601,38.0
1012.105442796601,38.0
1012.105442796601,39.0
1032.7697584300768,39.0
1032.7697584300768,40.0
1054.2432310897857,40.0
1054.2432310897857,41.0
1076.3647190819029,41.0
1076.3647190819029,42.0
1096.3647190819029,42.0
1096.3647190819029,43.0
1116.3647190819029,43.0
1116.3647190819029,44.0
1136.3647190819029,44.0
1136.3647190819029,45.0
1157.2132527595386,45.0
1157.2132527595386,46.0
1180.378218202386,46.0
1180.378218202386,47.0
1200.378218202386,47.0
1200.378218202386,48.0
1220.378218202386,48.0
1220.378218202386,49.0
1240.378218202386,49.0
1240.378218202386,50.0
1260.378218202386,50.0
1260.378218202386,51.0
1282.4078895838466,51.0
1282.4078895838466,52.0
1307.315895294305,52.0
1307.315895294305,53.0
1327.315895294305,53.0
1327.315895294305,54.0
1351.2215818255208,54.0
1351.2215818255208,55.0
1373.8044710620306,55.0
1373.8044710620306,56.0
1393.8044710620306,56.0
1393.8044710620306,57.0
1413.8044710620306,57.0
1413.8044710620306,58.0
1435.4512829321902,58.0
1435.4512829321902,59.0
1455.4512829321902,59.0
1455.4512829321902,60.0
1475.4512829321902,60.0
1475.4512829321902,61.0
1496.533468090929,61.0
1496.533468090929,62.0
1516.533468090929,62.0
1516.533468090929,63.0
1536.533468090929,63.0
1536.533468090929,64.0
1556.533468090929,64.0
1556.533468090929,65.0
1576.533468090929,65.0
1576.533468090929,66.0
1598.37115195347,66.0
1598.37115195347,67.0
1622.7500481985044,67.0
1622.7500481985044,68.0
1647.22510489868,68.0
1647.22510489868,69.0
1667.22510489868,69.0
1667.22510489868,70.0
1690.443509867182,70.0
1690.443509867182,71.0
1711.2661363580264,71.0
1711.2661363580264,72.0
1731.2661363580264,72.0
1731.2661363580264,73.0
1751.2661363580264,73.0
1751.2661363580264,74.0
1771.2661363580264,74.0
1771.2661363580264,75.0
1793.487746117171,75.0
1793.487746117171,76.0
1813.487746117171,76.0
1813.487746117171,77.0
1836.6202023322694,77.0
1836.6202023322694,78.0
1856.6202023322694,78.0
1856.6202023322694,79.0
1876.6202023322694,79.0
1876.6202023322694,80.0
1899.7695372102316,80.0
1899.7695372102316,81.0
1921.762201160891,81.0
1921.762201160891,82.0
1945.1570846512914,82.0
1945.1570846512914,83.0
1969.828087913338,83.0
1969.828087913338,84.0
1991.640610465547,84.0
1991.640610465547,85.0
2011.9892786676064,85.0
2011.9892786676064,86.0
2031.9892786676064,86.0
2031.9892786676064,87.0
2051.9892786676064,87.0
2051.9892786676064,88.0
2075.0297410262283,88.0
2075.0297410262283,89.0
2099.574621351203,89.0
2099.574621351203,90.0
2119.574621351203,90.0
2119.574621351203,91.0
2143.4963348158635,91.0
2143.4963348158635,92.0
2163.4963348158635,92.0
2163.4963348158635,93.0
2183.4963348158635,93.0
2183.4963348158635,94.0
2203.4963348158635,94.0
2203.4963348158635,95.0
2227.285207218956,95.0
2227.285207218956,96.0
2247.285207218956,96.0
2247.285207218956,97.0
2269.671146563487,97.0
2269.671146563487,98.0
2289.671146563487,98.0
2289.671146563487,99.0
2309.671146563487,99.0
2309.671146563487,100.0
2329.671146563487,100.0
2329.671146563487,101.0
2349.671146563487,101.0
2349.671146563487,102.0
2370.0256653572433,102.0
2370.0256653572433,103.0
2393.2859553257003,103.0
2393.2859553257003,104.0
2413.2859553257003,104.0
2413.2859553257003,105.0
2438.190313940868,105.0
2438.190313940868,106.0
2458.745324196061,106.0
2458.745324196061,107.0
2478.745324196061,107.0
2478.745324196061,108.0
2503.6261749628466,108.0
2503.6261749628466,109.0
2523.6261749628466,109.0
2523.6261749628466,110.0
2543.6261749628466,110.0
2543.6261749628466,111.0
2563.6261749628466,111.0
2563.6261749628466,112.0
2587.6219832070637,112.0
2587.6219832070637,113.0
2607.6219832070637,113.0
2607.6219832070637,114.0
2627.6219832070637,114.0
2627.6219832070637,115.0
2647.6219832070637,115.0
2647.6219832070637,116.0
2667.6219832070637,116.0
2667.6219832070637,117.0
2687.6219832070637,117.0
2687.6219832070637,118.0
2707.6219832070637,118.0
2707.6219832070637,119.0
2730.983145623468,119.0
2730.983145623468,120.0
2750.983145623468,120.0
2750.983145623468,121.0
2770.983145623468,121.0
2770.983145623468,122.0
2790.983145623468,122.0
2790.983145623468,123.0
2811.692912293365,123.0
2811.692912293365,124.0
2835.2752913476434,124.0
2835.2752913476434,125.0
2855.2752913476434,125.0
2855.2752913476434,126.0
2879.2558101844043,126.0
2879.2558101844043,127.0
2901.249342978699,127.0
2901.249342978699,128.0
2921.249342978699,128.0
2921.249342978699,129.0
2942.6078532566316,129.0
2942.6078532566316,130.0
2962.6078532566316,130.0
2962.6078532566316,131.0
2982.6078532566316,131.0
2982.6078532566316,132.0
3002.6078532566316,132.0
3002.6078532566316,133.0
3066.0219383088406,133.0
3066.0219383088406,134.0
3087.44747780147,134.0
3087.44747780147,135.0
3108.520986539079,135.0
3108.520986539079,136.0
3128.520986539079,136.0
3128.520986539079,137.0
3149.592302108649,137.0
3149.592302108649,138.0
3171.463340068003,138.0
3171.463340068003,139.0
3196.070644094143,139.0
3196.070644094143,140.0
3216.070644094143,140.0
3216.070644094143,141.0
3240.834558989154,141.0
3240.834558989154,142.0
3260.834558989154,142.0
3260.834558989154,143.0
3280.834558989154,143.0
3280.834558989154,144.0
3300.834558989154,144.0
3300.834558989154,145.0
3322.9245155339595,145.0
3322.9245155339595,146.0
3343.3295877324417,146.0
3343.3295877324417,147.0
3366.9283101707697,147.0
3366.9283101707697,148.0
3386.9283101707697,148.0
3386.9283101707697,149.0
3406.9283101707697,149.0
3406.9283101707697,150.0
3426.9283101707697,150.0
3426.9283101707697,151.0
3451.165500591742,151.0
3451.165500591742,152.0
3471.165500591742,152.0
3471.165500591742,153.0
3491.165500591742,153.0
3491.165500591742,154.0
3516.1399635253474,154.0
3516.1399635253474,155.0
3537.7850328956265,155.0
3537.7850328956265,156.0
3557.7850328956265,156.0
3557.7850328956265,157.0
3577.7850328956265,157.0
3577.7850328956265,158.0
3597.7850328956265,158.0
3597.7850328956265,159.0
3620.5387899593916,159.0
3620.5387899593916,160.0
3640.5387899593916,160.0
3640.5387899593916,161.0
3660.5387899593916,161.0
3660.5387899593916,162.0
3684.213231302565,162.0
3684.213231302565,163.0
3707.1553573629353,163.0
3707.1553573629353,164.0
3727.1553573629353,164.0
3727.1553573629353,165.0
3747.1553573629353,165.0
3747.1553573629353,166.0
3767.793332444271,166.0
3767.793332444271,167.0
3787.793332444271,167.0
3787.793332444271,168.0
3808.503692926606,168.0
3808.503692926606,169.0
3830.140258038882,169.0
3830.140258038882,170.0
3850.140258038882,170.0
3850.140258038882,171.0
3870.140258038882,171.0
3870.140258038882,172.0
3894.6672576654237,172.0
3894.6672576654237,173.0
3914.6672576654237,173.0
3914.6672576654237,174.0
3934.6672576654237,174.0
3934.6672576654237,175.0
3956.3013648276683,175.0
3956.3013648276683,176.0
3978.815984883113,176.0
3978.815984883113,177.0
3998.815984883113,177.0
3998.815984883113,178.0
4019.4530934339855,178.0
4019.4530934339855,179.0
4039.507821367588,179.0
4039.507821367588,180.0
4059.507821367588,180.0
4059.507821367588,181.0
4079.507821367588,181.0
4079.507821367588,182.0
4099.507821367588,182.0
4099.507821367588,183.0
4122.904930290533,183.0
4122.904930290533,184.0
4142.904930290533,184.0
4142.904930290533,185.0
4166.598399865907,185.0
4166.598399865907,186.0
4186.598399865907,186.0
4186.598399865907,187.0
4206.598399865907,187.0
4206.598399865907,188.0
4226.598399865907,188.0
4226.598399865907,189.0
4246.598399865907,189.0
4246.598399865907,190.0
4266.598399865907,190.0
4266.598399865907,191.0
4286.598399865907,191.0
4286.598399865907,192.0
4311.264595388202,192.0
4311.264595388202,193.0
4331.305453862296,193.0
4331.305453862296,194.0
4351.305453862296,194.0
4351.305453862296,195.0
4373.597979357,195.0
4373.597979357,196.0
4393.597979357,196.0
4393.597979357,197.0
4418.145366321551,197.0
4418.145366321551,198.0
4438.332556904061,198.0
4438.332556904061,199.0
4461.606360680889,199.0
4461.606360680889,200.0
4484.4082754524425,200.0
4484.4082754524425,201.0
4506.0681538435165,201.0
4506.0681538435165,202.0
4526.0681538435165,202.0
4526.0681538435165,203.0
4546.0681538435165,203.0
4546.0681538435165,204.0
4566.0681538435165,204.0
4566.0681538435165,205.0
4586.0681538435165,205.0
4586.0681538435165,206.0
4608.990062272642,206.0
4608.990062272642,207.0
4629.447975385701,207.0
4629.447975385701,208.0
4649.447975385701,208.0
4649.447975385701,209.0
4669.447975385701,209.0
4669.447975385701,210.0
4689.447975385701,210.0
4689.447975385701,211.0
4713.853988677729,211.0
4713.853988677729,212.0
4733.853988677729,212.0
4733.853988677729,213.0
4757.563821654767,213.0
4757.563821654767,214.0
4777.563821654767,214.0
4777.563821654767,215.0
4800.387021389324,215.0
4800.387021389324,216.0
4820.387021389324,216.0
4820.387021389324,217.0
4843.446085546166,217.0
4843.446085546166,218.0
4863.931723329006,218.0
4863.931723329006,219.0
4883.931723329006,219.0
4883.931723329006,220.0
4903.931723329006,220.0
4903.931723329006,221.0
4928.108565231087,221.0
4928.108565231087,222.0
4948.108565231087,222.0
4948.108565231087,223.0
4968.108565231087,223.0
4968.108565231087,224.0
4988.108565231087,224.0
4988.108565231087,225.0
5000.0,225.0
					</series>
					<series title="res_count" type="l" color="0x00ffff" encoding="csv">0.0,0.0
21.689623538404703,0.0
21.689623538404703,1.0
41.6896235384047,1.0
41.6896235384047,2.0
65.89793916675262,2.0
65.89793916675262,3.0
88.00116846570745,3.0
88.00116846570745,4.0
108.00116846570745,4.0
108.00116846570745,5.0
131.50379289174452,5.0
131.50379289174452,6.0
152.40753115271218,6.0
152.40753115271218,7.0
172.40753115271218,7.0
172.40753115271218,8.0
193.3803847769741,8.0
193.3803847769741,9.0
213.3803847769741,9.0
213.3803847769741,10.0
236.33233738713898,10.0
236.33233738713898,11.0
258.35736832697876,11.0
258.35736832697876,12.0
279.23288209480233,12.0
279.23288209480233,13.0
301.99847765034065,13.0
301.99847765034065,14.0
321.99847765034065,14.0
321.99847765034065,15.0
345.46143422601745,15.0
345.46143422601745,16.0
366.47621592273936,16.0
366.47621592273936,17.0
390.72057644603774,17.0
390.72057644603774,18.0
414.04301737318747,18.0
414.04301737318747,19.0
438.65203725057654,19.0
438.65203725057654,20.0
458.65203725057654,20.0
458.65203725057654,21.0
481.247320426628,21.0
481.247320426628,22.0
506.0553872224409,22.0
506.0553872224409,23.0
526.0553872224409,23.0
526.0553872224409,24.0
546.0553872224409,24.0
546.0553872224409,25.0
566.0553872224409,25.0
566.0553872224409,26.0
589.3275812803768,26.0
589.3275812803768,27.0
609.3275812803768,27.0
609.3275812803768,28.0
630.9315423853695,28.0
630.9315423853695,29.0
650.9315423853695,29.0
650.9315423853695,30.0
675.6378628849052,30.0
675.6378628849052,31.0
696.1922401632182,31.0
696.1922401632182,32.0
716.1922401632182,32.0
716.1922401632182,33.0
736.1922401632182,33.0
736.1922401632182,34.0
756.1922401632182,34.0
756.1922401632182,35.0
780.1885186054278,35.0
780.1885186054278,36.0
800.7695854140911,36.0
800.7695854140911,37.0
823.6148271278944,37.0
823.6148271278944,38.0
843.6148271278944,38.0
843.6148271278944,39.0
866.1764737777412,39.0
866.1764737777412,40.0
887.9467822099105,40.0
887.9467822099105,41.0
908.6600346048363,41.0
908.6600346048363,42.0
932.105442796601,42.0
932.105442796601,43.0
952.105442796601,43.0
952.105442796601,44.0
972.105442796601,44.0
972.105442796601,45.0
992.105442796601,45.0
992.105442796601,46.0
1012.105442796601,46.0
1012.105442796601,47.0
1032.7697584300768,47.0
1032.7697584300768,48.0
1054.2432310897857,48.0
1054.2432310897857,49.0
1076.3647190819029,49.0
1076.3647190819029,50.0
1096.3647190819029,50.0
1096.3647190819029,51.0
1116.3647190819029,51.0
1116.3647190819029,52.0
1136.3647190819029,52.0
1136.3647190819029,53.0
1157.2132527595386,53.0
1157.2132527595386,54.0
1180.378218202386,54.0
1180.378218202386,55.0
1200.378218202386,55.0
1200.378218202386,56.0
1220.378218202386,56.0
1220.378218202386,57.0
1240.378218202386,57.0
1240.378218202386,58.0
1260.378218202386,58.0
1260.378218202386,59.0
1282.4078895838466,59.0
1282.4078895838466,60.0
1307.315895294305,60.0
1307.315895294305,61.0
1327.315895294305,61.0
1327.315895294305,62.0
1351.2215818255208,62.0
1351.2215818255208,63.0
1373.8044710620306,63.0
1373.8044710620306,64.0
1393.8044710620306,64.0
1393.8044710620306,65.0
1413.8044710620306,65.0
1413.8044710620306,66.0
1435.4512829321902,66.0
1435.4512829321902,67.0
1455.4512829321902,67.0
1455.4512829321902,68.0
1475.4512829321902,68.0
1475.4512829321902,69.0
1496.533468090929,69.0
1496.533468090929,70.0
1516.533468090929,70.0
1516.533468090929,71.0
1536.533468090929,71.0
1536.533468090929,72.0
1556.533468090929,72.0
1556.533468090929,73.0
1576.533468090929,73.0
1576.533468090929,74.0
1598.37115195347,74.0
1598.37115195347,75.0
1622.7500481985044,75.0
1622.7500481985044,76.0
1647.22510489868,76.0
1647.22510489868,77.0
1667.22510489868,77.0
1667.22510489868,78.0
1690.443509867182,78.0
1690.443509867182,79.0
1711.2661363580264,79.0
1711.2661363580264,80.0
1731.2661363580264,80.0
1731.2661363580264,81.0
1751.2661363580264,81.0
1751.2661363580264,82.0
1771.2661363580264,82.0
1771.2661363580264,83.0
1793.487746117171,83.0
1793.487746117171,84.0
1813.487746117171,84.0
1813.487746117171,85.0
1836.6202023322694,85.0
1836.6202023322694,86.0
1856.6202023322694,86.0
1856.6202023322694,87.0
1876.6202023322694,87.0
1876.6202023322694,88.0
1899.7695372102316,88.0
1899.7695372102316,89.0
1921.762201160891,89.0
1921.762201160891,90.0
1945.1570846512914,90.0
1945.1570846512914,91.0
1969.828087913338,91.0
1969.828087913338,92.0
1991.640610465547,92.0
1991.640610465547,93.0
2011.9892786676064,93.0
2011.9892786676064,94.0
2031.9892786676064,94.0
2031.9892786676064,95.0
2051.9892786676064,95.0
2051.9892786676064,96.0
2075.0297410262283,96.0
2075.0297410262283,97.0
2099.574621351203,97.0
2099.574621351203,98.0
2119.574621351203,98.0
2119.574621351203,99.0
2143.4963348158635,99.0
2143.4963348158635,100.0
2163.4963348158635,100.0
2163.4963348158635,101.0
2183.4963348158635,101.0
2183.4963348158635,102.0
2203.4963348158635,102.0
2203.4963348158635,103.0
2227.285207218956,103.0
2227.285207218956,104.0
2247.285207218956,104.0
2247.285207218956,105.0
2269.671146563487,105.0
2269.671146563487,106.0
2289.671146563487,106.0
2289.671146563487,107.0
2309.671146563487,107.0
2309.671146563487,108.0
2329.671146563487,108.0
2329.671146563487,109.0
2349.671146563487,109.0
2349.671146563487,110.0
2370.0256653572433,110.0
2370.0256653572433,111.0
2393.2859553257003,111.0
2393.2859553257003,112.0
2413.2859553257003,112.0
2413.2859553257003,113.0
2438.190313940868,113.0
2438.190313940868,114.0
2458.745324196061,114.0
2458.745324196061,115.0
2478.745324196061,115.0
2478.745324196061,116.0
2503.6261749628466,116.0
2503.6261749628466,117.0
2523.6261749628466,117.0
2523.6261749628466,118.0
2543.6261749628466,118.0
2543.6261749628466,119.0
2563.6261749628466,119.0
2563.6261749628466,120.0
2587.6219832070637,120.0
2587.6219832070637,121.0
2607.6219832070637,121.0
2607.6219832070637,122.0
2627.6219832070637,122.0
2627.6219832070637,123.0
2647.6219832070637,123.0
2647.6219832070637,124.0
2667.6219832070637,124.0
2667.6219832070637,125.0
2687.6219832070637,125.0
2687.6219832070637,126.0
2707.6219832070637,126.0
2707.6219832070637,127.0
2730.983145623468,127.0
2730.983145623468,128.0
2750.983145623468,128.0
2750.983145623468,129.0
2770.983145623468,129.0
2770.983145623468,130.0
2790.983145623468,130.0
2790.983145623468,131.0
2811.692912293365,131.0
2811.692912293365,132.0
2835.2752913476434,132.0
2835.2752913476434,133.0
2855.2752913476434,133.0
2855.2752913476434,134.0
2879.2558101844043,134.0
2879.2558101844043,135.0
2901.249342978699,135.0
2901.249342978699,136.0
2921.249342978699,136.0
2921.249342978699,137.0
2942.6078532566316,137.0
2942.6078532566316,138.0
2962.6078532566316,138.0
2962.6078532566316,139.0
2982.6078532566316,139.0
2982.6078532566316,140.0
3002.6078532566316,140.0
3002.6078532566316,141.0
3022.9699898022227,141.0
3022.9699898022227,142.0
3046.0219383088406,142.0
3046.0219383088406,143.0
3066.0219383088406,143.0
3066.0219383088406,144.0
3087.44747780147,144.0
3087.44747780147,145.0
3108.520986539079,145.0
3108.520986539079,146.0
3128.520986539079,146.0
3128.520986539079,147.0
3149.592302108649,147.0
3149.592302108649,148.0
3171.463340068003,148.0
3171.463340068003,149.0
3196.070644094143,149.0
3196.070644094143,150.0
3216.070644094143,150.0
3216.070644094143,151.0
3240.834558989154,151.0
3240.834558989154,152.0
3260.834558989154,152.0
3260.834558989154,153.0
3280.834558989154,153.0
3280.834558989154,154.0
3300.834558989154,154.0
3300.834558989154,155.0
3322.9245155339595,155.0
3322.9245155339595,156.0
3343.3295877324417,156.0
3343.3295877324417,157.0
3366.9283101707697,157.0
3366.9283101707697,158.0
3386.9283101707697,158.0
3386.9283101707697,159.0
3406.9283101707697,159.0
3406.9283101707697,160.0
3426.9283101707697,160.0
3426.9283101707697,161.0
3451.165500591742,161.0
3451.165500591742,162.0
3471.165500591742,162.0
3471.165500591742,163.0
3491.165500591742,163.0
3491.165500591742,164.0
3516.1399635253474,164.0
3516.1399635253474,165.0
3537.7850328956265,165.0
3537.7850328956265,166.0
3557.7850328956265,166.0
3557.7850328956265,167.0
3577.7850328956265,167.0
3577.7850328956265,168.0
3597.7850328956265,168.0
3597.7850328956265,169.0
3620.5387899593916,169.0
3620.5387899593916,170.0
3640.5387899593916,170.0
3640.5387899593916,171.0
3660.5387899593916,171.0
3660.5387899593916,172.0
3684.213231302565,172.0
3684.213231302565,173.0
3707.1553573629353,173.0
3707.1553573629353,174.0
3727.1553573629353,174.0
3727.1553573629353,175.0
3747.1553573629353,175.0
3747.1553573629353,176.0
3767.793332444271,176.0
3767.793332444271,177.0
3787.793332444271,177.0
3787.793332444271,178.0
3808.503692926606,178.0
3808.503692926606,179.0
3830.140258038882,179.0
3830.140258038882,180.0
3850.140258038882,180.0
3850.140258038882,181.0
3870.140258038882,181.0
3870.140258038882,182.0
3894.6672576654237,182.0
3894.6672576654237,183.0
3914.6672576654237,183.0
3914.6672576654237,184.0
3934.6672576654237,184.0
3934.6672576654237,185.0
3956.3013648276683,185.0
3956.3013648276683,186.0
3978.815984883113,186.0
3978.815984883113,187.0
3998.815984883113,187.0
3998.815984883113,188.0
4019.4530934339855,188.0
4019.4530934339855,189.0
4039.507821367588,189.0
4039.507821367588,190.0
4059.507821367588,190.0
4059.507821367588,191.0
4079.507821367588,191.0
4079.507821367588,192.0
4099.507821367588,192.0
4099.507821367588,193.0
4122.904930290533,193.0
4122.904930290533,194.0
4142.904930290533,194.0
4142.904930290533,195.0
4166.598399865907,195.0
4166.598399865907,196.0
4186.598399865907,196.0
4186.598399865907,197.0
4206.598399865907,197.0
4206.598399865907,198.0
4226.598399865907,198.0
4226.598399865907,199.0
4246.598399865907,199.0
4246.598399865907,200.0
4266.598399865907,200.0
4266.598399865907,201.0
4286.598399865907,201.0
4286.598399865907,202.0
4311.264595388202,202.0
4311.264595388202,203.0
4331.305453862296,203.0
4331.305453862296,204.0
4351.305453862296,204.0
4351.305453862296,205.0
4373.597979357,205.0
4373.597979357,206.0
4393.597979357,206.0
4393.597979357,207.0
4418.145366321551,207.0
4418.145366321551,208.0
4438.332556904061,208.0
4438.332556904061,209.0
4461.606360680889,209.0
4461.606360680889,210.0
4484.4082754524425,210.0
4484.4082754524425,211.0
4506.0681538435165,211.0
4506.0681538435165,212.0
4526.0681538435165,212.0
4526.0681538435165,213.0
4546.0681538435165,213.0
4546.0681538435165,214.0
4566.0681538435165,214.0
4566.0681538435165,215.0
4586.0681538435165,215.0
4586.0681538435165,216.0
4608.990062272642,216.0
4608.990062272642,217.0
4629.447975385701,217.0
4629.447975385701,218.0
4649.447975385701,218.0
4649.447975385701,219.0
4669.447975385701,219.0
4669.447975385701,220.0
4689.447975385701,220.0
4689.447975385701,221.0
4713.853988677729,221.0
4713.853988677729,222.0
4733.853988677729,222.0
4733.853988677729,223.0
4757.563821654767,223.0
4757.563821654767,224.0
4777.563821654767,224.0
4777.563821654767,225.0
4800.387021389324,225.0
4800.387021389324,226.0
4820.387021389324,226.0
4820.387021389324,227.0
4843.446085546166,227.0
4843.446085546166,228.0
4863.931723329006,228.0
4863.931723329006,229.0
4883.931723329006,229.0
4883.931723329006,230.0
4903.931723329006,230.0
4903.931723329006,231.0
4928.108565231087,231.0
4928.108565231087,232.0
4948.108565231087,232.0
4948.108565231087,233.0
4968.108565231087,233.0
4968.108565231087,234.0
4988.108565231087,234.0
4988.108565231087,235.0
5000.0,235.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=25000; 10] (max:error_prob)</formula>
			<comment>Error Probability</comment>
			<result outcome="success" type="quantity" value="≈ 0" timestamp="2024-03-01 12:48:27 +0100">
				<details>≈ 0</details>
				<plot title="Probability Density Distribution" xaxis="max: error_prob" yaxis="probability density">
					<series title="density" type="b(0.000000)" color="0x0000ff" encoding="csv">0.0,4.503599627370496E15
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,4.503599627370496E15
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: error_prob" yaxis="probability">
					<series title="probability" type="b(0.000000)" color="0x0000ff" encoding="csv">0.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: error_prob" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: error_prob" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">0.0,0.30849710781876083
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">0.0,0.0
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: error_prob" yaxis="count">
					<series title="count" type="b(0.000000)" color="0x0000ff" encoding="csv">0.0,10.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,10.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2.2204e-16, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=25000; 10] (max:mean_abs_error)</formula>
			<comment>Mean Absolute Error</comment>
		</query>
		<query>
			<formula>E[&lt;=25000; 10] (max:mean_squared_error)</formula>
			<comment>Mean Squared Error</comment>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (max:mean_relative_error)</formula>
			<comment>Mean Relative Error</comment>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (max:worst_case_error)</formula>
			<comment/>
			<result outcome="success" type="quantity" value="31491.2 ± 3328.46 (95% CI)" timestamp="2024-03-01 12:45:58 +0100">
				<details>31491.2 ± 3328.46 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: worst_case_error" yaxis="probability density">
					<series title="density" type="b(3661.750000)" color="0x0000ff" encoding="csv">25170.0,1.092373864955281E-4
28831.75,5.461869324776405E-5
32493.5,5.461869324776405E-5
36155.25,2.7309346623882025E-5
39817.0,2.7309346623882025E-5
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">31491.2,0.0
31491.2,1.092373864955281E-4
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=3661.8, bucket count=5
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2.517e+04, 3.982e+04]
Mean estimate of displayed sample: 3.149e+04 ± 3328 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: worst_case_error" yaxis="probability">
					<series title="probability" type="b(3661.750000)" color="0x0000ff" encoding="csv">25170.0,0.4
28831.75,0.2
32493.5,0.2
36155.25,0.1
39817.0,0.1
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">31491.2,0.0
31491.2,0.4
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=3661.8, bucket count=5
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2.517e+04, 3.982e+04]
Mean estimate of displayed sample: 3.149e+04 ± 3328 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: worst_case_error" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">25170.0,0.0
28831.75,0.4
32493.5,0.6
36155.25,0.8
39817.0,0.9
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">31491.2,0.0
31491.2,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=3661.8, bucket count=5
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2.517e+04, 3.982e+04]
Mean estimate of displayed sample: 3.149e+04 ± 3328 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: worst_case_error" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">25170.0,0.30849710781876083
28831.75,0.7376219233930549
32493.5,0.8784477418801728
36155.25,0.9747892736731666
39817.0,0.9974714214555382
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">25170.0,0.0
28831.75,0.12155225811982719
32493.5,0.26237807660694507
36155.25,0.44390453769235844
39817.0,0.5549838829718046
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">25170.0,0.0
28831.75,0.4
32493.5,0.6
36155.25,0.8
39817.0,0.9
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">31491.2,0.0
31491.2,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=3661.8, bucket count=5
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2.517e+04, 3.982e+04]
Mean estimate of displayed sample: 3.149e+04 ± 3328 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: worst_case_error" yaxis="count">
					<series title="count" type="b(3661.750000)" color="0x0000ff" encoding="csv">25170.0,4.0
28831.75,2.0
32493.5,2.0
36155.25,1.0
39817.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">31491.2,0.0
31491.2,4.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=3661.8, bucket count=5
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [2.517e+04, 3.982e+04]
Mean estimate of displayed sample: 3.149e+04 ± 3328 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (max:worst_case_relative_error)</formula>
			<comment/>
			<result outcome="success" type="quantity" value="2079.91 ± 1993.45 (95% CI)" timestamp="2024-03-01 17:46:55 +0100">
				<details>2079.91 ± 1993.45 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: worst_case_relative_error" yaxis="probability density">
					<series title="density" type="b(2046.532449)" color="0x0000ff" encoding="csv">5.870204081632653,3.420419746332497E-4
2052.4026530612246,0.0
4098.935102040817,9.772627846664278E-5
6145.467551020408,0.0
8192.0,4.886313923332139E-5
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">2079.90797039197,0.0
2079.90797039197,3.420419746332497E-4
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2046.5, bucket count=5
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [5.87, 8.19e+03]
Mean estimate of displayed sample: 2.08e+03 ± 1.99e+03 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: worst_case_relative_error" yaxis="probability">
					<series title="probability" type="b(2046.532449)" color="0x0000ff" encoding="csv">5.870204081632653,0.7
2052.4026530612246,0.0
4098.935102040817,0.2
6145.467551020408,0.0
8192.0,0.1
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">2079.90797039197,0.0
2079.90797039197,0.7
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2046.5, bucket count=5
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [5.87, 8.19e+03]
Mean estimate of displayed sample: 2.08e+03 ± 1.99e+03 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: worst_case_relative_error" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">5.870204081632653,0.0
2052.4026530612246,0.7
4098.935102040817,0.7
6145.467551020408,0.9
8192.0,0.9
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">2079.90797039197,0.0
2079.90797039197,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2046.5, bucket count=5
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [5.87, 8.19e+03]
Mean estimate of displayed sample: 2.08e+03 ± 1.99e+03 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: worst_case_relative_error" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">5.870204081632653,0.30849710781876083
2052.4026530612246,0.9332604888222655
4098.935102040817,0.9332604888222655
6145.467551020408,0.9974714214555382
8192.0,0.9974714214555382
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">5.870204081632653,0.0
2052.4026530612246,0.3475471499400027
4098.935102040817,0.3475471499400027
6145.467551020408,0.5549838829718046
8192.0,0.5549838829718046
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">5.870204081632653,0.0
2052.4026530612246,0.7
4098.935102040817,0.7
6145.467551020408,0.9
8192.0,0.9
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">2079.90797039197,0.0
2079.90797039197,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2046.5, bucket count=5
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [5.87, 8.19e+03]
Mean estimate of displayed sample: 2.08e+03 ± 1.99e+03 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: worst_case_relative_error" yaxis="count">
					<series title="count" type="b(2046.532449)" color="0x0000ff" encoding="csv">5.870204081632653,7.0
2052.4026530612246,0.0
4098.935102040817,2.0
6145.467551020408,0.0
8192.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">2079.90797039197,0.0
2079.90797039197,7.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=2046.5, bucket count=5
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [5.87, 8.19e+03]
Mean estimate of displayed sample: 2.08e+03 ± 1.99e+03 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (max:hamming_distance)</formula>
			<comment/>
			<result outcome="success" type="quantity" value="970.7 ± 30.6317 (95% CI)" timestamp="2024-03-01 17:47:47 +0100">
				<details>970.7 ± 30.6317 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: hamming_distance" yaxis="probability density">
					<series title="density" type="b(28.000000)" color="0x0000ff" encoding="csv">899.0,0.007142857142857143
927.0,0.0035714285714285713
955.0,0.010714285714285714
983.0,0.014285714285714285
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">970.7,0.0
970.7,0.014285714285714287
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=28, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [899, 1010]
Mean estimate of displayed sample: 970.7 ± 30.632 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: hamming_distance" yaxis="probability">
					<series title="probability" type="b(28.000000)" color="0x0000ff" encoding="csv">899.0,0.2
927.0,0.1
955.0,0.3
983.0,0.4
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">970.7,0.0
970.7,0.4
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=28, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [899, 1010]
Mean estimate of displayed sample: 970.7 ± 30.632 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: hamming_distance" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">899.0,0.0
927.0,0.2
955.0,0.3
983.0,0.6
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">970.7,0.0
970.7,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=28, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [899, 1010]
Mean estimate of displayed sample: 970.7 ± 30.632 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: hamming_distance" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">899.0,0.30849710781876083
927.0,0.5560954623076415
955.0,0.6524528500599973
983.0,0.8784477418801728
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">899.0,0.0
927.0,0.025210726326833372
955.0,0.06673951117773447
983.0,0.26237807660694507
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">899.0,0.0
927.0,0.2
955.0,0.3
983.0,0.6
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">970.7,0.0
970.7,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=28, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [899, 1010]
Mean estimate of displayed sample: 970.7 ± 30.632 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: hamming_distance" yaxis="count">
					<series title="count" type="b(28.000000)" color="0x0000ff" encoding="csv">899.0,2.0
927.0,1.0
955.0,3.0
983.0,4.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">970.7,0.0
970.7,4.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=28, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [899, 1010]
Mean estimate of displayed sample: 970.7 ± 30.632 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=5000; 10] (min:hamming_distance)</formula>
			<comment/>
			<result outcome="success" type="quantity" value="≈ 0" timestamp="2024-03-01 17:48:01 +0100">
				<details>≈ 0</details>
				<plot title="Probability Density Distribution" xaxis="min: hamming_distance" yaxis="probability density">
					<series title="density" type="b(1.000000)" color="0x0000ff" encoding="csv">0.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="min: hamming_distance" yaxis="probability">
					<series title="probability" type="b(1.000000)" color="0x0000ff" encoding="csv">0.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="min: hamming_distance" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="min: hamming_distance" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">0.0,0.30849710781876083
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">0.0,0.0
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="min: hamming_distance" yaxis="count">
					<series title="count" type="b(1.000000)" color="0x0000ff" encoding="csv">0.0,10.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,10.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
			</result>
		</query>
	</queries>
</nta>

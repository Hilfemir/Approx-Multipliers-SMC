<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>/* Feel free to cite and/or read details to the model using:
  STRNADEL Josef. Statistical Model Checking of Approximate Circuits: Challenges and Opportunities. In: Proceedings of the 2020 Design, Automation &amp; Test in Europe Conference &amp; Exhibition (DATE). Grenoble: IEEE Computer Society, 2020, pp. 1574-1577. ISBN 978-3-9819263-4-7. Available from: https://ieeexplore.ieee.org/document/9116207 and https://www.fit.vut.cz/research/publication/12055/
 */
double rnd;

broadcast chan change[1000];
int outcnt=0;

int bit_flips = 0;

const int NOPS = 9;
typedef int[0,NOPS-1] tOp;

const int MAX_INT = 65536;

const tOp OP_NOT = 0;
const tOp OP_DLY = 1;
const tOp OP_AND = 2;
const tOp OP_NAND = 3;
const tOp OP_OR = 4;
const tOp OP_NOR = 5;
const tOp OP_XOR = 6;
const tOp OP_XNOR = 7;
const tOp OP_SET = 8;

const int NCOM = 31;
tOp tbl_op[NCOM] = {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 2, 2, 2, 4, 4, 4, 4, 2, 4, 4, 1};

int duration(tOp op){  
    int duration=0;
    if(op==OP_NOT) duration=3;
    if(op==OP_DLY) duration=10;
    if(op==OP_AND) duration=10;
    if(op==OP_NAND) duration=13;
    if(op==OP_OR) duration=10;
    if(op==OP_NOR) duration=13;
    if(op==OP_XOR) duration=20;
    if(op==OP_XNOR) duration=23;
    if(op==OP_SET) duration=0;
    return duration;
}

broadcast chan go, pwrUp;

const double COVERAGE_RATIO = 100.0;
const int DLY_ZERO = 0;

const int TBL_PWR2[31] = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824};

broadcast chan update;
broadcast chan cmpDone;

const int MAX_BITS = 1024;
bool bits[MAX_BITS];
bool difference=false;
bool dif2=false;
int diffctrl=0;
int[-MAX_INT, MAX_INT] err_magn_v;    
double err_magn_r;

int[0, 1073741824] out_sum_all_acc;
int[0, 1073741824] out_sum_all_approx;
int[-1073741824, 1073741824] out_sum_all_diff;

int bitsCovered;
double inCoverage;

bool allCovered=false;

const int NIB_MUL2 = 16;
const int NOB_MUL2 = 16;
const int NTV_MUL2 = TBL_PWR2[NIB_MUL2]; 
const int DLY_MUL2 = 20;                 

/* ===------------------------  ------------------------==== */
int getMasked(int w, int offset, int[0,MAX_INT] data){ 
    int mask = (TBL_PWR2[w]-1);    
   return (data &amp; (mask &lt;&lt; offset)) &gt;&gt; offset;     
}    
bool getBit(int pos, int[0,MAX_INT] data){ return getMasked(1, pos, data); }

const int NIB_ANY = 16;
const int NOB_ANY = 16;
const int NTV_ANY = TBL_PWR2[NIB_ANY]; 
const int DLY_ANY = 20;                 
bool tbl_acc_any[TBL_PWR2[NIB_ANY]][NIB_ANY+NOB_ANY];
//
const int NFUN = 1;
typedef int[0,NFUN-1] tFun;
//-------
const tFun F_MUL = 0;
//
void fill_tbl_acc_any(int win, int wout, tFun f, int fdly){ 
    int[0,MAX_INT] i;
    int[0,MAX_INT] result;
    int j, k, op0, op1;
    for(i=0; i&lt;TBL_PWR2[win]; i++){    
        for(j=0; j&lt;win; j++){
            tbl_acc_any[i][j] = getBit(j,i);
        }
        if(f==F_MUL){
            op0 = getMasked(win/2, 0, i);
            op1 = getMasked(win/2, win/2, i);
            result = op0*op1;
        }
        else { result = 0; }
        for(k=0; k&lt;wout; k++){
            tbl_acc_any[i][win+(wout-k-1)] = getBit(k,result);
        }
    }
}

/* ===------------------------  ------------------------==== */
const int NPI = NIB_MUL2;    
const int NPO = NOB_MUL2;   
//
const int NTV = NTV_MUL2; 
const int DLY = DLY_MUL2;
//
const int PIxy[NPI] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
const int POx[NPO] = {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
//
const int POy[NPO] = {-1, -1, -1, -1, -1, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, -1};
/* ===------------------------  ------------------------==== */

const int MAX_INNER_NODES = 1000;
typedef struct {
    int dly;
    bool flag;
} sNode;
sNode nodes[MAX_INNER_NODES];

const int MAX_INNER_GATES = 1000;
typedef struct {
    bool active;
    int in0;
    int in1;
    int inAvail;
    int out0;
    int dly;
    int depth;
    bool flag;
} sGate;
sGate gates[MAX_INNER_GATES];

int approxCircNodes = 0;
int approxCircGates = 0;
int approxCircDly=0;
int approxCircDepth=0;


bool outEq(){
    bool same=true;
    int i;
    for(i=0; i&lt;NPO; i++){
        if((POx[i]&gt;=0) &amp;&amp; (POy[i]&gt;=0)){
            if(bits[POx[i]] != bits[POy[i]]){
                same = false;
            }
        }
    }
    return same;
}

void diff(){
    int[0, MAX_INT] res_acc=0;
    int[0, MAX_INT] res_approx=0;
    int i;

    difference = !outEq();

     for(i=0; i&lt;=NPO-1; i++){                                       
        res_acc += bits[i+NPI]*TBL_PWR2[i];
        if(POy[i]&gt;=0) res_approx += bits[i+NPI+NPO]*TBL_PWR2[i];    
    }
    out_sum_all_acc += res_acc;
    out_sum_all_approx += res_approx;
    out_sum_all_diff = out_sum_all_acc - out_sum_all_approx;
    err_magn_v = res_acc - res_approx;
    if(res_acc!=0) err_magn_r = 1-((1.0*res_approx)/(1.0*res_acc));
}
</declaration>
	<template>
		<name>tmul2any</name>
		<parameter>const int &amp;PIxy[NPI], const int &amp;POx[NPO], bool &amp;ttbl[TBL_PWR2[NIB_ANY]][NIB_ANY+NOB_ANY], const int  dly</parameter>
		<declaration>
clock x;

int getIdx(int i){
    int idx=-1;

    if(i &lt; NPI) {
        idx = PIxy[i];
    }
    else {
        idx = POx[i-NPI];
    }

    return idx;
}


int[0, MAX_INT] bin2dec()
{
    int[0, MAX_INT] result=0;
    int i;
    for(i=0; i&lt;NIB_MUL2; i++){
        result += bits[getIdx(i)]*TBL_PWR2[i];
    }

    return result;
}


int getOut(){
    int res, i;
    for(i=NIB_MUL2; i&lt;NIB_MUL2+NOB_MUL2; i++){
        res += bits[getIdx(i)]*TBL_PWR2[i-NIB_MUL2];
    }
    return res;    
}

void f(){
    if(POx[15]&gt;=0) bits[POx[15]]=ttbl[bin2dec()][16];
    if(POx[14]&gt;=0) bits[POx[14]]=ttbl[bin2dec()][17];
    if(POx[13]&gt;=0) bits[POx[13]]=ttbl[bin2dec()][18];
    if(POx[12]&gt;=0) bits[POx[12]]=ttbl[bin2dec()][19];
    if(POx[11]&gt;=0) bits[POx[11]]=ttbl[bin2dec()][20];
    if(POx[10]&gt;=0) bits[POx[10]]=ttbl[bin2dec()][21];
    if(POx[9]&gt;=0) bits[POx[9]]=ttbl[bin2dec()][22];
    if(POx[8]&gt;=0) bits[POx[8]]=ttbl[bin2dec()][23];
    if(POx[7]&gt;=0) bits[POx[7]]=ttbl[bin2dec()][24];
    if(POx[6]&gt;=0) bits[POx[6]]=ttbl[bin2dec()][25];
    if(POx[5]&gt;=0) bits[POx[5]]=ttbl[bin2dec()][26];
    if(POx[4]&gt;=0) bits[POx[4]]=ttbl[bin2dec()][27];
    if(POx[3]&gt;=0) bits[POx[3]]=ttbl[bin2dec()][28];
    if(POx[2]&gt;=0) bits[POx[2]]=ttbl[bin2dec()][29];
    if(POx[1]&gt;=0) bits[POx[1]]=ttbl[bin2dec()][30];
    if(POx[0]&gt;=0) bits[POx[0]]=ttbl[bin2dec()][31];

    diffctrl++;
}

void inits(){
    fill_tbl_acc_any(NIB_ANY, NOB_ANY, F_MUL, dly);
}

</declaration>
		<location id="id0" x="-170" y="0">
		</location>
		<location id="id1" x="0" y="0">
			<label kind="invariant" x="-25" y="17">x&lt;=dly</label>
		</location>
		<location id="id2" x="-374" y="0">
			<committed/>
		</location>
		<init ref="id2"/>
		<transition id="id3">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="assignment" x="-297" y="0">inits()</label>
		</transition>
		<transition id="id4">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-152" y="-136">x==dly</label>
			<label kind="assignment" x="17" y="-59">f()</label>
			<nail x="0" y="-102"/>
			<nail x="-170" y="-102"/>
		</transition>
		<transition id="id5">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-110" y="-25">update?</label>
			<label kind="assignment" x="-93" y="0">x=0</label>
		</transition>
	</template>
	<template>
		<name>tmul2_tb_exhaust</name>
		<parameter>const int &amp;PIxy[NPI], const int dly, const double covratio</parameter>
		<declaration>
clock x;
clock tcover;
int input=0;
int nsame=0, inSame=0;
double rCover;

bool inCoverSet[NTV];

int covered()
{
    int cnt=0;

    for(i: int[0,NTV-1])
    {
        if(inCoverSet[i]) {
            cnt++;
        }
    }

    bitsCovered=cnt;

    return cnt;
}

int bin2dec()
{
    int result=0, i;
    for(i=0; i&lt;NPI; i++){
        result += bits[i]*TBL_PWR2[i];
    }

    return result;
}


bool inCovered()
{
  return forall (i : int[0,NTV-1]) inCoverSet[i];    
}



void f(){
    bits[PIxy[0]] = getBit(0, input);
    bits[PIxy[1]] = getBit(1, input);
    bits[PIxy[2]] = getBit(2, input);
    bits[PIxy[3]] = getBit(3, input);
    bits[PIxy[4]] = getBit(4, input);
    bits[PIxy[5]] = getBit(5, input);
    bits[PIxy[6]] = getBit(6, input);
    bits[PIxy[7]] = getBit(7, input);

    if(inCoverSet[input]) { inSame = -1*input; nsame++; }
    else inSame = input;
    inCoverSet[input] = true;
    input = (input+1) % NTV;
    covered();

    rCover = 100.0*bitsCovered / NTV; 
}

void inits(){
    int i;
    for(i:int[0,MAX_INNER_NODES-1]){ nodes[i].flag=false; }
    for(i:int[0,NPI-1]){
        if(exists(j:int[0,NPI-1]) PIxy[j]==i){ 
            nodes[i].flag=true;    
            nodes[i].dly=0;        
        }
        approxCircNodes++;
    }
    for(i=0; i&lt;approxCircGates; i++) gates[i].flag=false;    
    while(exists(i:int[0,MAX_INNER_GATES-1]) (gates[i].flag==false &amp;&amp; i&lt;approxCircGates)){
        approxCircDepth++;
        for(i=0; i&lt;approxCircGates; i++) {
            if(!gates[i].flag &amp;&amp; nodes[gates[i].in0].flag &amp;&amp; nodes[gates[i].in1].flag){  
                nodes[gates[i].out0].dly = (nodes[gates[i].in0].dly&gt;nodes[gates[i].in1].dly?nodes[gates[i].in0].dly:nodes[gates[i].in1].dly) + duration(tbl_op[i]);
                nodes[gates[i].out0].flag=true;
                approxCircNodes++;
                if(nodes[gates[i].out0].dly&lt;approxCircDly){ approxCircDly=nodes[gates[i].out0].dly; }

                gates[i].flag=true;   
            }  
        }
    }
}
</declaration>
		<location id="id6" x="-136" y="0">
			<name x="-153" y="8">apply</name>
			<committed/>
		</location>
		<location id="id7" x="-374" y="0">
			<name x="-382" y="8">get</name>
			<committed/>
		</location>
		<location id="id8" x="34" y="0">
			<name x="17" y="8">done</name>
			<label kind="invariant" x="0" y="-34">tcover'==0</label>
		</location>
		<location id="id9" x="-246" y="-102">
			<name x="-255" y="-136">wait</name>
		</location>
		<location id="id10" x="-510" y="0">
			<urgent/>
		</location>
		<init ref="id10"/>
		<transition id="id11">
			<source ref="id10"/>
			<target ref="id7"/>
			<label kind="assignment" x="-459" y="0">inits()</label>
		</transition>
		<transition id="id12">
			<source ref="id6"/>
			<target ref="id9"/>
			<label kind="guard" x="-221" y="-93">!inCovered()</label>
			<nail x="-136" y="-102"/>
		</transition>
		<transition id="id13">
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="-93" y="-25">inCovered()</label>
			<label kind="assignment" x="-110" y="0">allCovered=true,
x=0</label>
		</transition>
		<transition id="id14">
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-289" y="-25">update!</label>
			<label kind="assignment" x="-280" y="0">f(), x=0</label>
		</transition>
		<transition id="id15">
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-365" y="-93">cmpDone?</label>
			<nail x="-374" y="-102"/>
		</transition>
	</template>
	<template>
		<name>tmul2_tb_nondet</name>
		<parameter>const int range_min, const int range_max, const int dly, const double covratio</parameter>
		<declaration>clock x;
clock tcover;
int input=0;
int nsame=0, inSame=0;
double rCover;
int idx=0;

bool inCoverSet[NTV];

int covered()
{
    int cnt=0;

    for(i: int[0,NTV-1])
    {
        if(inCoverSet[i]) {
            cnt++;
        }
    }

    bitsCovered=cnt;

    return cnt;
}

int bin2dec()
{
    int[0, 1073741824] result=0;
	int i;
    for(i=0; i&lt;NPI; i++){
        result += bits[i]*TBL_PWR2[i];
    }

    return result;
}


bool inCovered()
{
  return forall (i : int[0,NTV-1]) inCoverSet[i];    
}

void f(int i){
    input = bin2dec();
   if(inCoverSet[input]) { inSame = -1*input; nsame++; }
  else inSame = input;
   inCoverSet[bin2dec()] = true;
    covered();

    rCover = 100.0*bitsCovered / NTV; 

    inCoverage = 0.0;
}

void inits(){
    int i;
    for(i:int[0,MAX_INNER_NODES-1]){ nodes[i].flag=false; }
    for(i:int[0,NPI-1]){
        if(exists(j:int[0,NPI-1]) PIxy[j]==i){ 
            nodes[i].flag=true;
            nodes[i].dly=0;      
        }
        approxCircNodes++;
    }
    for(i=0; i&lt;approxCircGates; i++) gates[i].flag=false;    
    while(exists(i:int[0,MAX_INNER_GATES-1]) (gates[i].flag==false &amp;&amp; i&lt;approxCircGates)){
        approxCircDepth++;
        for(i=0; i&lt;approxCircGates; i++) {
            if(!gates[i].flag &amp;&amp; nodes[gates[i].in0].flag &amp;&amp; nodes[gates[i].in1].flag){  
                nodes[gates[i].out0].dly = (nodes[gates[i].in0].dly&gt;nodes[gates[i].in1].dly?nodes[gates[i].in0].dly:nodes[gates[i].in1].dly) + duration(tbl_op[i]);
                nodes[gates[i].out0].flag=true;
                approxCircNodes++;
                if(nodes[gates[i].out0].dly&gt;approxCircDly){ approxCircDly=nodes[gates[i].out0].dly; }

                gates[i].flag=true;
            }  
        }
    }
}</declaration>
		<location id="id16" x="-119" y="-102">
			<name x="-129" y="-136">wait</name>
		</location>
		<location id="id17" x="-246" y="0">
			<name x="-255" y="8">get</name>
			<committed/>
		</location>
		<location id="id18" x="170" y="0">
			<name x="153" y="8">done</name>
			<label kind="invariant" x="136" y="-34">tcover'==0</label>
		</location>
		<location id="id19" x="0" y="0">
			<name x="-17" y="8">apply</name>
			<committed/>
		</location>
		<location id="id20" x="-246" y="-102">
			<committed/>
		</location>
		<location id="id21" x="-374" y="0">
			<urgent/>
		</location>
		<init ref="id21"/>
		<transition id="id22">
			<source ref="id21"/>
			<target ref="id17"/>
			<label kind="assignment" x="-331" y="0">inits()</label>
		</transition>
		<transition id="id23">
			<source ref="id20"/>
			<target ref="id17"/>
			<label kind="select" x="-238" y="-68">i: int[range_min, range_max]</label>
			<label kind="assignment" x="-238" y="-51">bits[i] ^= 1, idx=i</label>
		</transition>
		<transition id="id24">
			<source ref="id16"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-212" y="-102">cmpDone?</label>
		</transition>
		<transition id="id25">
			<source ref="id19"/>
			<target ref="id16"/>
			<label kind="guard" x="-93" y="-93">!inCovered()</label>
			<nail x="0" y="-102"/>
		</transition>
		<transition id="id26">
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-153" y="-25">update!</label>
			<label kind="assignment" x="-144" y="0">f(idx)</label>
		</transition>
		<transition id="id27">
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="guard" x="42" y="-25">inCovered()</label>
			<label kind="assignment" x="34" y="0">allCovered=true</label>
		</transition>
	</template>
	<template>
		<name>tmul2_tb_random</name>
		<parameter>const int dly, const double covratio</parameter>
		<declaration>clock x;
clock tcover;
int input=0;
int nsame=0, inSame=0;
double rCover;
int idx=0;

bool inCoverSet[MAX_INT];

int covered()
{
    int cnt=0;

    for(i: int[0,NTV-1])
    {
        if(inCoverSet[i]) {
            cnt++;
        }
    }

    bitsCovered=cnt;

    return cnt;
}

int[0, MAX_INT] bin2dec()
{
    int[0, MAX_INT] result=0;
    int i;
    for(i=0; i&lt;NPI; i++){
        result += bits[i]*TBL_PWR2[i];
    }

    return result;
}


bool inCovered()
{
  return forall (i : int[0,NTV-1]) inCoverSet[i];    
}

void f(int i){
    int j;
    int[0, MAX_INT] imax = fint(exp2(NPI));

//    rnd = random(100);
//    rnd = random_arcsine(-10,10);
//    rnd = random_beta(0.1,5);
//    rnd = random_gamma(0.5,5);
//    rnd = random_normal(10,1);
//    rnd = random_poisson(1.0);
//    rnd = random_weibull(0.5,5);
//    rnd = random_tri(0,10,100);

    j=fint(random(NPI));                   // pro (NPI) je out 0...NPI-1
 //   j=fint(random_normal(NPI/2.0,0.5));    // pro (NPI/2.0, 0.5) je out NPI/2 +- 0.5
 //   j=fint(random_poisson(1.0));           // pro (1.0) je out 1.0 +- 
//    j=fint(random_arcsine(0.0, NPI-1));    // pro (0.0, NPI-1) je out mezi 0...NPI-1 (aka random())
  //  j=fint(random_tri(0.0, 0.5, NPI-1));    // pro (0.0, 0.5, NPI-1) je out mezi 0...NPI-1 (aka random()), se stredem u 0.5
  //  j = fint(random_weibull(10, 3.0));    // pro (10.0, 3.0) je out mezi 0...3 (aka random()), se stredem vys (pro 10)
  //  j = fint(random_gamma(1.0,0.5));    // pro (1.0, 0.5) je out mezi 0...5 (aka random()), se stredem niz (kolem 1.0)
    if(j &lt; 0) j=0;
    if(j &gt; (NPI-1)) j=NPI-1;
    bits[j] ^= 1;

   if(inCoverSet[input]) { inSame = -1*input; nsame++; }
   else inSame = input;
   inCoverSet[bin2dec()] = true;
    covered();

    rCover = 100.0*bitsCovered / NTV; 

    inCoverage = 0.0;
}

void inits(){
    int i;
    for(i:int[0,MAX_INNER_NODES-1]){ nodes[i].flag=false; }
    for(i:int[0,NPI-1]){
        if(exists(j:int[0,NPI-1]) PIxy[j]==i){ 
            nodes[i].flag=true;    
            nodes[i].dly=0;        
        }
        approxCircNodes++;
    }
    for(i=0; i&lt;approxCircGates; i++) gates[i].flag=false;
    while(exists(i:int[0,MAX_INNER_GATES-1]) (gates[i].flag==false &amp;&amp; i&lt;approxCircGates)){
        approxCircDepth++;
        for(i=0; i&lt;approxCircGates; i++) {
            if(!gates[i].flag &amp;&amp; nodes[gates[i].in0].flag &amp;&amp; nodes[gates[i].in1].flag){  
                nodes[gates[i].out0].dly = (nodes[gates[i].in0].dly&gt;nodes[gates[i].in1].dly?nodes[gates[i].in0].dly:nodes[gates[i].in1].dly) + duration(tbl_op[i]);
                nodes[gates[i].out0].flag=true;
                approxCircNodes++;
                if(nodes[gates[i].out0].dly&gt;approxCircDly){ approxCircDly=nodes[gates[i].out0].dly; }

                gates[i].flag=true; 
            }  
        }
    }
}</declaration>
		<location id="id28" x="-119" y="-102">
			<name x="-129" y="-136">wait</name>
		</location>
		<location id="id29" x="-246" y="0">
			<name x="-255" y="8">get</name>
			<committed/>
		</location>
		<location id="id30" x="170" y="0">
			<name x="153" y="8">done</name>
			<label kind="invariant" x="136" y="-34">tcover'==0</label>
		</location>
		<location id="id31" x="0" y="0">
			<name x="-17" y="8">apply</name>
			<committed/>
		</location>
		<location id="id32" x="-246" y="-102">
			<committed/>
		</location>
		<location id="id33" x="-374" y="0">
			<urgent/>
		</location>
		<init ref="id33"/>
		<transition id="id34">
			<source ref="id33"/>
			<target ref="id29"/>
			<label kind="assignment" x="-331" y="0">inits()</label>
		</transition>
		<transition id="id35">
			<source ref="id32"/>
			<target ref="id29"/>
		</transition>
		<transition id="id36">
			<source ref="id28"/>
			<target ref="id32"/>
			<label kind="synchronisation" x="-212" y="-102">cmpDone?</label>
		</transition>
		<transition id="id37">
			<source ref="id31"/>
			<target ref="id28"/>
			<label kind="guard" x="-93" y="-93">!inCovered()</label>
			<nail x="0" y="-102"/>
		</transition>
		<transition id="id38">
			<source ref="id29"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-153" y="-25">update!</label>
			<label kind="assignment" x="-144" y="0">f(idx)</label>
		</transition>
		<transition id="id39">
			<source ref="id31"/>
			<target ref="id30"/>
			<label kind="guard" x="42" y="-25">inCovered()</label>
			<label kind="assignment" x="34" y="0">allCovered=true</label>
		</transition>
	</template>
	<template>
		<name>syncPrimary</name>
		<declaration>int idx;</declaration>
		<location id="id40" x="-748" y="-306">
		</location>
		<location id="id41" x="-646" y="-306">
			<committed/>
		</location>
		<location id="id42" x="-510" y="-306">
			<committed/>
		</location>
		<init ref="id40"/>
		<transition id="id43">
			<source ref="id42"/>
			<target ref="id40"/>
			<label kind="guard" x="-646" y="-399">idx&gt;=NPI</label>
			<nail x="-510" y="-374"/>
			<nail x="-748" y="-374"/>
		</transition>
		<transition id="id44">
			<source ref="id42"/>
			<target ref="id41"/>
			<label kind="guard" x="-595" y="-323">idx&lt;NPI</label>
			<nail x="-578" y="-272"/>
		</transition>
		<transition id="id45">
			<source ref="id41"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-612" y="-340">change[idx]!</label>
			<label kind="assignment" x="-629" y="-280">idx++</label>
		</transition>
		<transition id="id46">
			<source ref="id40"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="-730" y="-323">update?</label>
			<label kind="assignment" x="-714" y="-306">idx=0</label>
		</transition>
	</template>
	<template>
		<name>eval_diff</name>
		<parameter>const int dly</parameter>
		<declaration>clock x;</declaration>
		<location id="id47" x="-238" y="0">
			<label kind="invariant" x="-297" y="-8">x&lt;=dly</label>
		</location>
		<location id="id48" x="-102" y="0">
			<committed/>
		</location>
		<init ref="id47"/>
		<transition id="id49">
			<source ref="id48"/>
			<target ref="id47"/>
			<label kind="synchronisation" x="-178" y="51">cmpDone!</label>
			<label kind="assignment" x="-246" y="110">outcnt=0, diffctrl=0, x=0</label>
			<nail x="-102" y="110"/>
			<nail x="-238" y="110"/>
		</transition>
		<transition id="id50">
			<source ref="id47"/>
			<target ref="id47"/>
			<label kind="guard" x="-331" y="-93">diffctrl&lt;2
&amp;&amp; x==dly</label>
			<label kind="assignment" x="-289" y="-42">x=0</label>
			<nail x="-263" y="-76"/>
			<nail x="-229" y="-76"/>
		</transition>
		<transition id="id51">
			<source ref="id47"/>
			<target ref="id48"/>
			<label kind="guard" x="-204" y="0">diffctrl==2</label>
			<label kind="assignment" x="-212" y="-68">err_magn_v=0,
err_magn_r=0.0,
diff()</label>
		</transition>
	</template>
	<template>
		<name>gate2</name>
		<parameter>const int id, const int a0, const int a1, const int y0, broadcast chan &amp;cin0, broadcast chan &amp;cin1, broadcast chan &amp;cout0</parameter>
		<declaration>clock x;

void inits(){
    int i;

    // collect info about the approx.circuit topology 
    gates[id].active = true;
    gates[id].in0 = a0; 
    gates[id].in1 = a1; 
    gates[id].inAvail = 0; 
    gates[id].out0 = y0; 
    gates[id].dly = duration(tbl_op[id]);
    gates[id].depth = -1;
    gates[id].flag = false;

    approxCircGates++;    
}

void outGen(tOp op){
 //   outSync(y0);

	bool original_bit = bits[y0];

    if(op == OP_AND){
        bits[y0] = bits[a0] &amp; bits[a1];        
    }
    else if(op == OP_NAND){
        bits[y0] = not (bits[a0] &amp; bits[a1]);        
    }
    else if(op == OP_OR){
        bits[y0] = bits[a0] | bits[a1];        
    }
    else if(op == OP_NOR){
        bits[y0] = not (bits[a0] | bits[a1]);        
    }
    else if(op == OP_XOR){
        bits[y0] = (bits[a0] != bits[a1]);        
    }
    else if(op == OP_XNOR){
        bits[y0] = (bits[a0] == bits[a1]);
    }
    else if(op == OP_SET){
        //not really a gate but should be fine
        bits[y0] = bits[a0];
    }
    else {    // unsupported operation
    }

	if(original_bit != bits[y0]) {
		bit_flips++;
	}

    if(id==2){ 
        if(diffctrl&lt;2) diffctrl++;
    }  
}</declaration>
		<location id="id52" x="-170" y="0">
		</location>
		<location id="id53" x="0" y="0">
			<label kind="invariant" x="-17" y="17">x&lt;=duration(tbl_op[id])</label>
		</location>
		<location id="id54" x="-272" y="0">
			<committed/>
		</location>
		<init ref="id54"/>
		<transition id="id55">
			<source ref="id54"/>
			<target ref="id52"/>
			<label kind="assignment" x="-238" y="0">inits()</label>
		</transition>
		<transition id="id56">
			<source ref="id52"/>
			<target ref="id53"/>
			<label kind="synchronisation" x="-144" y="0">cin1?</label>
			<label kind="assignment" x="-76" y="0">x=0</label>
			<nail x="-85" y="0"/>
		</transition>
		<transition id="id57">
			<source ref="id53"/>
			<target ref="id52"/>
			<label kind="guard" x="-110" y="-127">x==duration(tbl_op[id])</label>
			<label kind="synchronisation" x="8" y="-68">cout0!</label>
			<label kind="assignment" x="-144" y="-102">outGen(tbl_op[id])</label>
			<nail x="0" y="-102"/>
			<nail x="-170" y="-102"/>
		</transition>
		<transition id="id58">
			<source ref="id52"/>
			<target ref="id53"/>
			<label kind="synchronisation" x="-136" y="-42">cin0?</label>
			<label kind="assignment" x="-59" y="-42">x=0</label>
			<nail x="-85" y="-34"/>
		</transition>
	</template>
	<system>
// Place template instantiations here.

synPri = syncPrimary();
mul2A = tmul2any(PIxy, POx, tbl_acc_any, DLY_MUL2);

//mul2Atb = tmul2_tb_exhaust(PIxy, DLY_MUL2, COVERAGE_RATIO);
//mul2Atb = tmul2_tb_nondet(PIxy[0], PIxy[7], DLY_MUL2, COVERAGE_RATIO);
mul2Atb = tmul2_tb_random(DLY_MUL2, COVERAGE_RATIO);

ediff = eval_diff(5);

//gates
g22 = gate2(0, PIxy[14], PIxy[0], POy[6], change[14], change[0], change[22]);
g23 = gate2(1, PIxy[15], PIxy[0], 23, change[15], change[0], change[23]);
g29 = gate2(2, PIxy[13], PIxy[0], POy[5], change[13], change[0], change[29]);
g30 = gate2(3, PIxy[14], PIxy[1], 30, change[14], change[1], change[30]);
g46 = gate2(4, PIxy[14], PIxy[5], 46, change[14], change[5], change[46]);
g47 = gate2(5, PIxy[15], PIxy[3], 47, change[15], change[3], change[47]);
g53 = gate2(6, PIxy[15], PIxy[4], 53, change[15], change[4], change[53]);
g54 = gate2(7, PIxy[14], PIxy[4], 54, change[14], change[4], change[54]);
g60 = gate2(8, PIxy[12], PIxy[7], 60, change[12], change[7], change[60]);
g61 = gate2(9, PIxy[13], PIxy[5], 61, change[13], change[5], change[61]);
g70 = gate2(10, PIxy[14], PIxy[6], 70, change[14], change[6], change[70]);
g71 = gate2(11, PIxy[15], PIxy[6], 71, change[15], change[6], change[71]);
g77 = gate2(12, PIxy[13], PIxy[7], 77, change[13], change[7], change[77]);
g78 = gate2(13, PIxy[14], PIxy[7], 78, change[14], change[7], change[78]);
g79 = gate2(14, PIxy[15], PIxy[7], POy[14], change[15], change[7], change[79]);
g107 = gate2(15, 23, 30, 107, change[23], change[30], change[107]);
g136 = gate2(16, 46, 53, 136, change[46], change[53], change[136]);
g139 = gate2(17, 136, 60, POy[11], change[136], change[60], change[139]);
g141 = gate2(18, 47, 54, 141, change[47], change[54], change[141]);
g144 = gate2(19, 141, 61, 144, change[141], change[61], change[144]);
g156 = gate2(20, PIxy[5], PIxy[15], 156, change[5], change[15], change[156]);
g180 = gate2(21, PIxy[15], PIxy[1], POy[8], change[15], change[1], change[180]);
g189 = gate2(22, PIxy[8], PIxy[7], 189, change[8], change[7], change[189]);
g212 = gate2(23, 156, 70, 212, change[156], change[70], change[212]);
g215 = gate2(24, 212, 77, POy[12], change[212], change[77], change[215]);
g218 = gate2(25, 71, 78, POy[13], change[71], change[78], change[218]);
g236 = gate2(26, 107, 189, POy[7], change[107], change[189], change[236]);
g242 = gate2(27, PIxy[7], PIxy[11], 242, change[7], change[11], change[242]);
g251 = gate2(28, 144, 242, POy[10], change[144], change[242], change[251]);
g252 = gate2(29, 144, 242, POy[9], change[144], change[242], change[252]);

// List one or more processes to be composed into a system.
system
synPri,
mul2A, 
mul2Atb,
ediff,
g22,
g23,
g29,
g30,
g46,
g47,
g53,
g54,
g60,
g61,
g70,
g71,
g77,
g78,
g79,
g107,
g136,
g139,
g141,
g144,
g156,
g180,
g189,
g212,
g215,
g218,
g236,
g242,
g251,
g252;
</system>
	<queries>
		<query>
			<formula>E[&lt;=25000; 10] (max:mul2Atb.tcover)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=350; 100] (max:bitsCovered)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>Pr[&lt;=25000] (&lt;&gt;bitsCovered&gt;14)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=350;1] {bits[0], 2+bits[1], 4+bits[2], 6+bits[3], 8+bits[4], 10+bits[5], 12+bits[6], 14+bits[7], bitsCovered, 16+allCovered}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=1250;1] {bits[0], 2+bits[1], 4+bits[2], 6+bits[3], 10+bits[4], 12+bits[5], 14+bits[6], 16+bits[7], 20+bits[8], 22+bits[9], 24+bits[10], 26+bits[11], 28+bits[12], 32+difference, out_sum_all_acc, out_sum_all_approx}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=1500;1] {bits[0], 2+bits[1], 4+bits[2], 6+bits[3], 8+bits[4], 10+bits[5], 12+bits[6], 14+bits[7], 20+bits[8], 22+bits[9], 24+bits[10], 26+bits[11], bitsCovered, 20+allCovered, 30+mul2Atb.inSame, 40+mul2Atb.input, 30+mul2Atb.nsame, mul2Atb.rCover, 60+difference*10}
			</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-02-29 15:41:33 +0100">
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="bits[0]" type="l" color="0xff0000" encoding="csv">0.0,0.0
21.297561249230057,0.0
21.297561249230057,1.0
207.09099270985462,1.0
207.09099270985462,0.0
247.09099270985462,0.0
247.09099270985462,1.0
513.5379768034909,1.0
513.5379768034909,0.0
685.9790428273845,0.0
685.9790428273845,1.0
730.7233484939206,1.0
730.7233484939206,0.0
1500.0,0.0
					</series>
					<series title="2 + bits[1]" type="l" color="0xff5100" encoding="csv">0.0,2.0
167.09099270985462,2.0
167.09099270985462,3.0
287.0909927098546,3.0
287.0909927098546,2.0
448.5872823384125,2.0
448.5872823384125,3.0
705.9790428273845,3.0
705.9790428273845,2.0
840.6962117168587,2.0
840.6962117168587,3.0
1007.9556403052993,3.0
1007.9556403052993,2.0
1049.6485536464024,2.0
1049.6485536464024,3.0
1409.662907080492,3.0
1409.662907080492,2.0
1429.662907080492,2.0
1429.662907080492,3.0
1449.662907080492,3.0
1449.662907080492,2.0
1474.0548684843816,2.0
1474.0548684843816,3.0
1500.0,3.0
					</series>
					<series title="4 + bits[2]" type="l" color="0xffa100" encoding="csv">0.0,4.0
123.14697073888965,4.0
123.14697073888965,5.0
147.09099270985462,5.0
147.09099270985462,4.0
187.09099270985462,4.0
187.09099270985462,5.0
307.34012943459675,5.0
307.34012943459675,4.0
428.5872823384125,4.0
428.5872823384125,5.0
473.4237691061571,5.0
473.4237691061571,4.0
535.2031725610141,4.0
535.2031725610141,5.0
774.5682901912369,5.0
774.5682901912369,4.0
863.2610603189096,4.0
863.2610603189096,5.0
927.362184143858,5.0
927.362184143858,4.0
1135.5839175463188,4.0
1135.5839175463188,5.0
1179.1425792057998,5.0
1179.1425792057998,4.0
1494.0548684843816,4.0
1494.0548684843816,5.0
1500.0,5.0
					</series>
					<series title="6 + bits[3]" type="l" color="0xfff200" encoding="csv">0.0,6.0
103.14697073888965,6.0
103.14697073888965,7.0
267.0909927098546,7.0
267.0909927098546,6.0
348.5872823384125,6.0
348.5872823384125,7.0
388.5872823384125,7.0
388.5872823384125,6.0
1305.1370820810553,6.0
1305.1370820810553,7.0
1500.0,7.0
					</series>
					<series title="8 + bits[4]" type="l" color="0xbcff00" encoding="csv">0.0,8.0
41.29756124923006,8.0
41.29756124923006,9.0
327.34012943459675,9.0
327.34012943459675,8.0
557.2737174783833,8.0
557.2737174783833,9.0
601.3490228285082,9.0
601.3490228285082,8.0
641.3490228285082,8.0
641.3490228285082,9.0
754.5682901912369,9.0
754.5682901912369,8.0
987.362184143858,8.0
987.362184143858,9.0
1389.662907080492,9.0
1389.662907080492,8.0
1500.0,8.0
					</series>
					<series title="10 + bits[5]" type="l" color="0x6bff00" encoding="csv">0.0,10.0
83.14697073888965,10.0
83.14697073888965,11.0
621.3490228285082,11.0
621.3490228285082,10.0
795.2199003950227,10.0
795.2199003950227,11.0
818.3989280986134,11.0
818.3989280986134,10.0
1089.6485536464024,10.0
1089.6485536464024,11.0
1155.9217488009017,11.0
1155.9217488009017,10.0
1199.398839736823,10.0
1199.398839736823,11.0
1326.3813365215901,11.0
1326.3813365215901,10.0
1347.1098656160757,10.0
1347.1098656160757,11.0
1500.0,11.0
					</series>
					<series title="12 + bits[6]" type="l" color="0x1bff00" encoding="csv">0.0,12.0
493.5068638785742,12.0
493.5068638785742,13.0
579.9982530483976,13.0
579.9982530483976,12.0
665.9790428273845,12.0
665.9790428273845,13.0
1027.9556403052993,13.0
1027.9556403052993,12.0
1069.6485536464024,12.0
1069.6485536464024,13.0
1243.2703601347748,13.0
1243.2703601347748,12.0
1369.662907080492,12.0
1369.662907080492,13.0
1500.0,13.0
					</series>
					<series title="14 + bits[7]" type="l" color="0x00ff36" encoding="csv">0.0,14.0
61.29756124923006,14.0
61.29756124923006,15.0
227.09099270985462,15.0
227.09099270985462,14.0
368.5872823384125,14.0
368.5872823384125,15.0
408.5872823384125,15.0
408.5872823384125,14.0
883.2610603189096,14.0
883.2610603189096,15.0
903.2610603189096,15.0
903.2610603189096,14.0
947.362184143858,14.0
947.362184143858,15.0
967.362184143858,15.0
967.362184143858,14.0
1112.785903721815,14.0
1112.785903721815,15.0
1220.69129726151,15.0
1220.69129726151,14.0
1265.1370820810553,14.0
1265.1370820810553,15.0
1285.1370820810553,15.0
1285.1370820810553,14.0
1500.0,14.0
					</series>
					<series title="20 + bits[8]" type="l" color="0x00ff86" encoding="csv">0.0,20.0
1500.0,20.0
					</series>
					<series title="22 + bits[9]" type="l" color="0x00ffd7" encoding="csv">0.0,22.0
1500.0,22.0
					</series>
					<series title="24 + bits[10]" type="l" color="0x00d7ff" encoding="csv">0.0,24.0
1500.0,24.0
					</series>
					<series title="26 + bits[11]" type="l" color="0x0086ff" encoding="csv">0.0,26.0
1500.0,26.0
					</series>
					<series title="bitsCovered" type="l" color="0x0036ff" encoding="csv">0.0,0.0
0.0,1.0
21.297561249230057,1.0
21.297561249230057,2.0
41.29756124923006,2.0
41.29756124923006,3.0
61.29756124923006,3.0
61.29756124923006,4.0
83.14697073888965,4.0
83.14697073888965,5.0
103.14697073888965,5.0
103.14697073888965,6.0
123.14697073888965,6.0
123.14697073888965,7.0
167.09099270985462,7.0
167.09099270985462,8.0
187.09099270985462,8.0
187.09099270985462,9.0
207.09099270985462,9.0
207.09099270985462,10.0
227.09099270985462,10.0
227.09099270985462,11.0
247.09099270985462,11.0
247.09099270985462,12.0
267.0909927098546,12.0
267.0909927098546,13.0
287.0909927098546,13.0
287.0909927098546,14.0
307.34012943459675,14.0
307.34012943459675,15.0
327.34012943459675,15.0
327.34012943459675,16.0
348.5872823384125,16.0
348.5872823384125,17.0
368.5872823384125,17.0
368.5872823384125,18.0
388.5872823384125,18.0
388.5872823384125,19.0
428.5872823384125,19.0
428.5872823384125,20.0
448.5872823384125,20.0
448.5872823384125,21.0
473.4237691061571,21.0
473.4237691061571,22.0
493.5068638785742,22.0
493.5068638785742,23.0
513.5379768034909,23.0
513.5379768034909,24.0
535.2031725610141,24.0
535.2031725610141,25.0
557.2737174783833,25.0
557.2737174783833,26.0
579.9982530483976,26.0
579.9982530483976,27.0
601.3490228285082,27.0
601.3490228285082,28.0
621.3490228285082,28.0
621.3490228285082,29.0
641.3490228285082,29.0
641.3490228285082,30.0
665.9790428273845,30.0
665.9790428273845,31.0
685.9790428273845,31.0
685.9790428273845,32.0
705.9790428273845,32.0
705.9790428273845,33.0
730.7233484939206,33.0
730.7233484939206,34.0
754.5682901912369,34.0
754.5682901912369,35.0
774.5682901912369,35.0
774.5682901912369,36.0
795.2199003950227,36.0
795.2199003950227,37.0
840.6962117168587,37.0
840.6962117168587,38.0
863.2610603189096,38.0
863.2610603189096,39.0
883.2610603189096,39.0
883.2610603189096,40.0
947.362184143858,40.0
947.362184143858,41.0
987.362184143858,41.0
987.362184143858,42.0
1007.9556403052993,42.0
1007.9556403052993,43.0
1027.9556403052993,43.0
1027.9556403052993,44.0
1049.6485536464024,44.0
1049.6485536464024,45.0
1089.6485536464024,45.0
1089.6485536464024,46.0
1112.785903721815,46.0
1112.785903721815,47.0
1135.5839175463188,47.0
1135.5839175463188,48.0
1155.9217488009017,48.0
1155.9217488009017,49.0
1179.1425792057998,49.0
1179.1425792057998,50.0
1243.2703601347748,50.0
1243.2703601347748,51.0
1265.1370820810553,51.0
1265.1370820810553,52.0
1305.1370820810553,52.0
1305.1370820810553,53.0
1326.3813365215901,53.0
1326.3813365215901,54.0
1369.662907080492,54.0
1369.662907080492,55.0
1389.662907080492,55.0
1389.662907080492,56.0
1409.662907080492,56.0
1409.662907080492,57.0
1494.0548684843816,57.0
1494.0548684843816,58.0
1500.0,58.0
					</series>
					<series title="20 + allCovered" type="l" color="0x1b00ff" encoding="csv">0.0,20.0
1500.0,20.0
					</series>
					<series title="30 + mul2Atb.inSame" type="l" color="0x6b00ff" encoding="csv">0.0,30.0
21.297561249230057,30.0
21.297561249230057,31.0
41.29756124923006,31.0
41.29756124923006,47.0
61.29756124923006,47.0
61.29756124923006,175.0
83.14697073888965,175.0
83.14697073888965,207.0
103.14697073888965,207.0
103.14697073888965,215.0
123.14697073888965,215.0
123.14697073888965,219.0
147.09099270985462,219.0
147.09099270985462,-155.0
167.09099270985462,-155.0
167.09099270985462,217.0
187.09099270985462,217.0
187.09099270985462,221.0
207.09099270985462,221.0
207.09099270985462,220.0
227.09099270985462,220.0
227.09099270985462,92.0
247.09099270985462,92.0
247.09099270985462,93.0
267.0909927098546,93.0
267.0909927098546,85.0
287.0909927098546,85.0
287.0909927098546,83.0
307.34012943459675,83.0
307.34012943459675,79.0
327.34012943459675,79.0
327.34012943459675,63.0
348.5872823384125,63.0
348.5872823384125,71.0
368.5872823384125,71.0
368.5872823384125,199.0
388.5872823384125,199.0
388.5872823384125,191.0
408.5872823384125,191.0
408.5872823384125,-3.0
428.5872823384125,-3.0
428.5872823384125,67.0
448.5872823384125,67.0
448.5872823384125,69.0
473.4237691061571,69.0
473.4237691061571,65.0
493.5068638785742,65.0
493.5068638785742,129.0
513.5379768034909,129.0
513.5379768034909,128.0
535.2031725610141,128.0
535.2031725610141,132.0
557.2737174783833,132.0
557.2737174783833,148.0
579.9982530483976,148.0
579.9982530483976,84.0
601.3490228285082,84.0
601.3490228285082,68.0
621.3490228285082,68.0
621.3490228285082,36.0
641.3490228285082,36.0
641.3490228285082,52.0
665.9790428273845,52.0
665.9790428273845,116.0
685.9790428273845,116.0
685.9790428273845,117.0
705.9790428273845,117.0
705.9790428273845,115.0
730.7233484939206,115.0
730.7233484939206,114.0
754.5682901912369,114.0
754.5682901912369,98.0
774.5682901912369,98.0
774.5682901912369,94.0
795.2199003950227,94.0
795.2199003950227,126.0
818.3989280986134,126.0
818.3989280986134,-34.0
840.6962117168587,-34.0
840.6962117168587,96.0
863.2610603189096,96.0
863.2610603189096,100.0
883.2610603189096,100.0
883.2610603189096,228.0
903.2610603189096,228.0
903.2610603189096,-40.0
927.362184143858,-40.0
927.362184143858,-36.0
947.362184143858,-36.0
947.362184143858,224.0
967.362184143858,224.0
967.362184143858,-36.0
987.362184143858,-36.0
987.362184143858,112.0
1007.9556403052993,112.0
1007.9556403052993,110.0
1027.9556403052993,110.0
1027.9556403052993,46.0
1049.6485536464024,46.0
1049.6485536464024,48.0
1069.6485536464024,48.0
1069.6485536464024,-52.0
1089.6485536464024,-52.0
1089.6485536464024,144.0
1112.785903721815,144.0
1112.785903721815,272.0
1135.5839175463188,272.0
1135.5839175463188,276.0
1155.9217488009017,276.0
1155.9217488009017,244.0
1179.1425792057998,244.0
1179.1425792057998,240.0
1199.398839736823,240.0
1199.398839736823,-212.0
1220.69129726151,-212.0
1220.69129726151,-84.0
1243.2703601347748,-84.0
1243.2703601347748,80.0
1265.1370820810553,80.0
1265.1370820810553,208.0
1285.1370820810553,208.0
1285.1370820810553,-20.0
1305.1370820810553,-20.0
1305.1370820810553,88.0
1326.3813365215901,88.0
1326.3813365215901,56.0
1347.1098656160757,56.0
1347.1098656160757,-28.0
1369.662907080492,-28.0
1369.662907080492,152.0
1389.662907080492,152.0
1389.662907080492,136.0
1409.662907080492,136.0
1409.662907080492,134.0
1429.662907080492,134.0
1429.662907080492,-76.0
1449.662907080492,-76.0
1449.662907080492,-74.0
1474.0548684843816,-74.0
1474.0548684843816,-76.0
1494.0548684843816,-76.0
1494.0548684843816,140.0
1500.0,140.0
					</series>
					<series title="40 + mul2Atb.input" type="l" color="0xbc00ff" encoding="csv">0.0,40.0
21.297561249230057,40.0
21.297561249230057,41.0
41.29756124923006,41.0
41.29756124923006,57.0
61.29756124923006,57.0
61.29756124923006,185.0
83.14697073888965,185.0
83.14697073888965,217.0
103.14697073888965,217.0
103.14697073888965,225.0
123.14697073888965,225.0
123.14697073888965,229.0
147.09099270985462,229.0
147.09099270985462,225.0
167.09099270985462,225.0
167.09099270985462,227.0
187.09099270985462,227.0
187.09099270985462,231.0
207.09099270985462,231.0
207.09099270985462,230.0
227.09099270985462,230.0
227.09099270985462,102.0
247.09099270985462,102.0
247.09099270985462,103.0
267.0909927098546,103.0
267.0909927098546,95.0
287.0909927098546,95.0
287.0909927098546,93.0
307.34012943459675,93.0
307.34012943459675,89.0
327.34012943459675,89.0
327.34012943459675,73.0
348.5872823384125,73.0
348.5872823384125,81.0
368.5872823384125,81.0
368.5872823384125,209.0
388.5872823384125,209.0
388.5872823384125,201.0
408.5872823384125,201.0
408.5872823384125,73.0
428.5872823384125,73.0
428.5872823384125,77.0
448.5872823384125,77.0
448.5872823384125,79.0
473.4237691061571,79.0
473.4237691061571,75.0
493.5068638785742,75.0
493.5068638785742,139.0
513.5379768034909,139.0
513.5379768034909,138.0
535.2031725610141,138.0
535.2031725610141,142.0
557.2737174783833,142.0
557.2737174783833,158.0
579.9982530483976,158.0
579.9982530483976,94.0
601.3490228285082,94.0
601.3490228285082,78.0
621.3490228285082,78.0
621.3490228285082,46.0
641.3490228285082,46.0
641.3490228285082,62.0
665.9790428273845,62.0
665.9790428273845,126.0
685.9790428273845,126.0
685.9790428273845,127.0
705.9790428273845,127.0
705.9790428273845,125.0
730.7233484939206,125.0
730.7233484939206,124.0
754.5682901912369,124.0
754.5682901912369,108.0
774.5682901912369,108.0
774.5682901912369,104.0
795.2199003950227,104.0
795.2199003950227,136.0
818.3989280986134,136.0
818.3989280986134,104.0
840.6962117168587,104.0
840.6962117168587,106.0
863.2610603189096,106.0
863.2610603189096,110.0
883.2610603189096,110.0
883.2610603189096,238.0
903.2610603189096,238.0
903.2610603189096,110.0
927.362184143858,110.0
927.362184143858,106.0
947.362184143858,106.0
947.362184143858,234.0
967.362184143858,234.0
967.362184143858,106.0
987.362184143858,106.0
987.362184143858,122.0
1007.9556403052993,122.0
1007.9556403052993,120.0
1027.9556403052993,120.0
1027.9556403052993,56.0
1049.6485536464024,56.0
1049.6485536464024,58.0
1069.6485536464024,58.0
1069.6485536464024,122.0
1089.6485536464024,122.0
1089.6485536464024,154.0
1112.785903721815,154.0
1112.785903721815,282.0
1135.5839175463188,282.0
1135.5839175463188,286.0
1155.9217488009017,286.0
1155.9217488009017,254.0
1179.1425792057998,254.0
1179.1425792057998,250.0
1199.398839736823,250.0
1199.398839736823,282.0
1220.69129726151,282.0
1220.69129726151,154.0
1243.2703601347748,154.0
1243.2703601347748,90.0
1265.1370820810553,90.0
1265.1370820810553,218.0
1285.1370820810553,218.0
1285.1370820810553,90.0
1305.1370820810553,90.0
1305.1370820810553,98.0
1326.3813365215901,98.0
1326.3813365215901,66.0
1347.1098656160757,66.0
1347.1098656160757,98.0
1369.662907080492,98.0
1369.662907080492,162.0
1389.662907080492,162.0
1389.662907080492,146.0
1409.662907080492,146.0
1409.662907080492,144.0
1429.662907080492,144.0
1429.662907080492,146.0
1449.662907080492,146.0
1449.662907080492,144.0
1474.0548684843816,144.0
1474.0548684843816,146.0
1494.0548684843816,146.0
1494.0548684843816,150.0
1500.0,150.0
					</series>
					<series title="30 + mul2Atb.nsame" type="l" color="0xff00f2" encoding="csv">0.0,30.0
147.09099270985462,30.0
147.09099270985462,31.0
408.5872823384125,31.0
408.5872823384125,32.0
818.3989280986134,32.0
818.3989280986134,33.0
903.2610603189096,33.0
903.2610603189096,34.0
927.362184143858,34.0
927.362184143858,35.0
967.362184143858,35.0
967.362184143858,36.0
1069.6485536464024,36.0
1069.6485536464024,37.0
1199.398839736823,37.0
1199.398839736823,38.0
1220.69129726151,38.0
1220.69129726151,39.0
1285.1370820810553,39.0
1285.1370820810553,40.0
1347.1098656160757,40.0
1347.1098656160757,41.0
1429.662907080492,41.0
1429.662907080492,42.0
1449.662907080492,42.0
1449.662907080492,43.0
1474.0548684843816,43.0
1474.0548684843816,44.0
1500.0,44.0
					</series>
					<series title="mul2Atb.rCover" type="l" color="0xff00a1" encoding="csv">0.0,0.0
0.0,0.00152587890625
21.297561249230057,0.00152587890625
21.297561249230057,0.0030517578125
41.29756124923006,0.0030517578125
41.29756124923006,0.00457763671875
61.29756124923006,0.00457763671875
61.29756124923006,0.006103515625
83.14697073888965,0.006103515625
83.14697073888965,0.00762939453125
103.14697073888965,0.00762939453125
103.14697073888965,0.0091552734375
123.14697073888965,0.0091552734375
123.14697073888965,0.01068115234375
167.09099270985462,0.01068115234375
167.09099270985462,0.01220703125
187.09099270985462,0.01220703125
187.09099270985462,0.01373291015625
207.09099270985462,0.01373291015625
207.09099270985462,0.0152587890625
227.09099270985462,0.0152587890625
227.09099270985462,0.01678466796875
247.09099270985462,0.01678466796875
247.09099270985462,0.018310546875
267.0909927098546,0.018310546875
267.0909927098546,0.01983642578125
287.0909927098546,0.01983642578125
287.0909927098546,0.0213623046875
307.34012943459675,0.0213623046875
307.34012943459675,0.02288818359375
327.34012943459675,0.02288818359375
327.34012943459675,0.0244140625
348.5872823384125,0.0244140625
348.5872823384125,0.02593994140625
368.5872823384125,0.02593994140625
368.5872823384125,0.0274658203125
388.5872823384125,0.0274658203125
388.5872823384125,0.02899169921875
428.5872823384125,0.02899169921875
428.5872823384125,0.030517578125
448.5872823384125,0.030517578125
448.5872823384125,0.03204345703125
473.4237691061571,0.03204345703125
473.4237691061571,0.0335693359375
493.5068638785742,0.0335693359375
493.5068638785742,0.03509521484375
513.5379768034909,0.03509521484375
513.5379768034909,0.03662109375
535.2031725610141,0.03662109375
535.2031725610141,0.03814697265625
557.2737174783833,0.03814697265625
557.2737174783833,0.0396728515625
579.9982530483976,0.0396728515625
579.9982530483976,0.04119873046875
601.3490228285082,0.04119873046875
601.3490228285082,0.042724609375
621.3490228285082,0.042724609375
621.3490228285082,0.04425048828125
641.3490228285082,0.04425048828125
641.3490228285082,0.0457763671875
665.9790428273845,0.0457763671875
665.9790428273845,0.04730224609375
685.9790428273845,0.04730224609375
685.9790428273845,0.048828125
705.9790428273845,0.048828125
705.9790428273845,0.05035400390625
730.7233484939206,0.05035400390625
730.7233484939206,0.0518798828125
754.5682901912369,0.0518798828125
754.5682901912369,0.05340576171875
774.5682901912369,0.05340576171875
774.5682901912369,0.054931640625
795.2199003950227,0.054931640625
795.2199003950227,0.05645751953125
840.6962117168587,0.05645751953125
840.6962117168587,0.0579833984375
863.2610603189096,0.0579833984375
863.2610603189096,0.05950927734375
883.2610603189096,0.05950927734375
883.2610603189096,0.06103515625
947.362184143858,0.06103515625
947.362184143858,0.06256103515625
987.362184143858,0.06256103515625
987.362184143858,0.0640869140625
1007.9556403052993,0.0640869140625
1007.9556403052993,0.06561279296875
1027.9556403052993,0.06561279296875
1027.9556403052993,0.067138671875
1049.6485536464024,0.067138671875
1049.6485536464024,0.06866455078125
1089.6485536464024,0.06866455078125
1089.6485536464024,0.0701904296875
1112.785903721815,0.0701904296875
1112.785903721815,0.07171630859375
1135.5839175463188,0.07171630859375
1135.5839175463188,0.0732421875
1155.9217488009017,0.0732421875
1155.9217488009017,0.07476806640625
1179.1425792057998,0.07476806640625
1179.1425792057998,0.0762939453125
1243.2703601347748,0.0762939453125
1243.2703601347748,0.07781982421875
1265.1370820810553,0.07781982421875
1265.1370820810553,0.079345703125
1305.1370820810553,0.079345703125
1305.1370820810553,0.08087158203125
1326.3813365215901,0.08087158203125
1326.3813365215901,0.0823974609375
1369.662907080492,0.0823974609375
1369.662907080492,0.08392333984375
1389.662907080492,0.08392333984375
1389.662907080492,0.08544921875
1409.662907080492,0.08544921875
1409.662907080492,0.08697509765625
1494.0548684843816,0.08697509765625
1494.0548684843816,0.0885009765625
1500.0,0.0885009765625
					</series>
					<series title="60 + difference * 10" type="l" color="0xff0051" encoding="csv">0.0,60.0
1500.0,60.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
		<query>
			<formula>simulate [&lt;=2500;5] {100*((((100.0*(out_sum_all_acc-out_sum_all_approx))/(100.0*(out_sum_all_acc+1))))), out_sum_all_acc, out_sum_all_approx}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=2000;5] {40+difference, 50+10*err_magn_v, 100*err_magn_r, out_sum_all_acc, out_sum_all_approx, 80+out_sum_all_diff, mul2Atb.rCover, 100*((1+1.0*out_sum_all_acc)/(1+1.0*out_sum_all_approx))}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=4000;20] {out_sum_all_diff}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=400;5] {bits[0], 2+bits[1], 4+bits[2], 6+bits[3], 10+bits[4], 12+bits[5], 14+bits[6], 16+bits[7], 20+bits[8], 22+bits[9], 24+bits[10], 26+bits[11], 30+bits[14], 32+bits[15], 34+bits[16], 36+bits[13], 38+bits[12], 40+difference, 45+diffctrl, 50+outcnt}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>sup: err_magn_v
			</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=2500; 10] (max:err_magn_v)
			</formula>
			<comment/>
			<result outcome="success" type="quantity" value="≈ 0" timestamp="2024-02-29 15:43:12 +0100">
				<details>≈ 0</details>
				<plot title="Probability Density Distribution" xaxis="max: err_magn_v" yaxis="probability density">
					<series title="density" type="b(1.000000)" color="0x0000ff" encoding="csv">0.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: err_magn_v" yaxis="probability">
					<series title="probability" type="b(1.000000)" color="0x0000ff" encoding="csv">0.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: err_magn_v" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: err_magn_v" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">0.0,0.30849710781876083
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">0.0,0.0
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">0.0,0.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: err_magn_v" yaxis="count">
					<series title="count" type="b(1.000000)" color="0x0000ff" encoding="csv">0.0,10.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">0.0,0.0
0.0,10.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=1, bucket count=1
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [0, 0]
Mean estimate of displayed sample: ≈ 0</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>E[&lt;=2500; 10] (max:err_magn_r)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=25000; 10] (max:out_sum_all_diff)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=5000;200] {bitsCovered, 100*allCovered, mul2Atb.rCover}
			</formula>
			<comment/>
		</query>
		<query>
			<formula>Pr[&lt;=50000] (&lt;&gt;allCovered)
			</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=2500; 10] (max:bit_flips)</formula>
			<comment/>
			<result outcome="success" type="quantity" value="459.2 ± 26.9795 (95% CI)" timestamp="2024-02-29 15:09:33 +0100">
				<details>459.2 ± 26.9795 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="max: bit_flips" yaxis="probability density">
					<series title="density" type="b(32.000000)" color="0x0000ff" encoding="csv">411.0,0.009375
443.0,0.0125
475.0,0.00625
507.0,0.003125
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">459.2,0.0
459.2,0.0125
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=32, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [411, 538]
Mean estimate of displayed sample: 459.2 ± 26.98 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="max: bit_flips" yaxis="probability">
					<series title="probability" type="b(32.000000)" color="0x0000ff" encoding="csv">411.0,0.3
443.0,0.4
475.0,0.2
507.0,0.1
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">459.2,0.0
459.2,0.4
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=32, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [411, 538]
Mean estimate of displayed sample: 459.2 ± 26.98 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="max: bit_flips" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">411.0,0.0
443.0,0.3
475.0,0.7
507.0,0.9
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">459.2,0.0
459.2,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=32, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [411, 538]
Mean estimate of displayed sample: 459.2 ± 26.98 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="max: bit_flips" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">411.0,0.30849710781876083
443.0,0.6524528500599973
475.0,0.9332604888222655
507.0,0.9974714214555382
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">411.0,0.0
443.0,0.06673951117773447
475.0,0.3475471499400027
507.0,0.5549838829718046
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">411.0,0.0
443.0,0.3
475.0,0.7
507.0,0.9
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">459.2,0.0
459.2,1.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=32, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [411, 538]
Mean estimate of displayed sample: 459.2 ± 26.98 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="max: bit_flips" yaxis="count">
					<series title="count" type="b(32.000000)" color="0x0000ff" encoding="csv">411.0,3.0
443.0,4.0
475.0,2.0
507.0,1.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">459.2,0.0
459.2,4.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=32, bucket count=4
Runs: 10 in total, 10 (100%) displayed, 0 (0%) remaining
Span of displayed sample: [411, 538]
Mean estimate of displayed sample: 459.2 ± 26.98 (95% CI)</comment>
				</plot>
			</result>
		</query>
	</queries>
</nta>
